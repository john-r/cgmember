rCredits Software
Notes for developers

    UPDATE PROCEDURE (for upgrading software on the production server new.rcredits.org)
    - Run all tests before upload. No upload if not 100% pass. 
      Exceptions: 
      . new feature failure, if new feature is disabled.
      . admin.inc can normally be uploaded without testing
      . temporary debugging statements can be added if they are first tested on ws.rcredits.org
      . cut and paste bug fixes on prod server when they are in just one or two clumps of 6 lines or less AND the functions being patched have not otherwise changed (on the DEV system) since the last update
    - Find and delete all temporary debugging statements:
///       . Search for debug(, die(, print_r(, flog( and echo. Such lines should begin with /// or if keepers /**/ 
            Sometime write a macro to do the finding. 
      . Make sure debugMode in dwolla.php is FALSE.
    - Upload first to ws.rcredits.org, rebuild menus (and maybe reinstall) and make sure SOMETHING works
    - When updating data directly through phpMyAdmin or the PHP window or other admin tools, back up the database or relevant tables first.
    - Upload to new.rcredits.org, rebuild menus (and maybe reinstall) and make sure SOMETHING works.
    ***

  MEMBERSHIP PROCEDURE:
    . wait for READY status (once all steps are done, including Dwolla account and bank connection REQUEST)
    . make sure the photo is adequate
    . mark the account as an rTrader (OK) (before printing card)
    . print card and welcome materials, mail to new member (welcome includes reminder to verify bank account)

**************************************************

A. Development environment
 - See https://docs.google.com/document/d/1oQU-PPown2TV02Xg9htxByzOhUopGH-areUrlZ94Te0/edit
   for Step by Step Development Environment Setup Instructions
 - Use Notepad++ for viewing and editing .feature files (makes it a LOT more pleasant).
   View/User-Defined Dialogue/Import gherkin-format-notepad++.xml from the Gherkin folder
   If you use Notepad++ for PHP, Go to Settings/Style Configurator/Language, select php, add the following list to User Ext.:
      inc module test class install steps
   Also go to Settings/Preferences/Tab Settings and set the tab size to 2, replace with spaces
 - TESTING:
   . offline (isDEV): The only place to run the feature tests (sign in as admin with any password then click Tests).
   . staging server (!isDEV and !isPRODUCTION): copy production database to the staging server (for example ws.rcredits.org), then do something to see what will happen when it happens for real on the production server. Ideally, we should have (1) an API that allows a list of events to be automated and (2) a "what happened since xxx" report. Emails are disabled except to the organization and the tester. 
   . production server (isPRODUCTION): keep an eye on results, but don't mess with it
 
B. Coding style and strategies:
  - isDEV (defined at the top of rcredits.inc) is TRUE only under Windows
  - Mostly follow generally-accepted coding practices (For example, all of the Eclipse's defaults.)
  - Exceptions: 
    . Indent two spaces instead of one tab.
    . A simple if-then can go all on one line.
    . A simple else can immediately follow the closing brace of the if part. For example: } else zot();
    . Simple, single-line functions can go all on one line, without a documentation header.
  - Use camelCase for all internal variables and function names.
  - Use lowercase-and-hyphens for filenames and URLs.
  - Use lowercase_and_underscores only where necessary to keep Drupal happy.
  - Keep the code as short as possible without losing clarity.
  - In particular, avoid redundant code patterns, by creating small, low-level functions.
  - Make the tools easy to use -- that is, allow variations in number and type of arguments if that is convenient for the caller.
  - Avoid high-level Drupal functions -- for example don't use Views, Fields, and complex modules. Eventually we expect to
    drop Drupal, so avoid unnecessary dependency and entanglement.

C. rCredits module structure
   There are at least three distinct interfaces to rCredits, all sharing business logic code in the main rcredits folder.
   Each interface (rWeb, rSmart, rSMS, and rCron) has its sub-module in its own folder, with its own features and tests. Actually rCron is not a Drupal module and rSmart and rSMS probably don't need to be either.
   Code that is unlikely ever to apply to more than one interface, should not go in the main rcredits folder and vice versa.
   
D. rCredits namespaces and how they are abbreviated in calling files. Functions that are called outside their named space should be preceded by these namespace identifiers even when called from within the named space. For example, write u\test() not est() even within rcredits-testing.inc.
   r\ rCredits: shared business logic code
         (r\Web) rCredits\Web
         (r\Smart) rCredits\Smart
         (r\SMS) rCredits\SMS
         (r\Cron) rCredits\Cron
   t\  rCredits\Testing
   u\  rCredits\Utilities: helper functions that are not clearly specific to rCredits
   be\ rCredits\Backend: business logic functions called directly by the interfaces
        Separation of r\ from be\ is incomplete and muddy. We might wanna just use r\ for these backend functions.
   db\ rCredits\DB: our lowest level database functions (dbLookup, etc.)
   a\  rCredits\Admin
   v\  rCredits\Vote
   \   Drupal functions are marked with a (technically superfluous) leading backslash
 
E. Database clues
  - Download table with latest zipcodes, counties, etc. at unitedstateszipcodes.org/zip-code-database/
  - get countries/states table from CiviCRM db.
  - All rCredits tables begin with "r_", except `offsite` and `users`.
  - Uid fields in every table are bigint (unlike standard Drupal)
  - users (we use this as a table of accounts, not of users, and added many new fields)
    . Common Good Communities (CGCs) and regional servers have uid < 0.
        the software can treat any or all servers as virtual independent servers, 
        for example when CT started using rCredits for real before they had their own server, the NEW server gave them all "NEC." qids rather than NEW.
        1+0  to 3T: users in (not yet independent) region AAA (admin is technically in region AAA)
        1+3T to 6T: users in (not yet independent) region AAB etc.
        -1-0: the AAA region
        -1-1 to -3T: communities in the AAA region
        -1-3T: the AAB region etc. (leaving room for some 4-character regions)
     Ultimately we will have community records only for communities in the server region (but each community in the world would have its own ID and be recorded on its own region's server).
    . Tests create users with uids starting at 1+xT + 17550 (ZZA, ZZB, etc.)
    . name is a lowercase, no-punctuation version of fullName, sometimes with a numeric suffix to disambiguate.
         Exceptions: 
           admin is admin
           Common Good Finance is cgf (second in the "NEW" region)
           For regions, name is (uppercase) the 3-char start of their qids, followed by "."
    . pass should be called "password" but Drupal doesn't. So it's confusing. (just a heads-up)
    . mail the account's email address, encrypted
    . init is not used.
    . access: tracks last transaction or login date/time (just major access)
    . we don't currently use theme, timezone, signature, or signature format.
    . picture: used as a temp field for calculating stats
    . data: We use this to store auxiliary account information in a serialized associative array:
      - signupCo: assoc [company, companyPhone, employeeOk, isOwner, contractor] -- these are stored upon registration, if the company does not exist yet (otherwise the info goes in the relations table)
      - wants: bit collection of nonmember stores the member wants to buy from
      - by: who invited the account creator
      - calling: the account owner's life calling
      - newAccount: qid of new account when this account is closed by moving funds elsewhere
      - oneTimePass: assoc [pass, expires]
      - legalName: the account's legal name (usually same as fullName)
      - shortName: an optional shorter version of the account's name, for iCards and rCards and elsewhere maybe
      - lastiCode: number of last invitation card printed (normally empty or 1 mod 10)
      - website: the company's website
      - description: the company's description (html)
      - selling: choices for what the company sells (first line is the default)
      - coFlags: flag bits for company
      - notifyNowBy: how to notify the member when notification is immediate (E=email, T=text, or ET=both)
      - stepsDone: assoc of steps done (TRUE) or remaining (FALSE) before account is "member" (see R_STEPS)
      - achMin: minimum transfer from bank account or drawn-on account (draw for purchases may override)
      - pinThreshold: minimum purchase amount before PIN is required (NYI)
      - lastTx: [xid, other-me, amount, created] information about the account's most recent transaction
      - tenure: number of months at current address (supplied by user)
      - moves: number of moves over the past decade (gleaned from SSN history)
      - mediaConx: how many 1st and 2nd-degree connections with the system adminstrator
      - jid: acount record ID of joined account, if any
    . stats: past month statistics for the account (updated daily)
    . changes: array of important changes made to the record
    . community: the (negative) uid of the account's CGC. For anyone who is not in an established CGC, their community is the region (using the regional server's uid). For region and community records, community == uid
    . minimum: the user's preferred minimum balance. Request at least achMin more (and always a multiple of R_ACHMIN) automatically from bank if balance goes under by even one cent.
    . usdAccount is the USD account number, encrypted with R_WORD (which gets set in settings.php)
    . secure is a doubly-encrypted (with R_WORD) serialized assoc:
         cardCode: security code for QR code on rCard
         cardCode2: security code for QR codes on person's rCard as an agent for a company
         pin: the member's chosen 4-character PIN
         bankAccount: IBN (or fake IBN for US accounts created from routing number and account number)
        federalId: social security number or (for companies) EIN
  - r_txs
    . xid: record id
    . payerTid: Transactions are identified to the user counting just their own transactions (1, 2, 3, ...), NOT as an xid.
    . payeeTid: ditto
    . payer: uid of the account being debited.
    . amount: the transaction amount
    . data: non-essential and unusual essential information in a serialized associative array:
        undoneBy: xid of the transaction that reversed this one (if it is reversed)
        undoes: the transaction id of the undone transaction that this transaction reversed
        bonus and rebate: the dollar amounts of any rewards associated with a payment
        preapproved: (not in the table, just internally) transaction is preapproved by another server (a payment or an authorized business unilaterally charging a customer)
        changes: array of important changes made to the record
    . flags: miscellaneous bits of information
        taking:
        disputed: TRUE if the payer disputes the transaction (else not set)
        offline: transaction was taken offline
   (more to come...)
         
F. Notes on some PHP functions and rCredits utilities - often-used or crucial
     compact/extract: typically we compact arguments to a function and the function extracts them
     ray: turns a delimited string into an array, increasing code readability, typability, and maintainability
     just: makes extract() simpler, self-documenting, and less prone to confusion
     t (in bootstrap.inc): our version of Drupal's t() function, but with named messages and more convenient substitution
     EXPECT: a costly but easy-to-use constistency checker (replace some of this with param hints in PHP 7)
     ret<X>: A collection of functions to return the argument when it passes a certain test.
     is<X>: A collection of functions to return TRUE when the argument passes a certain test, otherwise FALSE.
     r\acct(): interface to the acct object -- representing an account (including region), combined with the current agent for the account. Note that r\acct($uid) is very different from new r\Acct($uid).
    
G. Special rCredits datatypes
  assoc: an associative array (not really special, but we call it "assoc" rather than "array" in the function headers)
   acct: an account (including the region), together with the agent currently representing that account

  zid: a signed id (non-zero) -- the meaning of a negative value varies, depending on usage (ie a qxid or qid)
 reid: a relation id
  uid: an account id
  xid: a transaction id

  qid: a mostly-alphabetic representation of a zid, eg XXXYYY or XXX.YYY, used externally for REST and SMS queries. There are two versions of qids:
    OLD STYLE (deprecated and being phased out, but all cards created before 6/2016 use this style)
      XXX (3 letters) represents the region's uid, YYYY... (some number of letters) represents a record ID
      the separator can be a colon instead of period, giving YYYY... a different meaning
        There are also two accepted alternatives to a colon: .. OR =
    NEW STYLE
      - proSe qids: XXXYYY, XXXYYYY, or XXXXYYYY
      - relational qids: the proSe qid of the company followed by -W (or -WW or -WWW), for example XXXYYY-W
        The Ws represent the agent number. No number is given to an agent except when issuing a company rCard
    NEW STYLE COMPRESSED (only in QR Code and magnetic stripe)
    . one char "c" to specify the QID format (character lengths of region, account within region, agent number):
      0-3: 1/2/n, n=c (where c is a radix-36 digit)
      4-7: 1/3/n, n=c-4
      8-B: 2/2/n, n=c-8
      C-F: 2/3/n, n=c-C (meaning c minus twelve)
      G-J: 3/2/n, n=c-G (meaning c minus sixteen), etc.
      K-N: 3/3/n, (n is always c mod 4)
      O-R: 3/4/n
      S-V: 4/4/n
      W-Z: 4/5/n
    . the region (radix 36: 0-9 A-Z) -- 999,999 < 1,679,616
    . the account within that region (radix 36) -- 9,999,999 < 60,466,176
    . agent number, if any (radix 36) -- 9,999 < 46,656 agents per company
    . in QR code, the region is omitted because it occurs earlier in the URL. For example:
         HTTP://XXX.RC4.ME/HYYWZZZZZZZZZZZZZZ represents code HXXXYYW, where H means 3 chars for the region (XXX),
         2 chars for the account (YY) and 1 char for the agent (W), with security code ZZZZZZZZZZZZZZ
-------------------------------------------------
    ABOUT THE QID FORMATS IN THE APP SOFTWARE:

    The account IDs sent to the server are the same as are printed on the rCards: radix 26 (6 or more capital letters -- followed by a dash and one or more additional letters if it is a company card). The new QR codes are parsed in base 36, then each piece (region, account, agent) is converted briefly to an integer, then converted to base 26 for use within the program, for storage in the device's database, and for sending to the server. So yes, the same thing gets sent to the server as for the old-format codes, except the "." is optional (and deprecated) between the region and account part AND colons are never sent -- always send the new-format company card codes (same as member code, plus dash and agent code).

    The security code, which has lower case as well as uppercase and digits is the same printed and in the QR and for use in the program. However it is hashed before storage (except for device owner(s)) on the device and can be passed hashed to the server when identifying a member.
-------------------------------------------------
         
    The region (XXX) can be omitted in SMS identifiers (eg "200 to .ABCDE for pie")
    For each region that exists, we have a user record with uid < 0, with name = the region name followed by a period (eg ABC.)
    Communities within the region have negative uids descending from their region's uid. The qid for a negative region is an exclamation point followed by the qid for the corresponding positive number.
  
 qid: a qid (7 characters or more) representing a uid acting as its own agent (. separator) OR an reid (: separator)

  The first two characters of a qid are a code for the country or region of population 5.7 million+. They could be unused most of the time, when doing business locally. 

  The third and possibly fourth character specify a smaller region within that country or region. For example NEW is Western Massachusetts. Each of these smaller regions may (or may not) have its own server. Next comes a dot (period), followed by as many letters as needed (no fewer than 3) to identify the account. An agent acting on behalf of an account gets a similar code with an equals sign instead of a dot.

  Here are the top-level codes for US regions:

  States: AZ  CA  FL  GA  IL  IN  MD  MI  MO  NJ  NY  OH  PA  TN  TX  WI (16)

  Regions: 
  NE:  ME, NH, VT, MA, CT, RI (New England) (6)
  VR:  VA, WV (Virginias) (2)
  CL:  NC, SC (Carolinas) (2)
  NW:  WA, OR (Northwest) (2)
  RM:  MT, ID, NV, UT, WY, CO, NM (Rocky Mountains plus NM) (7)
  MW:  ND, SD, NE, KS, MN, IA (Midwest, west of the Mississippi River) (6)
  US:  DE, KY, AL, MS, LA, AR, OK, DC (southeast continental miscellany) (7+1)
  UA:  AK, HI + territories (PR, VI, AS, GU, MP, etc) (non-contiguous) (2+5+)

  Other countries or groups of countries will also have region codes, which will default (for now) to their 2-letter country code.
  US Population maps: http://www.towndesktop.com/images/states/michigan-pop-total.jpg
 
H. Division of %PROJECT system responsibilities

  Common Good Finance
  - manage the first region until it exists and can stand on its own
  
  Region
  - identified by name LIKE '%.'
  - every account is in a region (active or not yet active)
  - every %PROJECT community is in a region (active or not yet active)

  Region - not yet active
  - no record in users table
  - does not have its own server yet (hosted on some other region's server)
  - has no responsibilities and need not have any legal or substantive existence
  
  Region - active
  - has a record in the users table (with no communities in the region's number space)
  - fullName = legalName = rCredits regionPlace Region (for example rCredits Western Mass Region)
  - email is regionPlace@rcredits.org OR region@regionPlace.rcredits.org (use a 2-char abbreviation instead of regionPlace if it is a state)
  - is also a %PROJECT community:
    . on its own server the region account is the Seedpack community (anyone in the region who is too far away from an organized %PROJECT community). The NEW Seedpack includes anyone not covered by another region.
    . on other servers, a region account represents all communities in that region (tracking the trade balance)
  - coordinate rCredits communities within the geographic region
  - manage an rCredits server (and a backup server) on behalf of its communities
  - register with FinCEN as an MSB
  - submit forms 1099-B to the IRS and state government
  - has its own EIN and contact info
  
  %PROJECT community (always active unless closed)
  - identified by uid<1
  - every account is in a %PROJECT community
  - fullName is anything. legalName is Placename State rCredits (with state spelled out)
  - email is placename@regionPlace.rcredits.org
  - accounts in the same %PROJECT community can be in different regions
  - any account outside an organized area is in the Seedpack community
  - issue rCredits for the common good (only tentative automatic rewards until declared a Common Good Community)
  - Common Good Communities (CGCs) transact with, collaborate with, and oversee other communities in the region
  - accounts in not-yet CGCs cannot do business with accounts in other communities
  - uids are negative numbers within their region's number space (eg CGC !AAA.AAB is in region !AAA.AAA)
    Sometimes a new community uid may need to be assigned to many people, if a community or region is subdivided.
  - must have its own EIN and contact info

I. Notes on transaction record system:
  - "rewards" are defined as signup bonuses, tx rebates, tx bonuses, inflation adjustment, and fee reimbursement. Transfers, grants, loans, and fines are not rewards.
  - uids contain the region info, so no need for recording "foreign" info in the data field
    Specifically: when we on the AAA regional server receive a transaction request from one qid to another, the first 3 characters are the "region" -- they tell us what database to hit. For example, if AAA.AAAB pays ZZZ.AAAC, we record the payment from AAA.AAAB's uid (2) to ZZZ.AAAC's uid and send the request to ZZZ's server and expect a confirmation (if no confirmation, roll back the transaction and give an error message OR queue the request).
  - On the other side of things, when we receive a request from some other community for a transaction with one of our accounts -- for example if we are the "ZZZ" community, receiving a request from the "ABC" community, for ABC.AAAAA to pay ZZZ.BBBBB -- we record the transaction and send confirmation to the ABC server. The ABC server in turn sends confirmation back to ZZZ that the transaction is done. The transaction is tentative on the ZZZ server until it can see that the ABC server received (or did not receive) its confirmation.
  - Thus every inter-community transaction is stored in both communities. Both communities know their trade balance, which should be public through a RESTful query. Intra-community transactions should also be stored twice -- ideally in member's devices. Smartphones and desktop computers running an app should store all their own transactions. Encrypted backups of everything to the cloud too.

J. Cron ops
  - ACHs almost always take 3 days (5 if there is a weekend in there). sometimes an extra day.
  - 

K. Handling USD
  - As a "money transmitter", Common Good Finance is a Money Services Business (MSB) -- a non-bank financial institution, reporting to FinCEN (a branch of the U.S. Treasury Department)
  - Each rCredits region is not a "money transmitter" because it is an agent of CGF
  
L. Setting up a development environment
  0. Install Apache, MySQL, and PHP (perhaps using XAMPP).
  1. Download rc4.me/rMembersDrupal.zip and extract the files into a "rMembers" folder in your webroot.
  2. Clone github.com/CommonGoodFinance/rCredits into webroot/cgMembers/rcredits
  3. Create a database and populate it with "webroot/cgMembers/rcredits/rMembers db.sql"
  4. Create a database user (and password) with all permissions.
  5. Copy "webroot/cgMembers/rcredits/.databases (rcredits - model)" to webroot/../
  6. Rename it .databases
  7. Edit it: supply proper database name/user/password and arbitrary salt, word, and inviteKey.
  8. Test by browsing to http://localhost/cgMembers and signing in with username admin -- any non-empty password will do.

X. Other thoughts:
  - The test server must have the following in its .htaccess file (and the production server must NOT!):
    <IfModule mod_headers.c>
      Header set Access-Control-Allow-Origin: http://localhost:8100
    </IfModule>
  - Joining by dumb cellphone is for play only. Accounts and transactions created that way should get deleted after a week of inactivity.
  - Suppose I live in 413 (NEW), but my cell is 987 (NYC). Person B lives in 222 with cell 333. When I am traveling to AAA I pay person B with SMS, by calling the local rCredits number. The local server contacts NYC to process my side of the transactions, but gets redirected to NEW. Similarly for person B's side. So at most 5 servers are involved (three just redirecting). NEW.rcredits.org and other subdomains act similarly.
  - use http://realfavicongenerator.net/ to create favicon from logo. To (re)test in Chrome, exit Chrome and type:
    DEL "C:\Users\William\AppData\Local\Google\Chrome\User Data\Default\Favicons"
  Use http://dkimvalidator.com to test DKIM, SPF, DMARC, and SpamAssassin results
  - don't do @function()->field to handle a possibly null object return. It sometimes crashes PHP.
  
  
LINKS:
http://stackoverflow.com/questions/548892/tips-for-optimizing-a-website-for-androids-browser
http://www.jquery4u.com/mobile/10-android-style-jquery-plugins/
http://www.designshock.com/the-most-complete-android-style-icon-set-15000-icons/

QUESTIONS:
. do box cookies need to be encrypted to avoid spoofing?

useful SQL queries:
SELECT SUM(-amount)/10 AS weeklyAmt, AVG(-amount) AS avgAmt, COUNT(amount)/10 AS weeklyACHs FROM r_usd WHERE created>UNIX_TIMESTAMP()-10*7*24*3600 AND amount<0 (ACHs over past 10 weeks)

to shrink db dump for import into test server, replace all /(.?26742000000...), 0x[0-9a-f]+,/ with '\1, 0,'

to create a graph of Greenfield CttyFund/PerMo by quarter (for presentation):
SELECT FLOOR((1514782800-created)/(60*60*24*90)) AS quarter, ABS(ABS(bankOut)-ABS(bankIn))+tradeOut+tradeIn AS cttyFund, AVG(perMo)*3 AS trade, AVG((ABS(ABS(bankOut)-ABS(bankIn))+tradeOut+tradeIn)/perMo/3) AS ratio FROM `r_stats` WHERE ctty=-26742000000002 AND perMo>1 GROUP BY FLOOR((1514782800-created)/(60*60*24*90)) ORDER BY created

SELECT FLOOR((1514782800-created)/(60*60*24*30)) AS month, AVG(ABS(ABS(bankOut)-ABS(bankIn))+tradeOut+tradeIn) AS cttyFund, AVG(perMo) AS trade, AVG((ABS(ABS(bankOut)-ABS(bankIn))+tradeOut+tradeIn)/perMo) AS ratio FROM `r_stats` WHERE ctty=-26742000000002 AND perMo>1 GROUP BY FLOOR((1514782800-created)/(60*60*24*30)) ORDER BY created

SELECT FLOOR((1514782800-created)/(60*60*24*30)) AS month, AVG(ABS(ABS(bankOut)-ABS(bankIn))+tradeOut+tradeIn)/1000 AS cttyFundK, pAccts, bAccts, AVG(perMo)/1000 AS tradeK, AVG((ABS(ABS(bankOut)-ABS(bankIn))+tradeOut+tradeIn)/1000/(pAccts+bAccts)) AS ratio FROM `r_stats` WHERE ctty=-26742000000002 GROUP BY FLOOR((1514782800-created)/(60*60*24*30)) ORDER BY created

how does periodic p2b tx volume grow with number of members? tx$/mo/m/m = avg 1.76 all, 0.11 gfld as of 12/24/2017
SELECT FLOOR(t.created/(60*60*24*30)) AS month, COUNT(DISTINCT payer) AS members, COUNT(amount)/COUNT(DISTINCT payer) FROM r_txs t JOIN users u ON u.uid=t.payer WHERE u.flags&(1<<6)=0 AND u.community=-26742000000002 GROUP BY FLOOR(t.created/(60*60*24*30))

SELECT DISTINCT u.fullName,t.* FROM r_usd t JOIN r_invoices i ON i.payer=t.payee JOIN users u ON u.uid=t.payee WHERE i.amount=25 AND i.payee=26742000000220 AND t.created>=i.created ORDER BY t.payee,t.created