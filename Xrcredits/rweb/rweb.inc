<?php
namespace rCredits\Web;
use rCredits as r;
use rCredits\Backend as be;
use rCredits\Util as u;
use rCredits\Db as db;
use rCredits\Txs as x;
use rCredits\Admin as a;
use rCredits\Risk as k;
use rCredits\Web as w;
use rCredits\Vote as v;

/**
 * @file
 * rWeb include file
 *
 * Utilities and definitions for the rWeb module
 * (anything that doesn't have to be in rweb.module)
 */

require_once __DIR__ . '/rweb-subs.inc';
require_once __DIR__ . '/../rcredits-backend.inc';
include_once __DIR__ . '/rweb-txs.inc'; // treat this as an extension of this file, just to make menu ['file'] consistent
// FAILS (WHY?) include_once __DIR__ . (u\test() ? '/../rcredits-testing.inc' : '/../testing-stub.inc'); // else fail in showForm()
//include_once __DIR__ . '/../rcredits-testing.inc'; // else fail in showForm()

define('UPLOAD_DIR', dirname($_SERVER['DOCUMENT_ROOT']) . '/public_ftp/incoming');

/**
 * Handle page not found error (404).
 */
function formPageNotFound($form, &$sta, $arg = '') {
  $page = $_SERVER['REQUEST_URI'];

  $page = isDEV ? basename($page) : substr($page, 1); // ignore leading slash
//  if ($page == 'timedout') return r\go(PROMO_URL); // something weird went wrong (only on DEV?)
  header_remove(); // prevent 404 circle (doesn't help)
  
  if ($page[0] == '-') return formSignup('', $sta, 'code=' . substr($page, 1)); // invitation!
///     print_r(debug_backtrace());
  return formEmpty(t('The page you requested does not exist.'));
}

/**
 * Handle an arbitrary AJAX request.
 * GET parameters:
 * @param string op: what to do
 * @param string sid: session id
 * @todo: maybe all zero uid for some ops (by looking up two fields in sessions?)
 */

function ajax() {
  global $channel; $channel = TX_AJAX; // tell log and tellAdmin our environment
  extract(just('op sid data', $_POST ?: $_GET)); // don't sanitize this, it only comes from us!
  header('Content-Type: application/json');

  lug($_GET);
  if (!@$sid or !$vars = w\sessionVars($sid)) ajaxErr('bad sid');
  if (!$aid = $vars['uid'] or !$myid = $vars['myid']) ajaxErr('not signed in');
//  $mya = r\acct($myid, $aid);
/**/  lug(compact(ray('op data myid aid')));
  $data = json_decode($data); // must be passed encoded or jQuery post() passes null
  $mya = r\acct($myid); // usually relevant
  
  if ($op == 'ssn') { // verify member's SSN
    if ($mya) $mya->ssnCheck();
    exit();
  } elseif ($op == 'typeWho') { // get selections for suggestWho
    exit(json_encode(be\memberRay($myid, $aid, $data))); // data=1 means companies only
  } elseif ($op == 'changeCtty') { // change member's community
    extract(just('newCtty retro', $data));
    if (!$mya or !$mya->changeCtty($newCtty, $retro, $err)) ajaxErr(t('Community change failed.|') . $err);
//    ajaxRet(['msg' => "uid is $uid, newCtty is $newCtty"]);
  } elseif ($op == 'setBit') {
    extract(just('uid bit on', $data));
    if ($a = r\acct($uid) and $b = u\consta('b', $bit) and $b < B_ADMIN2) {
      $a->setBit($b, $on);
    } else w\ajaxErr(t('nope'));
  } elseif ($op == 'who') {
    extract(just('who question amount', $data));
    $amtDpy = u\fmtAmt($amount);
    if (!is_array($whoA = be\identify($who, $myid, stripos(" $question", t(' pay ')) !== FALSE, 'no self-trading'))) {
      ajaxRet(ray('who confirm isNonprofit', $whoA->mainQid, t($question, 'name amount', $whoA->fullName, $amtDpy), $whoA->isCtty or $whoA->coCan(CO_NONPROFIT)));
    }
    list ($msg, $args, $choices) = $whoA;
    $message = t($msg, $args);
    if (empty($choices)) ajaxErr($message);
    foreach ($choices as $uid => $fullName) {
      $choices[$qid = r\qid($uid)] = "$qid $fullName";
      unset($choices[$uid]);
    }

    // create modal selection form
    $choice = selectFld('', '', attrib(['size' => 12]), $choices);
    $which = render($choice);
    $title = t($question, ray('name amount', t('whom'), $amtDpy));
    ajaxRet(compact('which', 'title', 'message'));
  } elseif ($op == 'whoami') { // return one or more data fields
//    $data = just('fullName', ray($data)); // limit what we can get to what we need
    ajaxRet(ray('whoami', "$mya->fullName ($mya->mainQid)"));
  } else ajaxErr(t('Invalid op'));
  ajaxMsg(t('Done!'));
}

function ajaxErr($msg) {ajaxMsg($msg, 0);}
function ajaxMsg($msg = '', $ok = 1) {ajaxRet(['message' => $msg], $ok);}
function ajaxRet($data, $ok = 1) {
  $data = json_encode($data + compact('ok'));
  u\loga('ajax', $data);
  exit($data);
}

/**
 * Complete a "no signin required" request
 *   called when the user clicks an email link: new.CommonGood.earth/do/do<form>~<qid>~<emailCode>~mo~v
 *   like new.CommonGood.earth/do/doProxies~NEWAAA~23lkjlk6j~2~$16.
 * @param string code: an encoded serialized array of parameters, possibly including:
 *   op: what to do (REQUIRED)
 *   v: an amount or identifier
 *   mo: month link was created, relative to first rdo (see rdoMonth())
 *   sql: a database request, if any
 *   subs: substitutions for the database request
 *   
 * Possible values for op:
 *   (numeric): record id in r_do -- other parameters for one-time op are serialized in that record's data field
 *      including the true op. The record also includes uid and expiration time.
 *   min: change minimum to $v
 *   sql: do the database operation in $sql
 *   addr: show an address for account QID $v (for shipping or thank-you card)
 *   inv: pay invoice number $v
 *   confirmInvite: confirm an invitation
 *   do<form>: allow member to visit one specific page
 * Alternatively, code can be an error message (recognized by having a space in it).
 * @param string $args: urlencoded array of arguments passed from an email (from whence $_POST is not reliably received by Drupal)
 * @see also r\makeDo()
 */
function rdo($code, $args = '') {
  global $channel;
  if (isDEV) foreach (['error', 'status'] as $k) unlink(f('t.dosayFilename', $type)); // clear tests (no way to see if testing)
  if (time() < strtotime('6/1/2017')) u\loga('rdo', compact('code', 'args'));
  if (strpos($code, ' ')) return doSay(plain($code));
  if ($i = strpos($code, '~') and $i < 15) { // mailChimp-type action
    @list ($op, $qid, $ecode, $mo, $v) = explode('~', $code . '~~~~~~');
    if (!@$op or !@$qid or !@$a = r\acct($qid) or @$ecode != $a->emailCode) return doSay(t('That is not a valid link.'));
  } else {
    if (!$info = r\doCode($code)) return doSay(t('That link is archaic.'));
///  print_r($info);
    if ($once = is_numeric($doid = @$info['op'])) {
      if (!$row = db\lookup('uid,data,expires', 'r_do', 'doid=:doid', compact('doid'))) return doSay(t('That link is no longer valid.')); // already used OR deleted because it expired
      extract($row);
      $info = unserialize($data) + $row; // get new op, etc.
      $a = r\acct($uid);
    }
    extract(just('op v mo expires sql subs', $info));
  }
  
  if (@$mo) $expires = (r\rdoMonth() > $mo + 3) ? 1 : FALSE; // finagle expiration if link is older than 3 months
  if (@$expires and r\rTime() >= $expires) return doSay('link expired');

  $channel = TX_LINK;
  
  if (u\starts($op, 'do') and $formName = substr($op, 2)) {
    return w\showform($formName, "qid=$a->mainQid&ecode=$ecode&$v");
  }
//  if ($op == 'min') $res = $a->update('minimum', $v); // not used (rewrite as a confirmation form)
  if ($op == 'nosecret') $res = $a->setBit(B_SECRET, FALSE);
  if ($op == 'debtok') $res = $a->setBit(B_DEBT, TRUE);
  if ($op == 'rsv') {return r\go("savings/qid=$qid&ecode=$ecode");}
  if ($op == 'sql') $res = db\q($sql, $subs);

  if ($op == 'addr') {
    $a = r\acct($v);
    $phone = $a->co ? t('Phone: ') . u\fmtPhone($a->phone) : '';
    $addr = t('Physical address: ') . r\location($a, TRUE);
    return doSay(tr('%nm<br>%postal<br>%addr<br>%phone<br>', 'nm postal addr phone', $a->fullName, $a->postalAddr, $addr, $phone), 'ok');
  } 
  
  if ($op == 'inv') {
    if ($err = r\badUnpaidInv($v)) return doSay($err);
    return r\go("handle-invoice/nvid=$v&toMe=1&code=$code");
  } 
  
  if ($op == 'confirmInvite') {
    $a = r\acct($v);
    $a->setBit(B_CONFIRMED);
    return doSay(t('Your invitation to %nm is confirmed!', 'nm', $a->fullName), 'ok');
  }
  
  if ($op == 'vote' or $op == 'yesno') { // NOTE: about a third of the time, $_POST comes in empty (even from the same computer)
    $issue = $v;
    if ($issue != '20141220') return doSay('link expired');
//    $vote = 0;
//    foreach (ray('wl sl wd ed no') as $k => $vv) $vote |= u\setBit($vote, $k, isset($_POST[$vv]));
    extract(just('yes no', $args));
    $vote = @$yes ? 1 : 0;
    $info = compact(ray('uid issue vote'));
    $vid = db\lookup('vid', 'r_votes', 'uid=:uid AND issue=:issue', compact('uid', 'issue'));
//    $vid = 0;
///  debug(compact(ray('op args issue yes no vote info vid')));
    if ($vid) db\update('r_votes', $info + compact('vid'), 'vid'); else db\insert('r_votes', $info);
    $say = t('Thank you for your RSVP! ');
    if (@$no) $say .= t('We will miss you. ');
    r\tellAdmin('RSVP!', ['coming'=>@$yes ? 'yes' : 'no'], $uid);
    $res = TRUE;
  }
  
  if ($op == 'join') {
    $otherId = $v;
    $joint = r\perm(B_JOINT);
    if  (r\relation(1, $otherId, $a->id, 'permission=:joint', compact('joint'))) { // inviter still wants it?
      $a->unjoin(); // zap any other joins or join requests
      if ($reid = r\relation('reid', $a->id, $otherId)) {
        $info = ['permission'=>$joint, 'draw'=>0] + compact('reid');
      } else $info = ray('main other permission draw', $a->id, $otherId, $joint, 0);
      // (already in a transaction) $DBTX = \db_transaction();
      db\update('r_relations', $info, 'reid', TRUE); // create relation or just set permission
      $a->join(r\acct($otherId)); // remember who is joined
      // unset($DBTX); // commit
      $res = TRUE;
    }
  }

  if (!@$res) return doSay(t('Request failed.'));
  if ($once) db\q('DELETE FROM r_do WHERE doid=:doid', compact('doid'));

  return doSay(@$say . t('Your request was successfully completed.'), 'ok');
}

/**
 * Show a form called from a form linked to in an email or during signup, without signing in.
 */
function formProx($form, &$sta, $args) {
  extract(just('page', $args0 = $args));
  foreach (ray('Event Democracy Proposal') as $k) {
    if (strpos($page, $k) !== FALSE) include_once DRUPAL_ROOT . R_PATH . '/rvote/rvote-web.inc';
  }
  
  $func = 'rCredits\\Web\\form' . ucwords($page);
  $form = $func($form, $sta, $args0);
  foreach (['validate', 'submit'] as $k) {
    if (!@$form["#$k"] and function_exists($func . "_$k")) $form["#$k"] = [$func . "_$k"];
  }
  return $form;
}

/**
 * Print a JSON array of communities
 */
function cttyList() {
  $cttys = db\q('SELECT uid,fullName FROM users WHERE uid<0 ORDER BY fullName')->fetchAllKeyed();
  $cttys[0] = t('ALL communities');
  foreach ($cttys as $k => $v) $cttys[$k] = trim(str_replace(PROJECT, '', $v));
  asort($cttys);
  unset($cttys[$seed = r\serverUid()]);
  $cttys[$seed] = t('Seedpack (no community yet)'); // last
/**/ echo json_encode($cttys);
  exit();
}

/**
 * Generate choices for a member typeahead field
 * @param string $string: what the user has typed so far
 * @param string $role: 'payer', 'payee', 'industry', 'company', or '' (other), depending on the role of the user
 * @param int $myid: the current account (globals and session variables are inappropriate here)
 * @todo: ditch this altogether or make it efficient with separate rCredits backend (put it in the api)
 *    maybe even use .htaccess to redirect the typeahead URL to the backend? privacy is not crucial here
 * @patched: Drupal bug which gets Ajax error on any input that matches (.*)/?.([^\.]|\..)
 */
function auto($role = '', $myid = 0, $string = '') {
//  return drupal_json_output(array('zot' => "role=$role myid=$myid string=$string"));
  if (!$string) return;
  $string0 = $string;
  $string = '%' . u\shortName($string, '%') . '%'; // this also prevents malicious database injection
//  $string = str_replace(' ', '%', \db_like(" $string "));
  if (!is_numeric($myid)) return;
  $params = 'string'; // list of substitution parameters for query (each section below can add additional params)
  $cttyCrit = ($myid AND $mya = r\acct($myid) and $cttyId = $mya->community) ? "community=$cttyId" : '1';

  if (u\abbreviates('paye', $role)) {
    $other = $role == 'payer' ? 'payee' : 'payer';
    $selection = <<<EOF
      u.uid, u.fullName AS display 
      FROM users u WHERE ((u.name LIKE :string OR u.email=:string) AND $cttyCrit)
EOF;
//      FROM users u WHERE (u.uid>1 AND (u.name LIKE :string OR u.email LIKE :string))
  } elseif ($role == 'industry') { // the one place we don't need to include the qid (for definiteness)
    if (strlen($string) > 6) {
      $soundex = soundex($string0) . '%';
      $soundex = " OR SOUNDEX(industry) LIKE '$soundex'";
    } else $soundex = '';
    $string = u\shortName(" $string0 ", '%');
    $selection = <<<EOF
      industry COLLATE utf8_general_ci AS display FROM r_industries WHERE (industry LIKE :string $soundex)
      UNION SELECT fullName COLLATE utf8_general_ci AS display FROM users WHERE :IS_CO AND name LIKE :string
EOF;
  } elseif ($role == 'company') {
    $selection = 'uid, fullName AS display FROM users WHERE :IS_CO AND name LIKE :string';
  } elseif (u\abbreviates('ctty', $role)) { // ctty or cttyPerson
    $personal = $role == 'ctty' ? '' : ' AND NOT :IS_CO';
    $selection = "uid, fullName AS display FROM users WHERE name LIKE :string $cttyCrit $personal";
  } else $selection = 'uid, fullName AS display FROM users WHERE name LIKE :string';
  $sql = "SELECT DISTINCT HIGH_PRIORITY $selection AND uid>:CANONIC_ACCTS ORDER BY display LIMIT 10"; // omit communities and regions
//return drupal_json_output(array('zot' => "role=$role myid=$myid string=$string sql=$selection"));
///   return drupal_json_output(array('zot' => "subs=" . print_r(compact(ray('string myid')), 1)));

  $result = db\q($sql, compact(ray($params)));
  $matches = [];
  while ($row = $result->fetchAssoc()) {
    extract($row); // ($uid), $display
    if (@$uid) $display = r\qid($uid) . '   ' . $display;
// (never show email) $display .= @$email ? " ($email)" : '';
    $matches[$display] = plain($display);
//    return drupal_json_output(array('zot' => "display=$display"));
  }
  \drupal_json_output($matches);
}

/**
 * Accept a grant application.
 */
function formGrant($form, &$sta) {
  global $mya;
  $title = item(t('Organizer Grant Application'));
  $subtext = item(t('<p>Are you passionate about democratic economics and the potential of %PROJECT to create a society to benefit everyone? Do you have the skills to organize a group to begin the process of becoming a Common Good Community? Great! Common Good Finance has a grant for you.</p><p>Open a %PROJECT Account, form an organizing committee of 3 or more people, get one retail business and 10 other people to sign up, then fill out this form to request a grant of up to $5,000. Please also email us your resume, CV, or equivalent.</p><p>Remember the board may not be familiar with your work or your local community, so explain as needed.</p>', 'iReward', R_HELPER_BONUS));
  $did10 = boolFld(t('Got 10/1:'), t('Have you successfully recruited 10 %PROJECT members and at least 1 %PROJECT business?'));
  $biz = textFld(REQ . t('Biz:'), [t('Business name(s)'), t('Which business(es) did you recruit?')]);
  $amount = textFld(REQ . t('Request:'), [t('Requested grant amount'), t('How much grant funding are you requesting (up to $5,000)?')]);
  
  $class = ['class' => ['inline']];
  foreach ($gets = ray('_getOrganizers _getIndividuals _getCompanies') as $k) {
    $$k = w\rendA($k, textFld(BARE, [t('How many')], $class));
  }

  $_getPartners = w\rendA('getPartners', textFld(BARE, [t('Organization name(s)')], $class));
  $_getOther = w\rendA('getOther', textFld(BARE, [t('Describe')], $class));
  $_start = w\rendA('start', textFld(BARE, [t('Start date')], $class));
  $_end = w\rendA('end', textFld(BARE, [t('End date')], $class));

  $plan = item(t(<<<EOF
<p>What do you plan to accomplish with this funding and over what (near future) time period?<br>
<ul>
<li>Inspire %getOrganizers community members to meet regularly, to form a Common Good Community.</li>
<li>Recruit %getIndividuals more individuals to sign up.</li>
<li>Recruit %getCompanies more companies to sign up.</li>
<li>Develop partnerships with these organizations: %getPartners.</li>
<li>Other: %getOther</li>
<li>Grant period starts %start, ends %end.</li>
</ul>
EOF
  , compact(array_merge(ray('_getOrganizers _getIndividuals _getCompanies _getPartners _getOther _start _end'), $gets))), t('Plan:')); // + fails here (PHP bug)

//  foreach ($accountables = ray('meet report sayOther') as $k) $$k = w\rendA([$k => boxFld($k, BARE)]);
//  foreach ($accountables = ray('meet report sayOther') as $k) $$k = "<input type=\"checkbox\" id=\"edit-$k\" name=\"$k\" class=\"inline\" />";
  $_sayWhat = w\rendA('sayWhat', textFld(BARE, [t('Describe')], $class));
  $accountables = ray('meet report sayOther', t('Attend most weekly organizer conference calls? (We might ask you to participate in these meetings <i>before</i> we consider your grant request.)'), t('Report progress monthly by email?'), t('Other (work this out with %PROJECT staff): %sayWhat', compact('_sayWhat')));
  $accountable = w\boxFlds('crits', t('Reporting:'), t('How will you be accountable to %PROJECT and to other %PROJECT organizers?'), $accountables);
/*  $accountable = item(t(<<<EOF
<p>How will you be accountable to Common Good Finance and to other rCredits organizers?<br>
<ul>
<li>@meet Attend most weekly organizer conference calls? (We might ask you to participate in these meetings <i>before</i> we consider your grant request.)</li>
<li>@report Report progress monthly by email?</li>
<li>@sayOther Other (work this out with CGF staff): @sayWhat</li>
</ul>
EOF
  , compact($accountables) + compact('sayWhat')), t('Reporting:'));
  */
  $refs = textFld(REQ . t('References:'), [t('Work/Organizing references'), t('Please give at least two work or community organizing references (with contact information). We will also contact the business(es) you have recruited.')]);
  if ($mya) {
    $submit = submit(t('Submit Grant Request'));
  } else say(t('You must sign in, to apply for a grant.'));
  
  return labeled(compact(ray('title subtext did10 biz amount plan accountable refs submit')));

// CGF: ask for resume, references, and what do you think it will take to get 50 people and 5 retail businesses and some of their employees and suppliers signed up? what's your strategy?
}

function formGrant_submit($form, &$sta) {
  $aA = r\agent();
  $helperCount = db\count('users', ':IS_OK AND NOT :IS_CO AND helper=:myid', ['myid' => $aA->id]);
  extract($params = $sta['input'], EXTR_PREFIX_ALL, 'i');
  extract($i_crits, EXTR_PREFIX_ALL, 'i');
  foreach (ray('i_did10 i_meet i_report i_sayOther') as $k) $$k = @$$k ? t('YES') : t('NO');

  $th = 'th class="grant-th"';
  $td = 'td class="grant-td"';
  $msg = <<<EOF

<h4>GRANT APPLICATION</h4>

<table id="app" border="1" cellspacing="3" cellpadding="0">
<tr><$th>Name:</th><$td>$aA->fullName</td></tr>
<tr><$th>Amount requested:</th><$td>$i_amount</td></tr>
<tr><$th>At least 10 individuals recruited so far:</th><$td>$i_did10 (actual count: $helperCount)</td></tr>
<tr><$th>Businesses recruited so far:</th><$td>$i_biz</td></tr>
<tr><$th>Grant period:</th><$td>$i_start to $i_end</td></tr>
<tr><$td colspan="2">&nbsp;</td></tr>
<tr><$td colspan="2">What do you plan to accomplish with this funding?</td></tr>
<tr><$th>Inspire local organizers to meet regularly, to form a Common Good Community:</th><$td>$i_getOrganizers</td></tr>
<tr><$th>Recruit more individuals:</th><$td>$i_getIndividuals</td></tr>
<tr><$th>Recruit more companies:</th><$td>$i_getCompanies</td></tr>
<tr><$th>Develop partnerships with these organizations:</th><$td>$i_getPartners</td></tr>
<tr><$th>Other:</th><$td>$i_getOther</td></tr>
<tr><$td colspan="2">&nbsp;</td></tr>
<tr><$td colspan="2">How will you be accountable to Common Good and to other Common Good organizers?
<tr><$th>Attend most weekly organizer conference calls?</th><$td>$i_meet</td></tr>
<tr><$th>Report progress monthly by email?</th><$td>$i_report</td></tr>
<tr><$th>Other:</th><$td>$i_sayWhat</td></tr>
<tr><$td colspan="2">&nbsp;</td></tr>
<tr><$th>References:</th> <$td>$i_refs</td></tr>
</table>
EOF;

  r\tellAdmin('organizer grant request', $params + compact('msg'));
  return r\go('', t('Your grant request has been submitted! You will be hearing from %PROJECT within a week or two.'));
}

/**
 * Handle coupons for the account.
 */
function formCoupons($form, &$sta, $args = '') {
  global $mya;
  extract(just('discount gift redeem', $args));
  
  if ($args == 'redeem') {
    $title = t('Redeem a Gift Coupon');
    $code = w\textFld(t('Coupon Code:'), [t('Code')], required());
    $submit = submit(t('Redeem'));
  } elseif ($args == 'gift') {
    $title = t('Create a Gift Coupon');
    $subtext = w\item(t('Each coupon is unique, so don\'t make a copy or print more than once.'));
    $amount = w\textFld(t('Amount:'), [t('Gift amount')], required());
    $count = w\textFld(t('Count:'), [t('How many?'), t('Print how many coupons? (8 to a sheet, to be cut in half 3 times)')], required());
    $submit = submit(t('Create'));
  } elseif ($args == 'discount') {
    $title = t('Create a Discount Coupon');
    $subtext = w\item(t(<<<X
      <p>How it works:</p>
      <ol><li>Fill out the form.</li>
      <li>You choose:
        <ul><li>%PROJECT members get an automatic rebate when they pay you OR</li>
        <li>You charge less when they present the coupon.</li>
        </ul>
      </li>
      <li>Print a sheet of coupons (or copy and paste into a print ad or newsletter).</li>
      </ol>
      <p>%PROJECT will also distribute your coupon to each %PROJECT member!</p>
X
    ));
  
    $amount = w\textFld(t('Discount:'), [t('Amount or Percentage'), t('For example $20 or 10%')], required());
    $minimum = w\textFld(t('Minimum:'), [t('Minimum purchase'), t('Minimum purchase amount, to get the discount')], required(0));
    $start = w\textFld(t('Valid from:'), [t('Start date')], required(u\fmtDate(time(), TRUE)));
    $end = w\textFld(t('Valid until:'), [t('End date'), t('An end date is strongly encouraged.')]);
    $ulimit = w\textFld(t('Limit:'), t('Leave this blank for unlimited uses.'), suffix(t(' uses per member')));
    $automatic = w\boolFld(t('Automatic?'), t('If the discount is not automatic, you will need to do the math each time.'), TRUE);
    $on = w\textFld(t('Discount on:'), [t('Discount on what')]);
    $submit = submit(t('Create Coupon'));
  } else {
    $title = t('Coupons');
    $buttons = 
      w\btn('/community/coupons/discount', t('Create a Discount Coupon'))
    . w\btn('/community/coupons/gift', t('Create a Gift Coupon'))
    . w\btn('/community/coupons/redeem', t('Redeem a Gift Coupon'));
    $buttons = w\item($buttons);
  }
  
  $title = w\item($title);
  $type = w\hidFld($args);
  jsx('coupons');
  
  return labeled(compact(ray('title buttons subtext code amount count minimum start end ulimit automatic on submit type')));
}

function formCoupons_validate($form, &$sta) {
  global $mya;
  $today = strtotime('today');
  extract(just($fields = 'type code amount count minimum start end ulimit', $sta['input']));

  if ($type == 'gift') {
    if ($err = u\badAmount($amount, '>0')) return w\sayFieldErr($err, 'amount');
    if ($err = u\badAmount($count, '>0')) return w\sayFieldErr($err, 'count');
    if ($mya->creditLine < $amount * $count) return w\say(t('You cannot issue more gift coupons than your credit Line allows (%max).', ray('max', u\fmtAmt($amount * $count))), 'err');
    $ulimit = 1;
  } elseif ($type == 'discount') {
    $amt0 = trim($amount);
    $amount = str_replace('%', '', $amount);
    $nums = 'amount minimum' . ($ulimit === '' ? '' : ' ulimit');
    foreach (ray($nums) as $k) if ($err = u\badAmount($$k, $k == 'amount' ? '>0' : '>=0')) return w\sayFieldErr($err, $k);
//    if ($amt0[0] == '$' and $amount < 1) return w\sayFieldErr(t('The discount amount cannot be less than $1.'), 'amount');
//    if (substr($amt0, -1, 1) == '%' and $amount > 100) return w\sayFieldErr(t('The discount percentage must be no more than 100%.'), 'amount');
    if (strpos($amt0, '%')) $amount = -$amount; // we use negative to mean percentage
    
    foreach (ray('start end') as $k) if ($$k and $err = u\badDate($$k, $today)) return w\sayFieldErr($err, $k);
    if ($end and $end < $start) return w\sayFieldErr(t('Ending date cannot be before starting date.'), 'end');
    if ($start == u\fmtDate($today, TRUE)) $start = ''; // empty means now
    foreach (ray('ulimit end') as $k) $$k = (int) $$k;
  } elseif ($type == 'redeem') {
    if (!$a = r\iCardAcct($code, $iCode)) return w\say('invalid gift card', 'code');
    if ($a->id == $mya->id) return w\say(t('You cannot redeem your own gift card.'), 'err');
    $coupid = db\lookup('coupid', 'r_coupons', 'fromId=:id AND :iCode BETWEEN start AND end-1', ray('id iCode', $a->id, $iCode)) ?: 0;
    if (db\lookup('id', 'r_coupated', 'uses=:iCode AND coupid=:coupid', compact(ray('iCode coupid')))) return w\say('already redeemed', 'err');
    u\preray(compact(ray('coupid iCode')), $sta['input']); // pass the results to submit function
  } else return w\say(t('bad coupon'), 'err');
  
  u\preray(compact(ray($fields)), $sta['input']); // remember fixed numeric values
}

function formCoupons_submit($form, &$sta) {
  global $mya; $myid = $mya->id;
  extract(just('type amount coupid iCode count minimum start end ulimit automatic on', $sta['input']));
  
  $gift = ($type == 'gift');
  if ($gift or $type == 'discount') {
    $flags = $gift ?: 0; // set gift flag
// NO! only automatics get recorded   $flags |= ((bool) @$automatic) << 1;
    if ($gift) {
      list ($start, $end) = [$mya->giftCoupons, $coups = $mya->giftCoupons + $count];
// NO! do this in printCoupons()     $mya->update('giftCoupons', $coups);
    } elseif (!@$on) $on = $minimum ? t('your purchase of %min or more', 'min', u\fmtAmt($minimum)) : t('any purchase');
    if ($gift or $automatic) db\insert('r_coupons', compact(ray('amount minimum start end ulimit flags')) + ray('fromId', $myid));
//    say(t('Your coupon has been successfully created!'));
    $args = u\urlify(http_build_query(compact(ray('type amount count on start end automatic'))));
    if (u\test()) $args = u\deurlify($args);
    return r\go("/community/coupons/print/$args");
  } elseif ($type == 'redeem') {
    $res = db\lookup('fromId,amount', 'r_coupons', 'coupid=:coupid', compact('coupid'));
    extract($res);
    $fromA = r\acct($fromId);
    be\transfer('payment', $fromA, $mya, $amount, FOR_GOODS, t('gift'), NULL, ray('force', 1));
    db\insert('r_coupated', ray('uid coupid uses when', $myid, $coupid, $iCode, time()));
    $mya->update('giftPot', $mya->giftPot + $amount);
    say(t('coupon redeemed', 'amount giver', u\fmtAmt($amount), $fromA->fullName));
  }
}

/**
 * Choose how often to send each type of notification.
 */
function formNotifications($form, &$sta) {
  global $notifyWhens, $notifyNowBys;
  
  global $mya;
  $title = item(t('Notifications'));
  $subtext = item(t('How often do you want to hear from us about these various things?'));
  
  $events = [
    t('explicit payment/transfer from your account'),
    t('automatic payment from your account'),
    t('automatic transfer into your account initiated'),
    t('transfer into your account completed'),
    t('payment received'),
    t('inflation adjustment received'),
    t('other incentive reward received'),
    t('fine, grant, loan, or investment received'),
    t('transaction/invoice edited, canceled, or disputed'),
//    t('unpaid invoice notice'),
    t('your invitee needs a nudge'),
    t('suggestion from the system'),
  ];

  $whens = ray($notifyWhens);
  $alwaysNow = [
    t('invoice received'),
    t('password reset request'),
    t('request to join with another account'),
    t('invitation/trust confirmation request'),
    t('remember to finish setting up your account'),
    t('account approval'),
    t('unusual activity'),
    t('you connected a bank account'),
  ];
  
  $textColW = 12 - count($whens); // width of event text
  $defaults = $mya->notices ?: N_DEFAULTS;
  
  list ($whenI, $cols) = [0, ''];
  foreach ($whens as $k => $v) {
    $cols .= "<div class=\"col-xs-1\"><div class=\"vertical\">$v</div></div>";
    $whenI++;
  }  
  $table = <<<EOF
<div class="row header"><div class="col-xs-$textColW"></div>$cols</div>
EOF;
  
  for ($eventI = 0; $eventI < count($events); $eventI++) {
    $event = $events[$eventI];
    list ($whenI, $cols) = [0, ''];
    foreach ($whens as $k => $v) {
      $checked = $defaults[$eventI] == $k ? 'checked="checked"' : '';
      $input = <<<EOF
<input type="radio" id="edit-e$eventI-$k" name="e$eventI" value="$whenI" class="form-radio" $checked />
EOF;
      $cols .= "<div class=\"col-xs-1\">$input</div>";
      $whenI++;
    }
    $parity = $eventI % 2 ? 'even' : 'odd';
    $table .= <<<EOF
<div class="row $parity"><div class="col-xs-$textColW">$event</div>$cols</div>
EOF;
  }
  $table = item($table);
  
/*
    t('message from another member'),
    t('%PROJECT community newsletter'),
*/
  $methods = ray($notifyNowBys);
//  $method = radiosFld(t('Immediate by:'), t('Receive immediate messages by text, email, or both?'), 1, $methods);
  return labeled(compact(ray('title subtext table')));
}

/**
 * Print a sheet of coupons for the current account.
 */
function printCoupons($args = '') {
  global $mya;
  require_once __DIR__ . '/../pdf.class';
  
  if (!u\test())
  $args = u\deurlify($args);

  extract(just('type amount count automatic start end on', $args));
  
  if (!$gift = (@$type == 'gift') and @$type != 'discount') return w\hack('bad coupon args');
  $auto = @$automatic ? t('automatically') : '';
  $amount =  u\fmtAmt($amount, $amount < 1 ? '%s' : 's$');
  u\setDft($count, 1);

  if (@$start == strtotime('today')) $start = '';
  if (@$end) {
    $end = u\fmtDate(@$end, TRUE);
    $dates = @$start ? u\fmtDate($start, TRUE) . t(' through ') . $end : (t('expires ') . $end);
  } else {
    $dates = @$start ? t('beginning ') . u\fmtDate($start, TRUE) : '';
    $dates .= t(' (offer does not expire)');
  }
  
  $pdf = new r\Pdf();
//  $pdf->addTTFfont(__DIR__ . '/../../tcpdf/fonts/verdana.ttf'); // do just once on DEV, then upload font
  $pdf->setPrintHeader(FALSE);
  $pdf->setPrintFooter(FALSE);
  $pdf->SetAutoPageBreak(FALSE);

  $name = $mya->bestName;
  $coup = t('%PROJECT %type Coupon', 'type', $gift ? t('GIFT') : t('Discount'));
//  $iCode = $mya->iCardCode(IBY_EMAIL);
  
  list ($mT, $mR, $mB, $mL) = [0, 0, 0, 0]; // margins
  list ($hLogo, $dySite, $ptSite, $sSite) = [.9, 2.3, 14, 'semi-expanded'];
  list ($dxHeart, $dyHeart, $hHeart) = [2.5, 1.6, .4];
  list ($y0, $dy, $ptDetails, $ptCode) = [.2, .23, 12.5, 13];
  $dyDetails = $y0 + 1.15;
  list ($x0, $wLogo, $wHeart) = [$y0, $hLogo, 1.9*$hHeart]; // left card margin, logo widths
  list ($wCard, $hCard, $tx0) = [4.25, 2.75, $x0+.04]; // card dimensions, text indent
  $wCoup = $wCard-$wLogo-$x0;
  list ($sSlogan, $sOff) = ['normal', 'normal'];
  list ($dxCoup, $dyCoup, $ptCoup, $dyGoodFor) = [$x0+$wLogo+.08, $y0+.07, 12.5, .95];
  list ($dxOff, $dyOff, $ptOff, $dyAt) = [$dxCoup-.02, $y0+.29, 24, $y0+.7];
  list ($dxLine, $dyLine) = [$x0, 1.25];
  list ($goodFor) = [t('This card good for')];
  list ($wPage, $hPage) = [8.5, 11]; // page dimensions
  $gLen = .1; // cutting guide length from card corner (for pluses in each corner of each card)
  $gStyle = ['color' => [192,192,192]];
  $wCode = $wCard; // code is centered on card
  $slogan = t('the payment card for community power');
  
  $sAt = 'normal';
  if (strlen($name) > 20) $sAt = strlen($name) > 29 ? 'condensed' : 'semi-condensed';

  $pdf->AddPage();
  
  $y = $mT; $x = $mL;
  // cutting guides (for redesign)
  if (FALSE) foreach ([0, $hCard] as $dyL) foreach ([0, $wCard] as $dxL) { // for each corner
    $pdf->Line($x+$dxL-$gLen, $y+$dyL, $x+$dxL+$gLen, $y+$dyL, $gStyle); // horizontal
    $pdf->Line($x+$dxL, $y+$dyL-$gLen, $x+$dxL, $y+$dyL+$gLen, $gStyle); // vertical
  }

  $cardi = 0;
  while ($cardi < $count) {
    for ($y = $mT; $y < $hPage - $mB; $y += $hCard) for ($x = $mL; $x < $wPage - $mR; $x += $wCard) { // each card
  //  { // uncomment this line and comment out the preceding one, to test the format of just one card (much faster)
      $pdf->Image(__DIR__ . '/../images/' . PROJECT_LOGO, $x+$x0, $y+$y0, $hLogo, $hLogo, '', '', '', true); // file, x, y, w, h, type, link, align, resize
      $pdf->say($coup, $x+$dxCoup, $y+$dyCoup, $wCoup, '', "$ptCoup;color: #404040", 'L');
      $pdf->say($amount . t(' OFF'), $x+$dxCoup, $y+$dyOff, $wCoup, '', "$ptOff;B;color:darkred;font-stretch:$sOff", 'L');
      $sSite = 'normal'; // looks better
      $pdf->say(t('Join us! at ') . '<span style="font-weight:bold; color:darkgreen; font-size:120%">' . CG_DOMAIN . '</span>', $x, $y+$dySite, $wCard, '', "$ptSite;font-stretch:$sSite", 'C');
        $pdf->Line($x+$dxLine, $y+$dyLine, $x+$wCard-$dxLine, $y+$dyLine, $gStyle); // x1, y1, x2, y2, style
      
      if ($gift) { // gift coupon
        $pdf->say(t('at any member business', compact('name')), $x+$dxCoup, $y+$dyAt, $wCoup, '', "$ptCoup;font-stretch:semi-expanded;color:darkred", 'L');
        $pdf->say(t('when you pay with <b>%PROJECT</b>') . '<sup style="font-size:50%;">&trade;</sup>', $x, $y+$dyDetails, $wCard, '', $ptDetails, 'C'); // text, x, y, w, h, format, align, borders
        $pdf->say($slogan, $x, $y+$dyDetails+$dy, $wCard, '', "$ptDetails;I;Verdana;font-stretch:normal;color:darkgray", 'C'); // text, x, y, w, h, fmt, align, borders
  //      $pdf->Image(__DIR__ . '/../images/heart+$70.png', $x+$dxHeart, $y+$dyHeart, $wHeart, $hHeart, '', '', '', true); // file, x, y, w, h, type, link, align, resize

        $iCode = $mya->iCardCode($mya->giftCoupons + $cardi);
        $iCode = substr($iCode, 0, 4) . ' &nbsp;' . substr($iCode, 4, 4) . ' &nbsp;' . substr($iCode, 8);
        $pdf->say(t('Redeem at Community/Coupons: <b>%iCode</b>', '_iCode', $iCode), $x, $y+$dyDetails+$dy*2.5, $wCard, '', "$ptDetails;Verdana;font-stretch:semi-condensed;color:#404040", 'C'); // text, x, y, w, h, fmt, align, borders

        $cardi++; // how many cards have been completed
        if ($cardi >= @$count) {$y = 999; break;} elseif ($cardi % 8 == 0) $pdf->AddPage();
      } else { // discount coupon
        $pdf->say($auto, $x+$wLogo, $y+$dyOff+.14, $wCoup-.5, '', '9;color:darkgray', 'R'); // .24 for baseline
        $pdf->say(t('at <b>%name</b>', compact('name')), $x+$dxCoup, $y+$dyAt, $wCoup, '', "$ptCoup;font-stretch:semi-condensed;color:black", 'L');
        $pdf->say(t('on ') . $on, $x, $y+$dyDetails, $wCard, '', $ptDetails, 'C'); // text, x, y, w, h, format, align, borders
        $pdf->say(t('when you pay with <b>%PROJECT</b>'), $x, $y+$dyDetails+$dy, $wCard, '', $ptDetails, 'C'); // text, x, y, w, h, format, align, borders
        $pdf->say($slogan, $x, $y+$dyDetails+$dy*2, $wCard, '', "$ptDetails;I;Verdana;font-stretch:normal;color:darkgray", 'C'); // text, x, y, w, h, fmt, align, borders
        $pdf->say($dates, $x, $y+$dyDetails+$dy*3, $wCard, '', "10;color:darkgray", 'C'); // text, x, y, w, h, format, align, borders
      }
    }
  }

  if ($gift) $mya->update('giftCoupons', $mya->giftCoupons + $count);

  if (!u\test())
  $pdf->output('cgCoupons.pdf', 'I'); //Close and output PDF document
}


/**
 * Print a sheet of invitation cards for the member or members.
 * @param array $accts: the accounts for which to print invitation cards (defaults to current account)
 */
function printInvite($accts = '') {
  require_once __DIR__ . '/../pdf.class';
  $pdf = new r\Pdf();
//  $pdf->addTTFfont(__DIR__ . '/../../tcpdf/fonts/verdana.ttf'); // do just once on DEV, then upload font
  $pdf->setPrintHeader(FALSE);
  $pdf->setPrintFooter(FALSE);
  $pdf->SetAutoPageBreak(FALSE);

  if (is_array($accts)) {
    foreach ($accts as $a) printInvite1($a, $pdf);
  } else printInvite1($a = $accts ?: r\acct(), $pdf); // default to current account
  if ($accts) w\say($pdf->pageNo() . t(' invitation cards have been downloaded to the %PROJECT temp directory.'));
  $pdf->output(DRUPAL_ROOT . R_PATH . '/temp/' . str_replace(' ', '', PROJECT) . '-Invitation-Cards.pdf', $accts ? 'F' : 'I'); //Close and output PDF document
}

/**
 * Print a sheet of invitation cards for one member company.
 * @param acct $a: the account for which to print invitation cards
 * @param object $pdf: the pdf object in process
 */
function printInvite1($a, &$pdf) {
  $forCG = ($a->id == r\cgfId() and $a->superAdmin);
  require_once __DIR__ . '/../pdf.class';
  $slogans = ray(SLOGANS);
  $cardi = 0;

  $co = ($a->co and !$forCG); // pocket-size for individuals and CGF, otherwise bigger for companies
  $name = $a->bestName;
  $invite = $forCG ? t('You are invited to:') : t('%name invites you to:', compact('name'));
//  $iCode = $a->iCardCode(IBY_EMAIL);
  
  list ($mT, $mR, $mB, $mL) = $co ? [0, 0, 0, 0] : [.5, .75, .5, .75]; // margins
  list ($y0, $dy, $wInvite, $dyCode, $wCodeOLD, $ptCode) = $co ? [.2, .23, 3.75, 1.35, 1.9, 13] : [.125, .19, 3, .95, 1.5, 12];
  list ($hLogo, $dySite, $ptSite, $sSite) = $co ? [.9, 2.3, 14, 'semi-expanded'] : [.66, 1.66, 11, 'normal'];
  list ($dxHeart, $dyHeart, $hHeart) = $co ? [2.5, 1.6, .4] : [2.05, 1.15, .3];
  list ($x0, $wLogo, $wHeart) = [$y0, $hLogo, 1.9*$hHeart];
  list ($sSite, $sSlogan, $sProject) = $co ? ['semi-expanded', 'normal', 'normal'] : ['expanded', 'semi-expanded', 'semi-expanded'];
  list ($sloganMax, $sSloganTight) = $co ? [18, 'semi-condensed'] : [20, 'normal'];
  list ($dxInvite, $dyInvite, $ptInvite, $dyLine, $dxLine, $dyGoodFor) = $co ? [$x0+$wLogo+.07, .07, 11.5, .84, .25, .95] : [$x0+$wLogo+.07, 0, 9, .69, .125, .74]; // Line UNUSED
  list ($dxProject, $dyProject, $ptProject, $dySlogan) = $co ? [$dxInvite-.02, .27, 24, .7] : [$dxInvite-.02, .15, 20, .52];
  list ($wCard, $hCard, $tx0) = $co ? [4.25, 2.75, $x0+.04] : [3.5, 2, $x0+.02]; // card dimensions, text indent
  list ($goodFor) = $co ? [t('This card good for')] : [t('Get')];
  list ($wPage, $hPage) = [8.5, 11]; // page dimensions
  $gLen = .1; // cutting guide length from card corner (for pluses in each corner of each card)
  $gStyle = ['color' => [192,192,192]];
  $wCode = $wCard; // code is centered on card

  $sInvite = 'normal';
  if (strlen($name) > 20) $sInvite = strlen($name) > 29 ? 'condensed' : 'semi-condensed';
//  $invite = str_replace(t(' to:'), ':', $invite);
  $pdf->AddPage();
  
  $y = $mT; $x = $mL;
  // cutting guides (for redesign)
  if (FALSE) foreach ([0, $hCard] as $dyL) foreach ([0, $wCard] as $dxL) { // for each corner
    $pdf->Line($x+$dxL-$gLen, $y+$dyL, $x+$dxL+$gLen, $y+$dyL, $gStyle); // horizontal
    $pdf->Line($x+$dxL, $y+$dyL-$gLen, $x+$dxL, $y+$dyL+$gLen, $gStyle); // vertical
  }

  for ($y = $mT; $y < $hPage - $mB; $y += $hCard) for ($x = $mL; $x < $wPage - $mR; $x += $wCard) { // each card
//  { // uncomment this line and comment out the preceding one, to test the format of just one card (much faster)
    $pdf->Image(__DIR__ . '/../images/' . PROJECT_LOGO, $x+$x0, $y+$y0, $hLogo, $hLogo, '', '', '', true); // file, x, y, w, h, type, link, align, resize
    $pdf->say($invite, $x+$dxInvite, $y+$y0+$dyInvite, $wInvite, '', "$ptInvite;font-stretch:$sInvite", 'L');
    $pdf->say(PROJECT . '<sup style="font-size:50%;">&trade;</sup>', $x+$dxProject, $y+$y0+$dyProject, $wInvite, '', "$ptProject;B;color:darkblue;font-stretch:$sProject", 'L');
    $scardi = strlen($slogans[$cardi]) > $sloganMax ? $sSloganTight : $sSlogan;
    $pdf->say(t('the payment card ' . $slogans[$cardi]), $x+$dxInvite, $y+$y0+$dySlogan, $wInvite, '', "$ptInvite;font-stretch:$scardi;color:darkgray", 'L');
//    $pdf->Line($x+$dxLine, $y+$dyLine, $x+$wCard-$dxLine, $y+$dyLine, $gStyle); // x1, y1, x2, y2, style

    $pdf->say('Invitation #', $x+$tx0, $y+$y0+$dyCode, $wCode, '', $ptCode, 'C'); // text, x, y, w, h, format, align, borders
    $iCode = $a->iCardCode(IBY_ICARD + $cardi);
    $iCode = substr($iCode, 0, 4) . ' &nbsp;' . substr($iCode, 4, 4) . ' &nbsp;' . substr($iCode, 8);
    $pdf->say($iCode, $x+$tx0, $y+$y0+$dyCode+$dy, $wCode, '', $ptCode . ';color:darkred;B;Verdana;font-stretch:normal', 'C'); // text, x, y, w, h, fmt, align, borders
//    $pdf->Image(__DIR__ . '/../images/heart+$70.png', $x+$dxHeart, $y+$dyHeart, $wHeart, $hHeart, '', '', '', true); // file, x, y, w, h, type, link, align, resize

    $sSite = 'normal'; // looks better
    $pdf->say('Join us at <span style="font-weight:bold; color:darkgreen; font-size:120%">' . CG_DOMAIN . '</span>', $x, $y+$dySite, $wCard, '', "$ptSite;font-stretch:$sSite", 'C');
    $cardi++;
  }
}

/**
 * Sections with submenus.
 */
function formCommunity($form, &$sta) {return w\subMenu(t('Community'), 'community');}
function formHistory($form, &$sta) {return w\subMenu(t('Account History'), 'history');}
function formSettings($form, &$sta) {return w\subMenu(t('Settings'), 'settings');}

/**
 * List the months for which notices are available for the current account, with links.
 */
function formNotices($form, $sta, $month = '') {
  return $month ? notice($month) : monthChoices(t('Notices'), 'notices', '', 0, '');
}

/**
 * List notices for a given month.
 * @param string $month: mmmyyyy
 */
function notice($month = '') {
  if (!$start = strtotime("1$month")) return r\go('empty', t('That is not a recognizable month.' . $month), 'ERR');
  $start = u\monthDay1($start);
  $end = strtotime('+1 month', $start) - 1;

  global $mya;
  if ($noticeArgs = r\noticeArgs($mya->id, "created BETWEEN $start AND $end", FALSE, TRUE)) {
    extract(just('messages', $noticeArgs));
  } else $messages = '';
  $title = item(t('Notices for ') . strftime('%B %Y', $start));
  $list = item("<table>$messages</table>");
  return compact('title', 'list');
}

/**
 * Generate an account statement for the given month or year.
 * @param string $month: mmmyyyy or CYyyyy (calendar year) or FYyyyy (fiscal year)
 */
function statement($month = '') {
  include_once __DIR__ . '/../rcredits-txs.inc';
  $purposeLenMax = 60; // maximum number of characters in purpose field, not including added "..."

  if (!$mya = r\acct()) return r\go('', t('You must first sign in.'), 'ERR');

  $type = substr($month, 0, 2); // CY, FY, Q<n>, or other

  if (is_numeric($year = substr($month, 2))) {  
    if (substr($type, 0, 1) == 'Q') {
      list ($endMo, $endDay) = [3 * substr($type, 1), in_array($type, ['Q1', 'Q4']) ? 31 : 30];
      $lastDay = "$endMo/$endDay/$year";
    } else $lastDay = $type == 'CY' ? "12/31/$year" : "$mya->fyEnd/$year";
    $end = strtotime($lastDay) + DAY_SECS - 1; // fails if FY ends on clock change day
    list ($start, $period) = [u\plusMonths(-12, $end + 1), "$type $year"];
  } else {
    if (!$start = strtotime("1$month")) return r\go('empty', t('That is not a recognizable month.'), 'ERR');
    $start = u\monthDay1($start);
    list ($end, $period) = [u\plusMonths(1, $start) - 1, strftime('%B %Y', $start)];
  }
  
  include_once __DIR__ . '/../statement.class';
  
  $pdf = new r\Statement($mya, $period);

  $size = $pdf->getFontSizePt();
  $m = 5; // left/right margin size
  $pdf->SetMargins($m, PDF_MARGIN_TOP, $m);
  $pdf->SetAutoPageBreak(TRUE, 15); // leave space at bottom
  $pdf->setLanguageArray([]); // (eg "page" in footer)
  $pdf->AddPage();
  $pageWidth = $pdf->getPageWidth();

/*  $pdf->SetLineStyle(array('width' => 0.5, 'cap' => 'butt', 'join' => 'miter', 'dash' => 0, 'color' => array(0, 0, 0)));
  $pdf->RoundedRect(91, 30, 60, 60, 3.50, '1111', 'DF', NULL, array(255, 255, 255)); // x, y, w, h, ?, fill?
  */
  //$pdf->Cell(0, 0, 'Page ', 0, false, 'L', 0, '', 0, false, 'T', 'M');
  //$pdf->writeHTMLCell(40, 10, 160, 84.5, '<div style="font-size:44px;">CommonGood.earth</div>');
  list ($address, $city, $state, $zip) = u\parseAddr($mya->postalAddr);
  $pdf->setX($m + 10);
  $pdf->Cell(0, 0, $mya->j_fullName, '', 2);
  $pdf->Cell(0, 0, $address, '', 2);
  $pdf->Cell(0, 0, "$city, $state $zip", '', 2);
  
  //$pdf->Line($m, $y = $pdf->getY(), $pageWidth - $m, $y);
  
  $pdf->setX($m);
  $pdf->setY($pdf->getY() + 10);

  list ($header, $classes, $rows, $tot) = x\getTxRows($start, $end); // get the transaction data
  extract(just('frombank fromyou toyou reward roundups', $tot));
//  list ($fromyou, $toyou) = $amount < 0 ? [-$amount, 0] : [0, $amount];
  $info = be\creditInfo(ray('asof', $end));

  $info0 = be\creditInfo(ray('asof', $start - 1));
  $bal0 = $info0->balance - $info0->partRounds; // balance BEFORE start of this period
  list ($savings0, $savings9) = [$info0->savings, $info->savings];
  $dSavings = round($savings9 - $reward - $savings0, 2);
  list ($toSavings, $fromSavings) = u\order($dSavings >= 0, abs($dSavings), 0);
  // $fromyou += $toSavings;
  // $toyou += $fromSavings;
  $balTitle = t('Balance:');
  $savingsTitle = t('Credit line:');

  list ($bal9, $rewardsEver) = array($info->balance - $info->partRounds, $info->rewards);
//  u\EXPECT($bal9 == round($bal0 + @$frombank - @$fromyou + @$toyou + @$reward, 2), 'balance mismatch');
///**/    if (round($bal9, 2) != round($bal0 + @$frombank - @$fromyou + @$toyou, 2)) return r\go('empty', 'balance mismatch: ' . print_r(compact('tot', 'bal0', 'bal9'), 1));
  
  $pdf->barHead('SUMMARY');
  if ($mya->cttyRewardy) {
    list ($w, $rew1, $fromRew, $rew2, $rew34) = [8, ' /plus/8/R/; Rewards**//23/R;', ' /plus/8/R/; /reward/23/R;', 'fromSavings', ' //8; //23;'];
  } else {
//    $rew1 = $rew2 = $rew34 = '';
    list ($w, $rew1, $fromRew, $rew2, $rew34) = [15, '', '', '', ''];
    $toSavings = $savings9 - $savings0;
  }
  $fields[1] = explode('; ', "/balTitle/15/; Starting/bal0/28/R; /plus/$w/R; From Bank/frombank/23/R; /minus/$w/C; Paid*/fromyou/23/R; /plus/$w/R; Received/toyou/23/R;$rew1 /equals/$w/R; Ending/bal9/28/R");
  $pdf->colHeads($fields[1]);
//  $fields[2] = explode('; ', "/savingsTitle/15/; /savings0/28/R; //$w/R; //23/R; /minus/$w/C; /$fromRew/23/R; /plus/$w/R; /toSavings/23/R;$rew2 //$w/R; /savings9/28/R");
//  $fields[3] = explode('; ', "//15; /underline0/28/R; //$w; //23; //$w; //23; //$w; //23;$rew34 //$w; /underline9/28/R");
//  $fields[4] = explode('; ', "//15; /total0/28/R; //$w; //23; //$w; //23; //$w; //23;$rew34 //$w; /total9/28/R");
  
  list ($plus, $minus, $equals, $space) = array('+', '-', '=', ' ');
  list ($total0, $underline9, $total9) = [$bal0 + $savings0, str_repeat('-', 17), $bal9 + $savings9];
  $underline0 = $underline9;
  $committed = $mya->committed;
  list ($avg) = r\averageBalance($mya->id, $mya->created, $end, TRUE);
  if ($jid = $mya->jid and $j = r\acct($jid)) {
    list ($avg2) = r\averageBalance($j->id, $j->created, $end, TRUE);
    $avg += $avg2;
  }
  
  $yield = number_format($avg ? round(100 * $rewardsEver / $avg) : 0, 1) . '%';
  $numFields = ray('total0 bal0 amount frombank fromyou toyou reward bal9 rewardsEver committed savings0 savings9 fromSavings toSavings total9');
  foreach ($numFields as $one) $$one = number_format(@$$one ?: 0, 2); // ?: is needed because $$one might be null or ''
//  u\prefix('+ ', $savings0);
//  u\prefix('+ ', $savings9);
  
  $pdf->setFontSize(.9 * $size);
  for ($i = 1; $i <= 1; $i++) foreach ($fields[$i] as $one) {
    list ($head, $fldName, $width, $align) = explode('/', "$one/");
    foreach (ray('fromyou fromSavings reward', 1, 1, 3) as $k => $v) if ($fldName == $k) $$k .= str_repeat(' ', $v); // footnote alignment
    $pdf->Cell($width, 0, @$fldName ? @$$fldName : '', '', @$fldName[strlen(@$fldName) - 1] == '9' ? 1 : 0, $align);
  }
  
  $pdf->newLine();
  list ($labelWidth, $numWidth) = array(45, 25);
  if ($mya->cttyRewardy) $pdf->Cell($labelWidth, 0, "Incentive Rewards Ever: $rewardsEver", '', 1);
//  $pdf->Cell($numWidth, 0, $rewardsEver, '', 0, 'R');
//  $pdf->Cell(0, 0, " (Effective yield $yield APR)", '', 1, 'L');

  if ($mya->id == CGF_ID) {
//    $shared = db\lookup('SUM(amount)', 'r_txs', "payee=:CGF_ID AND payeeFor=':R_SHARING_MSG' AND created<=:end", compact('end'));
//    $pdf->Cell($labelWidth, 0, 'Sharing Donations Ever:');  
//    $pdf->Cell($numWidth, 0, number_format($shared, 2), '', 1, 'R');
  } elseif ($start == u\monthDay1()) { // committed amount is not available retroactively
    //$pdf->Cell($labelWidth, 0, 'Reserved to donate to CGF:');  
    //$pdf->Cell($numWidth, 0, $committed, '', 1, 'R');
  }
  $pdf->setFontSize(.8 * $size);
  $pdf->newLine();
  $change = '$' . number_format(@$roundups + 0, 2);
  $pdf->Cell($pageWidth, 0, "  * Including $change in rounded-up change donated to the community fund.", '', 1, 'L');
  if ($mya->cttyRewardy) $pdf->Cell($pageWidth, 0, t('** Rewards are yours to keep once your %PROJECT community says so. In the meantime you can borrow them interest-free.'), '', 1, 'L');
  
  $pdf->newLine();

  $pdf->setFontSize($size);
  $pdf->barHead('DETAILS');
  list ($rew, $lastHead, $purposeW) = $mya->cttyRewardy ? [' Reward//22/R', 'Reward', 70] : ['', 'Amount', 90];
  $fields = ray("Tx#/tid/15/C /space/1/ Date//17/ Name//55/ /space/1/ Purpose//$purposeW/ /space/1/ Amount//20/R$rew");
  $pdf->colHeads($fields);
  $pdf->setFontSize(.9 * $size);
  $none = strip_tags(R_NONE);
  foreach ($rows as $row) {
    foreach ($row as $k => $v) $row[$k] = str_replace(',', '', strip_tags($v));
    extract(just('tid date name amount purpose reward', array_combine($classes, $row)));
//    foreach (['amount', 'reward'] as $k) if ($$k == R_NONE) $$k = '0.00';
//    list ($fromyou, $toyou) = $amount < 0 ? [-$amount, 0] : [0, $amount]; // just for totals and CGF sharing income
//    $amount = number_format($amount, 2);
    $date = strftime('%b %d', strtotime($date)); // reformat for single month
    if (strlen($purpose) > $purposeLenMax + 3) $purpose = substr($purpose, 0, $purposeLenMax) . '...';
//    $extra = number_format($reward, 2);
    foreach ($fields as $one) {
      list ($head, $fldName, $width, $align) = explode('/', $one);
      if (!$fldName) $fldName = strtolower($head);
      $debit = ($align == 'R' and is_numeric($n = str_replace(',', '', $$fldName)) and $n < 0);
      if ($debit) $pdf->SetTextColor(128, 0, 0); else $pdf->SetTextColor();
      if (in_array($fldName, $numFields) and $$fldName != $none) $$fldName = number_format($$fldName, 2);
      $pdf->Cell($width, 0, $$fldName, '', $head == $lastHead ? 1 : 0, $align, '', '', 1);
    }
    foreach (['amount', 'reward'] as $k) $$k = $$k == R_NONE ? 0 : (str_replace(',', '', $$k) + 0); // convert from string
    if ($mya->id == CGF_ID and $purpose == R_SHARING_MSG) list ($amount, $reward) = [$reward, $amount];
    if ($reward and $mya->cttyRewardy) {
      $catDesc = r\usdin($purpose) 
      ? t('exchange fees') // this is not a reward and should be moved out of this block
      : (u\starts($purpose, INFLATION_DESC)
        ? (INFLATION_DESC . t(' rewards')) // can't put reward in parens because then addCat strips it off
        : t('other rewards'));
      x\addCat($cats, $catDesc, $reward, $zot);
    }
    if ($amount) x\addCat($cats, $purpose, $amount, $dups);
  }
  
  if (!$rows) {
    $pdf->newLine();
    $pdf->Cell($pageWidth, 0, t('There are no transactions this month.'), '', 1 , 'L');
  }
//  $pdf->Cell($pageWidth, 0, t('* The Extras column includes incentive rewards and any fees paid or received.'), '', 1 , 'L');
  
  if (@$dups) { // don't show categorization unless it's worthwhile
    $pdf->setFontSize($size);
    $pdf->newLine();
    $pdf->barHead('CATEGORY TOTALS');
    $fields = ray('Category/cat/75/ Total/total/25/R Count/count/17/R');
    $pdf->colHeads($fields);
    $pdf->setFontSize(.9 * $size);

    x\finishCats($cats);
    
    foreach ($cats as $cat => $ray) {
      list ($count, $amount) = $ray;
      $total = number_format($amount, 2);
      foreach ($fields as $one) {
        list ($head, $fldName, $width, $align) = explode('/', $one);
        $pdf->Cell($width, 0, $$fldName, '', $head == 'Count' ? 1 : 0, $align, '', '', 1);
      }
    }
  }
  
  $pdf->finish(str_replace(' ', '', PROJECT) . '-' . strftime('%Y-%m', $start) . '.pdf'); //Close and output PDF document
}

/*
  Give the person a chance to donate to CG from the current account.
  If they haven't chosen a recurring donation yet, a recurring donation is the only option
*/
function formDonate($form, &$sta) {
  global $mya;
  $donated = @$mya->stepsDone['donate'] ? t('<p>You have already made a donation. Thank you! Please feel free to donate again.</p>') : '';
  //  Whatever "share" percentage you choose this time will replace your previous choice') . " ($mya->share%).
  $giftLevels = array(
  // 10000 => t('Marble .. $10,000'),
  // 5000 => t('Granite ... 5,000'),
    2500 => t('Slate .... $2,500'),
    1000 => t('Glass .... $1,000'),
     500 => t('Iron ....... $500'),
     250 => t('Oak ........ $250'),
     100 => t('Two Bricks . $100'),
      50 => t('One Brick ... $50'),
      25 => t('Half Brick .. $25'),
//       0 => t('None for now . $0'),
      -1 => t('Water ... (other)'),
//      10 => t('Tile ........ $10'),
//       5 => t('Cloth ........ $5'),
  );
  $oftens = [0 => t('when?')] + ray(OFTENS);
  if (!$mya->ok or !db\exists('r_gifts', "uid=:id AND often<>'1'", ['id' => $mya->id])) unset($oftens['1']);
  $honors = array('-' => '(optional)', 'honor' => 'in honor of', 'memory' => 'in memory of', 'other' => 'other');
//  $giftAttrib = w\onchange(str_replace('show()', "show(); jQuery('#edit-amount').focus()", R_GIFT_SHOWHIDE));
   
//  $inSetup = $mya->ok ? '' : t(' The amount you choose will come from your account once it is activated and has enough funds.</p><p>Also choose a percentage of your ongoing incentive rewards to share with Common Good Finance.');
  $title = item(t('Donate to %PROJECT'));
  $amountTip = $mya->co ? '' : t('The most common amounts chosen are $50 and $25.');
  $subtext = item($donated . t('<p>(optional) Make a tax-deductible gift of any size: monthly, quarterly, or yearly.</p></p><p>Half of your gift supports whatever projects you decide on together in your community; half supports the operation of the %PROJECT system (to donate zero, choose "Water"). %amountTip</p><p><b class="loud">NOTE: This is a donation, not a deposit.</b> Thank you for your support!</p>', compact('amountTip')));
  $gift = selectFld(t('Donation:'), '', required($mya->co ? R_COMPANY_GIFT : R_INDIVIDUAL_GIFT), $giftLevels);
  $amount = textFld(t('Other amount $'), '');
  $often = selectFld(t('When:'), '', required(), $oftens);
  $honor = selectFld(t('Honoring:'), '', '', $honors);
  $honored = areaFld('', [t('Honoring whom or what')]);
//    $share = $mya->ok ? '' : w\shareFld($mya),
//    $roundup = $mya->ok ? '' : w\roundupFld($mya),
//  if (!$mya->ok) $wait = submit(t('Ask me in a few weeks'), 'info', 'xs');

  jsx('gift');
  return labeled(compact(ray('title subtext gift amount often honor honored')) + w\setupFoot(t('Donate')) + compact('wait'));
}

function formDonate_validate($form, &$sta) {
  global $mya;

  if (op($sta) == 'wait') return;
  
  extract(just('gift amount share often', $sta['input']));
//  $amount = $gift ?: $amount;
  if ($gift != -1) $amount = $gift;
//  if (!$amount) return say('missing field', array('field' => 'amount'), 'amount');
  if ($amount and !$often) return say('missing field', array('field' => 'when'), 'often');
  if ($err = u\badAmount($amount, '>=0')) return say($err, 'amount');
//  if (!$mya->ok and $err = w\badShare($share)) return say($err, 'share');
//  $share = min($share, 999.999); // any bigger kills PDO
  $sta['input'] = compact(ray('amount share')) + $sta['input'];
}

function formDonate_submit($form, &$sta) {
  global $mya;
  $info = just('amount often honor honored share roundup', $sta['input']);
  if ($info['amount'] > 0 and op($sta) != 'wait') {
    if ($info['honor'] == '-') $info['honor'] = 'honor';
    if (!$info['honored']) $info['honor'] = '';
    u\setDft($info['often'], '1');
    $uid = $mya->id;
    $giftDate = r\rTime();
    $info += compact('uid', 'giftDate');
    $donid = db\insert('r_gifts', $info);
  //  if (!$mya->ok) $mya->update(just('share', $info));
  //  if ($mya->ok) $mya->setbit(B_ROUNDUP, $roundup);

    $msg = 'gift successful';
    if (!r\acceptGift($info + compact('donid'))) $msg .= '|gift transfer later';
    $amount = u\fmtAmt($info['amount']);
    say($msg, compact('amount'));
  }
  if ($mya->ok) r\tellAdmin('gift', $info);

  return w\goNextStep('donate', '');
}

/**
 * Show general or specific help. For members seeking general help, provide a secure communications channel.
 */
function formHelp($form, &$sta, $what = '', $args = '') {
  include_once __DIR__ . '/rweb-help.inc';

  $signedIn = ($mya = r\acct()) ? TRUE : FALSE; // no need to use eLinkAcct here, just pass args on to help()
  if ($signedIn and $mya->cAdmin and $what and strpos($what2 = @u\deurlify($what), '&')) {
    extract(just('filename type', $what2));
    $s = file_get_contents($filename);
    list ($zot, $type) = explode('/', "$type/");
    $ext = $type ?: 'bin';
    u\beginDownload("from $mya->id.$ext");
/**/ echo $s;
    exit();
  }
  
  list ($what, $tag) = (strpos($what, '@')) ? explode('@', $what) : array($what == 'other' ? '' : $what, '');
  $title = item($what ? ucwords(str_replace('-', ' ', $what)) : t('General Help'));
  $stranger = t('Interested in %PROJECT? Visit <%a>%CG_DOMAIN</a> for more information or to request an invitation to participate.', '_a', w\atag(PROMO_URL));
  $text = w\item(($signedIn or $what)? helpText($what ?: 'general', $tag, $args) : $stranger);
  if ($signedIn and !$what) {
    
    $message = areaFld(t('Send a message to a %PROJECT Administrator:'), '', required());
    $file = fileFld(t('Secure Attachment:'), t('(optionally) attach a file to your message. The file will be encrypted.'));
    $submit = submit(t('Send'));
  }

  if (is_array($args)) $data = $args; // include returned data, if any
  return labeled(compact(ray('title text message file data submit')));
}

function formHelp_validate($form, &$sta) {
  if ($err = $_FILES['files']['error']['file'] and $err != 4) return say('file save error', 'file');
}

function formHelp_submit($form, &$sta) {
  global $mya; 
  $uid = $mya->id;
  $who = "$mya->fullName ($mya->mainQid)";
  extract(just('message file', $sta['input']));
  $time = r\rTime();
  $msg = 'msg to admin';

  foreach ($_FILES['files'] as $k => $v) $file[$k] = $v['file'];
  if ($tmp = $file['tmp_name']) { // got an attachment
    $msg .= '|secure attach';
    $filename = UPLOAD_DIR . "/$mya->id-$time";
    extract(just('name type size', $file));
    $link = '/help/' . u\urlify("type=$type&filename=$filename");
    $_aAttach = w\atag($link);
    if (!rename($tmp, $filename)) return say('file save error', 'file');
  }  
//  $message = u\crypt($message);
//  db\insert('r_tous', compact('uid', 'time', 'message'));
  $subs = compact(ray('who aAttach name type size'));
  r\tellAdmin("$msg|$message", $subs, @$aAttach ? $uid : NULL); // tell CO only if there is no attachment
  say(t('Your message has been sent. An administrator will respond as soon as possible.'));
}

/**
 * Give member a chance to sign the rCredits Agreement. (agreement revised 4/17/2014)
 */
function formAgreement($form, &$sta) {
  global $mya;
  $title = item(t('%PROJECT Agreement'));
  $name = 'checkNUMBER';
//  $id = "edit-$name";
//  $check = boxFld('checkNUMBER', '', '', attrib(compact('id')));
  $model = @\render(boxFld('checkNUMBER'));
  $_instructions = '';

  if (!$mya) {
    // nothing to be done if signed out
  } elseif ($date = $mya->signed) {
    $instructions = '';
    $date = u\fmtDate($date);
    say('signed agreement', compact('date'));
    $signedBy = item("Signed by <b>$mya->signedBy</b>, $date");
  } elseif (!$mya->co and !$mya->proSe and !$mya->cAdmin) { // can't sign for someone else!
    say('self must sign', 'signedBy');
  } else {
    $signerA = $mya->cAdmin ? ($mya->co ? r\acct($mya->helper) : $mya) : $mya->agentA;
    $behalf = $mya->co ? t('(on behalf of %co) ', 'co', $mya->fullName) : '';
    $signedBy = textFld(t('Signed:'), $behalf . t('Type your full name here ') . "($signerA->legalName)", required($mya->cAdmin ? $signerA->legalNameDpy : ''));
    $setupFoot = w\setupFoot();

    $_addendum = $mya->cAdmin ? t('<p>ADMINISTRATORS need not put checkmarks in the boxes.</p>') : '';
    
    $instructions = t(<<<EOF
      <div id="instructions" class="well">
      <p><b>Instructions:</b> Put a check mark in each checkbox to indicate you have read and understand that section. If there are no participating businesses near you, some of this Agreement will not apply to you &mdash; <b class="loud">YET!</b> But when enough people have joined, you will be able to start a %PROJECT Community together quickly, to enjoy the benefits of economic democracy.</p>
      <p><b>Summary.</b> In the first part of the agreement (A), you acknowledge the intent and purpose of the %PROJECT system. In the second part (B), you agree to use the %PROJECT system the way it is designed to work.</p>
      %addendum
      </div>
EOF
    , compact('_addendum'));
  }

  $_personOnly = ($mya and $mya->co) ? '' : t(<<<EOF
  <li>[7] I agree to <%aParticipate>participate</a> in managing the Common Good Economy to the best of my ability and as my life circumstances allow.</li>
EOF
  , '_ol1 _aParticipate _aDecision _ol2 _aOther', 
    'ol class="abc"', w\atag('/help/participate'), w\atag('/help/decision-principles'), 'ol class="roman"', w\atag('/help/other-decisions'));

  $prolog = ($mya and $mya->co) ? t('<h4>As a responsible participant in the Common Good Economy:</h4>') : t(<<<EOF
%instructions
<h4>A. I recognize that:</h4>
<ul>
  <li>[-2] %RCREDITS are intended as the basis for the Common Good Economy -- a democratic, community-centered economic system that puts people and planet first.</li>
  <li>[-1]When I pay or accept payment in Common Good Credits, I am building the Common Good Economy.</li>
  <li>[0]When I pay attention, make suggestions for improvement, and participate in decisions with other Common Good members, I am building the Common Good Economy.</li>
</ul>

<h4>B. As a responsible participant in the Common Good Economy:</h4>
EOF
  , ray('_instructions _aIssue', @$instructions, w\atag('/help/issuing-credits')));
  
  $agreement = $prolog . t(<<<EOF
<ol>
  <li>[1] As long as I can spend my %RCREDITS easily or exchange them easily for US Dollars, I will accept them without limit as payment for my goods and services (or labor). I will exchange %RCREDITS for US Dollars only if I cannot spend them easily.</li>
  <li>[2] I will accept %RCREDITS from members of any <%aCGC>Common Good Community</a> in good standing.</li>
  <li>[3] If <%aCrunch>needed</a> I will <%aBack>back</a> %RCREDITS up to my average monthly use over the past six months.</li>
  <li>[4] Whenever I exchange %RCREDITS for US Dollars or vice versa, I will exchange them one for one, and I will price my goods and services (or labor) the same in %RCREDITS and in US Dollars. </li>
  <li>[5] I understand I may receive from the community a credit line that I can spend but cannot <%aCashOut>cash out</a>. If I use my credit line and then stop participating (or if my %PROJECT Community or the entire %PROJECT System <%aGrace>closes down</a>), I will bring my negative balance up to zero as soon as possible.</li>
  <li>[6] When there is a dispute in my dealings with other %PROJECT participants, I will follow the <%aDispute>Dispute Resolution Process</a> and will honor its outcome.</li>
  %personOnly
</ol>
</div>
EOF
  , '_div _aCGC _aCrunch _aBack _aCashOut _aGrace _aEthics _aDispute _personOnly',
  'div id="agreement"', w\atag('/help/common-good-community'), w\atag('/help/cashflow'), w\atag('/help/backing-common-good-credits'), w\atag('/help/cashing-out'), w\atag('/help/closing-down'), w\atag('/help/ethics'), w\atag('/help/dispute-resolution-process'), $_personOnly);

  for ($i = R_AGREE_0; $i <= R_AGREE_9; $i++) {
    $box = str_replace('checkNUMBER', "check$i", $model);
    $agreement = str_replace("[$i]", (!$mya or !$mya->can(B_MANAGE) or @$date) ? '' : $box, $agreement);
  }
  $agreement = fld('item', '', '', $agreement);
  
  return labeled(compact(ray('title agreement signedBy')) + (@$setupFoot ?: []));
}

function formAgreement_validate($form, &$sta) {
  global $mya;
  list ($i0, $i9) = $mya->co ? [1, R_AGREE_9 - 1] : [R_AGREE_0, R_AGREE_9]; // companies omit prolog and democracy question
  if (!$mya->cAdmin) for ($i = $i0; $i <= $i9; $i++) if (!@$sta['input']["check$i"]) return say('incomplete agreement', "check$i");
  if (w\badSignature($sta)) return;
}

function formAgreement_submit($form, &$sta) {
  global $mya;
  $signed = r\rTime();
  extract(just('signedBy', $sta['input']));
  r\acct()->update($info = compact('signed', 'signedBy'));
  return w\goNextStep('sign');
}

/**
 * Choose one proxy.
 * $args:
 *   @param int $priority: 1 for proxy, 2 for alternate
 * uid is not passed, for security.
 */
function formProxy($form, &$sta, $args = '') {
  extract(just('priority', $args));
  if ($priority != 1 and $priority != 2) w\hack('bad proxy priority');
  $mya = w\eLinkAcct($sta, $args);
  $dft = $mya->proxy($priority);
  $dftOther = $mya->proxy(3 - $priority);
  if (!$choices = w\proxyChoices($mya, [$dft, $dftOther], $choiceList)) return r\go("prox/page=Proxies&$args", 'no local proxy');
  if (!$mya->member and count($choiceList) <= 2) { // no real choices, so don't make the member choose
    if (!$dft) $mya->proxy($priority, $choiceList[0]);
    if (!$dftOther) $mya->proxy(3 - $priority, $choiceList[$dft ? 0 : 1]);
    w\say('no local proxy');
    return w\goNextStep('proxies');
  }

  $title = $priority == 1 ? t('Your #1 Proxy') : t('Your <%b>Alternate</b> Proxy', '_b', 'b class="loud"');
  $title = item($title . t(' (choose one)'), BARE);
  foreach (['warning', 'success', 'primary', 'slight'] as $i => $v) {
    $b["_b$i"] = "b class=\"btn btn-xs btn-$v\"";
  }
  
  $limitedChoice = $mya->cttyA->isRegion ? t('<p>You are outside any organized %PROJECT Community, so your choices will be very limited until more people sign up in your area. But no worries. You will have the opportunity to revise your proxy choices before your community votes on anything.</p>') : '';
  $subtext = item(t('<p>Choose and click someone you know and trust. Top suggestions for you are <%b1>green</b>, <%b2>blue</b>, and <%b3>peach</b> (in that order).</p>', $b) . (($dft or $dftOther) ? t('<p>Your current selection(s), if any, is/are <%b0>orange</b>.</p>', $b) : '') . $limitedChoice, BARE);
  $list = item($choices);
  $priority = hidFld($priority);
  return compact(ray('title subtext list priority'));
}

function formProxy_validate($form, &$sta) {
  extract(just('priority proxyChoice', $sta['input']));
  $mya = w\eLinkAcct($sta, $args); 
  $choice = key($sta['input']);
  u\EXPECT(substr($choice, 0, 2) == 'i-', 'missing proxy choice');
  $proxyChoice = substr($choice, 2);
  if (@$proxyChoice == $mya->proxy(1+2 - $priority)) {
    return r\go("prox/page=Proxies&$args", 'doubled proxy', 'err');
  }
  $sta['input'] += compact('proxyChoice');
  return formProxy_submit($form, $sta); // oddly, _submit never gets called otherwise
}

function formProxy_submit($form, &$sta) {
  extract(just('priority proxyChoice', $sta['input']));
  $mya = w\eLinkAcct($sta, $args); 

  $mya->proxy($priority, $proxyChoice);
//  w\say('info saved');

  if (!r\acct()) { // called from email link
    return $priority == 1 ? r\go("/prox/page=Proxy&priority=2&$args") : w\doSay(t('Success!'), 'ok');
  } elseif ($mya->proxy(1+2 - $priority)) { // do we already have the other proxy?
//    return r\go($mya->ok ? '/settings/proxies' : 'status');
  } else say('proxy to go');

  return r\go('/settings/proxies', 'info saved');
}

/**
 * Choose default proxies.
 */
function formProxies($form, &$sta, $args = '') {
  global $base_url;
  $mya = w\eLinkAcct($sta, $args);

  foreach ([1, 2] as $i) {
    if ($p[$i] = $mya->proxy($i)) {
      $pi = r\acct($p[$i])->fullName;
    } else $pi = t('(none chosen)');
//    $proxy[$i] = $pi . t(' [<@a>show choices</a>]', ['@a'=>"a href=$base_url/prox/page=Proxy&priority=$i&$args"]);
    $proxy[$i] = $pi . ' ' . spinLink("/prox/page=Proxy&priority=$i&$args", t('Show Choices'), '', 'primary', 'xs');
  }
  $gotBoth = ($p[1] and $p[2]);
  
  $title = item(t('Proxies'));
  $afterOk = $mya->ok ? '' : ', once your account is approved,';
  if ($mya->ok or !$gotBoth) $subtext = item(t('proxy help') . t(<<<EOF
    <p>If you don't see listed here the people you want, choose someone else temporarily, then%afterOk click <%a>Invite</a> on the Community menu to invite who you most want to represent you.</p>
EOF
  , '_a afterOk', r\acct() ? w\atag('/community/invite') : '', $afterOk));

//  if ($gotBoth) $mya->stepDone('proxies'); // sometimes doesn't get set in formProxy (dunno why)
  $proxy1 = item($proxy[1], t('Proxy:'), t('Who will vote on your behalf, when you don\'t vote directly? (You can change your choices at any time.)'));
  $proxy2 = item($proxy[2], t('Alternate:'), t('Who will vote on your behalf, if your Proxy doesn\'t vote either? (even before resorting to your Proxy\'s Proxy)'));
  $form = compact(ray('title subtext proxy1 proxy2')) + ($mya->member ? [] : w\setupFoot());
  return labeled($form);
}

function formProxies_validate($form, &$sta) {
  if (db\count('r_proxies', 'person=:id', ['id' => r\acct()->id]) < 2) return say(t('You need to choose both a primary and an alternate proxy.'), 'err');
}

function formProxies_submit($form, &$sta) {
  return w\goNextStep('proxies');
}

/**
 * Show an example invitation email.
 */
function inviteExample() {
  global $rUrl;
  global $mya;
  $s = file_get_contents("$rUrl/templates/invite.html");
  $note = str_replace("\n", '', t('invite default', 'name', ''));
/**/  echo tr($s, '_personalNote signed fullName phone CODE', $note, u\fmtDate($mya->signed), $mya->fullName, u\fmtPhone($mya->phone), '');
  exit();
}

/**
 * Invite someone to sign up for rCredits (on behalf of the account, not the agent).
 * NOTE: We allow agents to send invitations on behalf of a company, but be aware that companies are not people and there is a danger in giving companies permission to act like people. On this invitation form, the company is "trusting" whoever it invites -- something usually reserved for humans.
 */
function formInvite($form, &$sta) {
  global $base_url;
//  if ($agent = r\agent()) {
  global $mya;
  if ($mya->cAdmin and !$mya->proSe) say(t('Note: Admins cannot invite on behalf of someone.'), 'err');
  $stepsDone = (object) $mya->stepsDone;
  $nearly = ($mya->admin or $mya->can(B_MEMBER)) ?: (@$stepsDone->sign and @$stepsDone->donate);
  
  $title = item(t('Invite Someone to %PROJECT'));
  $_a1 = w\atagB('/community/invite/waiting');
  $_a2 = w\atagB('/community/invite/invited-whom');
  $where = r\location($mya->cttyA); // currently UNUSED
  $inviteCode = $mya->iCardCode(IBY_EMAIL);
  $_inviteLink = PROMO_URL . "/signup/code=$inviteCode";
  $warning = $mya->co ? t('<p>Note you are sending an invitation on behalf of a company. The company is "trusting" whoever you invite. We at %PROJECT recognize that companies are not people, and that it\'s a bit odd to allow them a sentiment usually reserved for humans.</p>') : '';
  //Plus $@R_COUNTED_BONUSr for each employee, if they open a company account. 
  $subtext1 = t('We\'re sorry, you cannot invite someone to sign up until you have signed the <%aSign>Agreement</a> and made a <%aDonate>donation</a>.', '_aSign _aDonate', w\atag('/community/agreement'), w\atag('/community/donate'));
  //<br><br>Return to the <a href=\"%BASE_URL/status\">Membership Steps</a> page to see where you stand.
  //      <li>Order %orderCount sheets of 10 invitation cards by mail (free!). %orderSubmit</li>
//      <li><b>OR</b> Print %printCount sheets of 10 invitation cards. %printFront %printBack</li>

  $_aFront = w\atag('/community/invite/print', w\away());
  $_aBack = w\atag($mya->invitationBack());
//  list ($region, $zot) = explode(R_MEMBER_MARK, $mya->mainQid);
  $_aMailInvites = w\atag('mailto:' . CGF_EMAIL . '?subject=' . t('%PROJECT Invitation Card request') . '&body=' . t('Please send me some more %PROJECT invitation cards. Thanks!') . " -- $mya->fullName (account #$mya->mainQid)");
  $region = $mya->qo->region;
  foreach (ray('NEW MIW') as $k) if ($region == $k) {
    list ($nm, $zot) = explode('@', $mya->cttyA->email);
//    $aBack = str_replace('-back', '-back-' . $nm, $aBack);
  }
  $friend = $mya->co ? t('customer, employee, or supplier') : t('friend');
  $_size = $mya->co ? '4.25" &times; 2.75"' : '3.5" &times; 2"';
  
  $subtext2 = $mya->cttyRewardy ? t('<p>Get a $%R_HELPER_BONUS reward for each %friend you invite, who signs up!</p>', compact('friend')) : '';
  $subtext2 .= t(<<<EOF
<p>Invite <b>only people you trust</b> who live, shop, or work in your community. You may need to help or nudge the people you invite. <%a2>Who you have invited</a> <%a1>People waiting to be invited</a></p>
  <br>
  <p>Here are three different ways to invite someone:</p>
    <ul>
      <li><b>BEST: Print a sheet</b> of invitation cards, %size, on card stock: <%aFront>front</a>, <%aBack>back</a>.<br>(or <%aMailInvites>ask to have some mailed to you</a> at no charge)</li>
      <li><b>Tell your %friend</b> to sign in at %CG_DOMAIN with invitation #&nbsp;%inviteCode or send them this link: <div id=inviteLink>%inviteLink</div></li>
      <li><b>Complete the form below</b> to send an invitation NOW:</li>
    </ul>
EOF
  , compact(ray('_a1 _a2 _size where _aFront _aBack _aMailInvites _inviteLink inviteCode friend')));
//  (Later, you will need to confirm you know and trust them.)
  $subtext = item(!@$nearly ? $subtext1 : ($subtext2 . $warning));
//  $contact = textFld(t('Email or Cell:'), t('An email address or cell number for the person you want to invite'), required());

  $email = textFld(t('Email:'), [t('Their email address'), t('An email address for the person you want to invite')]);
//  $emails = areaFld(t('Email(s):'), t('A comma-separated list of email addresses to invite'));
  if ($mya->cAdmin) $dupsOk = boolFld(t('Dups Okay?'), '', FALSE);
  $trusted = boolFld(t('Trusted?'), t('If you lent this person (or people) $250, would you trust them to pay it back?'), $mya->cAdmin ?: NULL);
  $subject = textFld(t('Subject:'), t('The subject of your message'), required($mya->fullName . t(' invites you to %PROJECT')));

  $default = @$mya->data['inviteBody'] ?: t('invite default', 'name', $mya->fullName);
  $messageHelp = t('Invite them to sign up, and say why. A <%a>description of %PROJECT</a> will follow your message.', '_a', atag('/community/invite/example', w\away()));
  $message = areaFld(t('Message:'), $messageHelp, required($default));
  if ($mya->proSe or !$mya->cAdmin) $submit = submit(t('Send')); // don't let cAdmins send on behalf of anyone
  jsx('invite-link');
  
  $form = $nearly ? 
      labeled(compact(ray('title subtext email dupsOk trusted subject message submit')))
    : compact(ray('title subtext'));
  return $form;
}

function formInvite_validate($form, &$sta) {
  extract(just('email emails trusted', $sta['input']));
  if (op($sta) == 'submitN') {
    if (!$emails) return say('bad email', compact('emails'), 'emails');
    foreach (ray($emails) as $one) if (!u\validEmail($one)) return say(t('bad email: %one', compact('one')), 'emails');
  } elseif (!u\validEmail($email)) return say('bad email', compact('email'), 'email');
  if (!@$trusted) return say('must trust', 'trusted');
}

function formInvite_submit($form, &$sta) {
  global $base_url;
  extract(just('email emails subject message dupsOk', $sta['input']));
  global $mya;

  if (op($sta) == 'submitN') {
//    foreach (ray($email) as $one) sendInvite($one, $subject, $message, @$dupsOk);
    $code = ''; // get a random code just once
    foreach (ray($emails) as $email) {
      $code = r\invite($email, $mya->id, $code, $subject, $message);
      $links[] = "$base_url/signup/code=$code/e=$email";
    }
    $links = join('<br>', $links);
    say('invite links', compact('links'));
  } else {
    $email = strtolower($email); // otherwise constantSubs breaks on cap after @
    sendInvite($email, $subject, $message, @$dupsOk);
    $data = ray('inviteBody', substr($message, 0, 10000)) + $mya->data;
    $mya->update(compact('data'));
  }
}

/**
 * Send another member a message.
 */
function formMessage($form, &$sta) {
  $title = item(t('Send a Message'));
  $subtext = item(t('Complete this form and click Send. The other member will receive an email from your email address. When they reply, you will also have their email address, so you can communicate by email after that (you won\'t need to use this form again).'));
  $to = w\textFld(t('To:'), [t('Recipient'),t('The account, name, or partial name of the member you want to send a message to.')], required());
  $subject = w\textFld(t('Subject:'), [t('Subject')], required(t('a message from %PROJECT member ') . r\acct()->fullName));
  $message = areaFld(t('Message:'), [t('Your message goes here.')], required());
  $submit = submit(t('Send'));
  w\whoFldSubmit('to', t('Send to %name?'));

  return labeled(compact(ray('title subtext to subject message submit')));
}

function formMessage_validate($form, &$sta) {
  extract($info = just('to subject message', $sta['input']));
  if (strpos($to, '@')) return say(t('If you know the member\'s email address, don\'t use this form -- just send them an email.'), 'to');
  if (!$a = w\whois($to, 'to', $info)) return FALSE;
  u\preray(ray('to fullName', $a->email, $a->fullName), $sta['input']);
}

function formMessage_submit($form, &$sta) {
  extract(just('to subject message fullName', $sta['input']));
  global $mya;
  r\rMail('', $to, ray('noFrame subject body', TRUE, $subject, $message), [$mya->email => $mya->fullName]);
  say('sent message', compact('fullName'));
}

function formVideos($form, &$sta) {
  $title = item(t('%PROJECT Member Videos'));
  $subtitle = fld('item', '', '', t('The videos may not be available until mid-January. Try again in a few days!'));
  $form = compact(ray('title subtitle'));
  return labeled($form);
}

function formUser($form, &$sta) {return \user_login($form, $sta);} // called from r\go() in Summary

/**
 * Show a summary of the current account.
 * This function uses jQuery code defined in misc.js
 * UNUSED @param string $qid: (optional) ID or qid of the account to summarize and manage (for cAdmin)
 */
function formSummary($form, &$sta) {
  global $base_url;
//  if (!$mya = r\acct($qid)) return r\go(isGAME ? 'community/game' : PROMO_URL);
  
  global $mya; $myid = $mya->id;

//  if ($qid and $mya and $a = r\acct($qid, $myid)) return w\changeWho("acct=$qid");

//  if (($mya->cAdmin or $mya->isAdmin2) and $qid and $a = r\acct($qid) and ($mya->admin or $mya->isAdmin2 or $a->community == $mya->agentA->community)) {
/*    w\setAcct($a->id); // switch to this account until further notice
    r\go('summary'); // refresh page, switching to new account
  } */

  if ($mya->closed) say(t('Your account is closed, but you can still see your account history.'));

  $stepUrl = $mya->nextStepUrl('', $msg);
  if ($stepUrl == 'signup' and $info = r\relation('reid,code', "other=:myid AND isCustomer AND code<>''", compact('myid'))) {
    extract($info);
    $stepUrl .= "/reid=$reid&customer=$code";
  }
  
  $extras = '<br>' . u\fmtPhone($mya->phone) . " ($mya->faxetc)<br>$mya->email ";

  if ($mya->admin2 and !$mya->proSe) { // some kind of admin (but not self)
    include_once __DIR__ . '/../admin/admin-web.inc';  
    $form = w\adminSummary();
    foreach (ray('photo legalName shortName federalId community') as $k) if (@$form[$k]) { // move these up (see return line)
      $$k = $form[$k];
      unset($form[$k]);
    }

    if (!$mya->isCtty and $mya->cAdmin and !$mya->co) $extras .= a\cardLink($mya->id) . ' ' . a\recropLink();
    
    if ($stepUrl == 'summary') {
      if (@$msg) w\say(t('New member is told: ') . t($msg));
    } elseif ($stepUrl) w\say(t('New member will be sent <a href="%stepUrl">there</a> upon signing in.', 'stepUrl', "$base_url/$stepUrl"));
    
  } else { // normal
    if ($stepUrl and $stepUrl != 'summary') return r\go($stepUrl);
    if (@$msg) say($msg);
    
    if ($mya->legalName != $mya->fullName) $legalName = item($mya->legalName, t('Legal Name:'));    
    //extract(just('r usd pAccts', r\stats($mya->community)));
// Don't show return because that's not the point of rCredits
//    $returnMo = item("$returnMo% APR " . t('over the past month'), t('Your return:'));
//    $return = item("$return% APR " . t('overall (ever)'), ' ', t('Your effective rate of return on your average balance [<@a>details</a>]', ray('@a', 'a href=help/your-return')));
  }

  extract(just('returnMo return cttyBeneMo cttyBene', $mya->j_stats()));
  $gifts = u\fmtAmt($mya->totalGifts());
//  $cttyBene = item("$cttyBeneMo " . t('over the past month') . "<br>$cttyBene " . t('overall (ever), including %gifts in contributions', compact('gifts')), t('Social return:'), t('Financial benefit to your community to date, from your participation together with other members, empowering economic democracy! [<%a>details</a>]', '_a', w\atag('/help/social-return')));  
  $cttyBene = item("$cttyBene " . t('overall, including your %gifts in contributions', compact('gifts')), t('Social return:'), t('Financial benefit to your community to date, from your participation together with other members, empowering economic democracy! [<%a>details</a>]', '_a', w\atag('/help/social-return')));  
    
  // $showCustomers = w\item(w\btn('/community/data/qName=6Customers', t('Customer List')));

  if ($mya->canManage) {
    $hasMultipleAccounts = ($mya->co or db\exists('r_relations r LEFT JOIN users u ON u.uid=r.main', 'other=:id AND permission>0 AND u.:IS_CO', ['id' => $mya->agentId]));
    $another = $hasMultipleAccounts ? t('Another') : t('a');
    $makeCo = w\btn('/signup-company', t('Open %another Company Account', compact('another')), 'primary', 'xs');
//    if (!$mya->jid and !$mya->co) $makeJoint = w\btn('/signup/joint=1', t('Make this a joint account'), 'primary', 'xs');
    if ($mya->member and !$mya->jid and !$mya->co) $makeJoint = w\btn('/prejoin', t('Make this a joint account'), 'primary', 'xs');
    if (!$mya->co and $hasMultipleAccounts) $clickPhoto = item(t('Click your photo to manage your other account(s).'));
  }

  if ($mya->co) $reports = w\btn('/company-reports', t('Reports'));
  if ($mya->id == r\cgfId()) $deposits = w\btn('/sadmin/show-deposits', t('Deposits'));
  $topButtons = item(@$makeCo . @$makeJoint . @$reports . @$deposits);

  $title = item(t('Account Summary'));
  if (isDEV and !$mya->proSe) $agentName = ' &nbsp; &nbsp; ' . t('<b>Agent: </b>') . $mya->agentA->fullName;
  $accountName = item($mya->j_fullName . ($mya->jid ? '<br>' : ' ') . "($mya->j_name)" . @$agentName, t('Name:'));
  $address = item($mya->postalAddr . @$extras, t('Postal Addr:'));
  if (!$mya->isCtty) { // unless this is a community or region account
    $acctType = $mya->co ? t('company account') : ($mya->jid ? t('joint account') : t('personal account'));
    $balance = u\fmtAmt($mya->balDpy);
//    $totalDesc = u\fmtAmt($mya->r);
//    $balanceDesc = $mya->savings ? t(' plus your savings, for a total of @total', ['@total' => $totalDesc]) : '';
    $balanceDesc = '';
    if ($mya->rewards) $balanceDesc .= t(' (see <%a>History</a>)', '_a', w\atag('/history'));
    $balance = item($balance . "<small>$balanceDesc</small>", t('Balance:'));
//    $savings = item(u\fmtAmt($mya->savings) . t('<small> (your total incentive rewards to date)</small>', [
//    list ($rewardNote, $rewardDesc) = $mya->cttyRewardy ? [t('<small> (your total incentive rewards to date)</small>'), t('This amount will be yours to keep, once your community reaches a certain size.')] : ['', t('Some of this amount may be yours to keep, at your %PROJECT community\'s decision, once membership reaches a certain size.')];
//    $savings = item(u\fmtAmt($mya->rewards) . $rewardNote, t('Credit Line:'), $rewardDesc);
    $suffix = $mya->debt ? '' : t(' (<%a>Click here</a> to let your balance go negative.)', '_a', 'a id="activate-credit"');
    $creditLine = item(u\fmtAmt(-$mya->floor), t('Credit Line:'), t('Based on your account\'s average monthly activity over the past 6 months.'), w\suffix($suffix));
//    $committed = item(u\fmtAmt(max(0, $mya->committed)), t('Committed:'), t('reserved for donation to Common Good Finance'));

    $successes = db\count('users', 'helper=:myid AND activated<>0', compact('myid'));
    $invites = max($successes, db\count('r_invites', 'inviter=:myid', compact('myid')));
    $doInvite = $mya->cAdmin 
    ? w\btn('/community/invite/print', t('front')) . ' ' . w\btn($mya->invitationBack(), t('back'))
    : t('<small>[<%a>invite someone</a>]</small>', '_a', atag('/community/invite'));
    $invites = item(t('You have invited at least %invites people (%successes are now members). ', compact('invites', 'successes')) . $doInvite, t('Invitations:'));
  } else $acctType = t('community account');

  if ($mya->cAdmin) {
    $extra = " id#$mya->id";
    if (FALSE and $bankInfo = $mya->bankInfo) {
      extract($bankInfo, EXTR_PREFIX_ALL, 'b');
      $bankInfo = "$b_name (routing #$b_route)\n$b_address, $b_city, $b_state $b_zip";
      $extra .= ' ' . w\popHelp(t('bank info'), $bankInfo, '#'); //strtr(t(' <@a>bank info</a>'), ['@a'=>$bankInfo]); // strtr circumvents Drupal crap
    }
  } else $extra = '';
  $accountId = w\item(($mya->mainQid ?: 'N/A') . ' (' . $acctType . ')' . $extra, t('ID:'));

  $fields = 'photo title clickPhoto showCustomers topButtons accountId accountName details address legalName shortName federalId community balance creditLine creditLimit committed invites cttyBene';
  foreach (ray('details') as $k) $$k = @$form[$k]; unset($form[$k]); // put these on the left if admin
  $fields = compact(ray($fields));
  
//  if ($mya->superAdmin and !$mya->ok) $onSubmit = w\whoFldSubmit('helper', t('This person was invited by %name, yes?'));
  if ($mya->admin2 and !$mya->proSe) {
    $class = ['class' => ['admin']];
    $right = w\fieldSet('right2', $form, '', $class); // the admin part
    $left = w\fieldSet('left2', $fields, '', $class);
    $form = compact('right', 'left');
    $form['none'] = submit('none'); // force _submit despite lack of submit button    
  } else $form = $fields;

  if ($mya->superAdmin and $mya->proSe) $form = just('title accountId accountName', $form);
  
  jsx('summary');
  
  return labeled($form);
}

function formSummary_validate($form, &$sta) {
//  if (!r\acct()->cAdmin2) return hack('non-admin submitted summary form');
  if (in_array(op($sta), ['openCompany', 'openJoint'])) return;

  extract(just('uid legalName federalId creditLimit rTrader helper mediaConx moves tickle adminable', $sta['input']));
//  $a = r\acct(@$uid);
  global $mya;
  
  if (@$tickle !== '' and $err = u\badDate($tickle)) return say($err, 'tickle');
  
  if (@$federalId == R_ON_FILE or @$federalId == t('SSN')) {
    unset($sta['input']['federalId']);
  } elseif (@$federalId and $err = u\badSsn($federalId, $mya->dob)) return say($err, ['what' => 'federalId'], 'federalId');

  if (@$helper) {
    if (!$h = whois($helper, 'helper', $sta['input'])) return say(t('I don\'t know what helper account you mean.'), 'helper');
    $helper = $h->id;
  } else {unset($helper); unset($sta['input']['helper']);}

  if (@$rTrader and !$mya->ok and !$mya->isCtty) {
    if (!@$helper) return say(t('You must specify who gets the helper reward.'), 'helper');
//    if (!@$helper or $helper == 1) return say(t('You must specify who gets the helper reward.'), 'helper');
    if (is_null(@$adminable[B_MEMBER])) return say(t('That account is not READY (not a member).'), 'adminable'); // test "is_null" because 0 is the value when set
    if (!$mya->confirmed) say(t('NOTE: Member %helperName has not yet confirmed this invitation.', 'helperName', $h->fullName));
  }

  foreach (ray('creditLimit') as $k) {
    if (isset($$k)) {
      if ($err = u\badAmount($$k)) return sayFieldErr($err, $k); 
      $$k = u\cleanAmount($$k);
    }
  }
  if (@$rTrader and isset($mediaConx) and $err = u\badAmount($mediaConx, '>=0', 0)) return sayFieldErr($err, 'mediaConx');
  if (isset($moves) and $err = u\badAmount($moves, '>=0', 0)) return sayFieldErr($err, 'moves');
//  if (@$who and !$who = whois($who, 'who', $sta['input'])) return say(t('I don\'t know what account you mean to go to.'), 'who');
  u\preray(compact(ray('tickle helper who creditLimit')), $sta['input']);
}

function formSummary_submit($form, &$sta) {
  global $mya;
  $op = op($sta);

  if ($op == 'secureMsgs') return r\go('', showSecureMessages());
  if (!$mya->admin2) return; // hack attempt

  extract($args = just('uid who legalName federalId creditLimit tickle note notes helper mediaConx moves rTrader risks adminable', $sta['input']));
/**/  if (!$mya->cAdmin) u\EXPECT(!array_diff(array_keys($args), ray('uid tickle note')), 'too many unpermitted changing fields in ' . print_r($args, 1));
//  $a = r\acct(@$uid); // same as $mya if no uid passed

  if (!@$tickle) {
    $tickleDone = $mya->ok ? ($note and !$tickle and $mya->tickle) : 'activate';
    list ($zot, $tickle) = $mya->nextTickle($tickleDone);
//    if ($tickleDone) $note = trim(t('(%typeDone) ', 'type', @$note ? '': "$tickleType ") . @$note);
//    if ($tickleDone === TRUE) $note = trim(t('Done ') . @$note);
  }
  if (@$note) $notes = $mya->stampNote($note) . (isset($notes) ? $notes : $mya->notes);

  $aa = $mya->agentA;
  /*
  if (@$who and ($who->community == $aa->community or $aa->id == 1)) {
    svar('myid', $who->id); // make it the new current account
    list ($newAcct, $oldAcct) = array($who->fullName, $mya->fullName);
    return say('changed account|lost old changes', compact('newAcct', 'oldAcct'));
  } 
  */
  
  $DBTX = \db_transaction();

  if (!$mya->isCtty) {
    $fullName = $mya->fullName;
    if (FALSE and !$mya->confirmed and @$helper and @$helper != $mya->helper) { // helper has not confirmed yet (must be self-signup)
      $_a1 = r\acct($helper)->makeDo('confirmInvite', $mya->id); // link to confirm invitedness
      r\message($helper, 'confirm invite', compact('_a1', 'fullName')); // ask inviter to confirm
    }

    if (@$rTrader and !$mya->ok) {
      $mya->activate($helper);
    } elseif (@$federalId and $federalId != $mya->federalId) $mya->update('ssnData', '');
  }

  if (isset($rTrader)) $mya->setBit(B_OK, @$rTrader, TRUE);
  if ($mya->cAdmin or $mya->admin) setRisksAndFlags($mya, @$risks, @$adminable); // don't test for isset (allow turning off all bits)
  if ($mya->helper and ($mya->ok or !@$helper)) unset($helper); // don't overwrite if too late or empty
//  $floor = -$creditLimit; // floor is calculated automatically
  $mya->update(compact(ray('legalName federalId tickle notes helper mediaConx moves')));
  
  unset($DBTX);
  
  say('info saved');
}

function setRisksAndFlags($a, $risks, $adminable) {
  $risks0 = $a->risks;
  $a->setRisks($risks); // set or unset the adminable risk bits
  if ($a->risks != $risks0) { // if anything changed, refigure ALL risks (some affect others)
    include_once __DIR__ . '/../rcredits-risk.inc';
    k\acctRisk1($a->id);
  }
  $a->setBits(@$adminable);
}

/**
 * Recalculate risk.
 * @param string $type: type of entity: acct or tx
 * @param int $id: record ID for the entity
 * @param bool $show: <show the risk calculation>
 */
function formRerisk($form, &$sta, $type = '', $id = '', $show = FALSE) {
  include_once __DIR__ . '/../rcredits-risk.inc';
  global $showRiskCalc; 
  
  $showRiskCalc = '';

  if ($type == 'acct') {
    k\acctRisk1($id, $risk, $calc);
    $w = ''; $m = K_RED;
  } elseif ($type == 'tx') {
    $x = r\x($id);
    k\txRisk1($x->ray, $risk, $calc);
    $w = u\fmtAmt($x->amount);
    $m = t('@K_RED / @K_THRESHOLD');
  }

  $risk = round($risk);
  
  $showRiskCalc = <<< EOF
  <table id="riskCalc">
  <tr><th>Risk Name</th><th>Weight</th><th>Multiplier</th><th>Risk</th><th>Set Flag?</th></tr>
  $showRiskCalc
  <tr><td><b>TOTAL</b></td><td>$w</td><td>$m</td><td>$calc</td><td>= $risk</td></tr>
  </table>
EOF;
  say($showRiskCalc);
  r\go("sadmin/$type-info/$id", t('info saved'));
}

/**
 * List the people honored or remembered with contributions to Common Good.
 */
function formHonors($form, &$sta) {
  $title = item(t('Honored and Remembered'));
  $subtitle = item(t('Listed here are the people and principles honored and remembered with a <%a>contribution</a> to %PROJECT.', '_a', w\atag('/community/donate')));
  $oftens = ray(OFTENS);
  $q = db\q("SELECT DISTINCT honor,honored FROM r_gifts WHERE honored<>'' ORDER BY honor,honored");
  $list = '';
  $type = 'none';
  while ($row = $q->fetchAssoc()) {
    extract($row);
    if ($honor != $type) {
      $list .= '<div class="honor-type">' . (trim(u\honorDesc($honor)) ?: t('other')) . "</div>\n";
      $type = $honor;
    }
    $list .= "<div class=\"well\">$honored</div>\n";
  }
  $list = item($list);
  return compact(ray('title subtitle list'));
}

/**
 * Show information about a specific transaction and its risks.
 */
function formTxInfo($form, &$sta, $xid = '') {
  include_once __DIR__ . '/../admin/admin-web.inc';  
  include __DIR__ . '/risk-descs.inc';
  return txInfo($xid);
}

/**
 * Output an account photo if the caller is authorized.
 * @param string $qid: account letter-code
 * @param bool $small: output a small version instead
 * @param bool $orig: show the original photo before it was cropped
 * @return the photo if the account is a company or the cardCode is valid. Otherwise a generic picture.
 */
function formAccountPhoto($form, &$sta, $args = '') {
  global $mya;
  extract(just('qid small orig', $args));

  header("Content-type: image/jpeg");

  if ($a = @$qid ? r\acct($qid, $mya->agentId) : $mya) {
    if ($a->co or $a->can(B_READ)) $photo = @$orig ? @file_get_contents($a->tempPhotoFilename) : $a->photo;
  }
//      if ($a->co ?: ($a->cardCode == $cardCode)) $photo = $a->photo; // was photo()
/**/  echo @$photo ?: \file_get_contents(DRUPAL_ROOT . R_PATH . '/images/icons/account.png');
  return exit();
}

//function formIcon($orig = FALSE) {return memberPhoto(@r\acct()->mainQid, TRUE, $orig);} // Output a small version of the current account's photo.

/**
 * Handle the uploaded photo: crop, resize, rotate, and save.
 * @param int $uid: current account record ID
 * @param string $sid: session ID
 * POSTed: parameters from croppic
 * @return json success or error message            
 */
function photoUpload($uid = '', $sid = '') {
  global $channel; $channel = TX_AJAX;
  global $base_url;
  $f0 = ray('imgUrl imgInitW imgInitH imgW imgH imgY1 imgX1 cropH cropW rotation uid sid');
  $f = ray('url w0 h0 w h y1 x1 cropH cropW angle uid sid');
  $params = $_POST; // don't sanitize this, it only comes from us!
  foreach ($params2 = array_combine($f0, $f) as $k0 => $k) $$k = $params[$k0];
  
  if (!@$uid or !@$sid or !$sessionVars = w\sessionVars($sid)) return w\photoRet(t('bad sid'));
  $mya = r\acct($uid);
  $tempFilename = $mya->tempPhotoFilename;
  $quality = $mya->co ? 100 : 50; // jpeg compression/quality (0=worst quality, 100=best quality)
  if ($mya->co) foreach ([$cropH, $cropW] as $k) $$k *= CO_PHOTO_FACTOR; // higher quality for businesses

  if ($recrop = u\starts($url, 'http')) $url = $tempFilename; // picture is already saved and is just being recropped
        
  if (!$what = @getimagesize($url)) return w\photoRet(t('That is not an image file.'));
  list ($actualW, $actualH, $type, $zotAttr) = $what;
  if ($actualW != $w0 or $actualH != $h0) r\tellAdmin('photo problem?', $_POST + compact('actualW', 'actualH', 'uid'));
  if (!(imagetypes() & $type)) return w\photoRet(t('That image format is not recognized.'));
  $ext = image_type_to_extension($type, FALSE);
  $func = 'imagecreatefrom' . ($ext == 'bmp' ? 'wbmp' : $ext);
///   flog(compact(ray('uid sid f0 f params params2 sessionVars quality cropH cropW what actualW actualH type zotAttr ext func')));
  if (!$img0 = $func($url)) return w\photoRet(t('image creation error'));
//  if (!$mya->co)
  try {
//    $filename = str_replace(' ', '_', DRUPAL_ROOT . R_PICTURE_DIR . "$mya->fullName-" . u\randomString(10, 'word') . '.jpg');
    if (!$recrop) imagejpeg($img0, $tempFilename, 100); // save for a few days in case we have to recrop
  } catch (Exception $e) {
/**/    lug('failed to save photo file ' . $tempFilename);
  }

  $img = u\alterImg($img0, $w, $h, $x1, $y1, $cropW, $cropH, $angle);

  try {
/*    if ($mya->co) {
      imagejpeg($img, DRUPAL_ROOT . $mya->photoFilename(TRUE), $quality);
    } else { */
      ob_start();
      imagejpeg($img, NULL, $quality);
      $photo = ob_get_clean();
      $mya->update(compact('photo')); // do not combine this with line above
//    }
  } catch (Exception $e) {
    return w\photoRet(t('Your photo could not be uploaded (%err). Try a smaller version or <%a>email it</a> to us?', ray('_err _a', $e->getMessage(), w\emailtag(NULL, t('Here is a photo for my %PROJECT card')))));
  }
  
//  return w\photoRet(str_replace(DRUPAL_ROOT, BASE_URL, $tempFilename), 'success');
  return w\photoRet("$base_url/account-photo", 'success');
}

/**
 * Upload a photo.
 * @later: maybe drag&drop (see http://hayageek.com/drag-and-drop-file-upload-jquery/)
 */
function formPhoto($form, &$sta, $arg = '') {
  global $base_url, $rUrl;
  global $mya;
  $chooserStyle = 'btn-md btn-primary';
	extract(just('ok err recrop', $arg));
//	$recrop = @$recrop ? plain($mya->tempPhotoFilename) : '';
	$recrop = @$recrop ? "$base_url/account-photo/orig=1/" . time() : '';

  $body = t('I am attaching a photo of me for my %PROJECT Card. &nbsp; - %fullName', 'fullName', $mya->fullName);
  $emailIt = t('<%a>Email one to us</a>', '_a', w\atag('mailto:' . r\regionField('email') . '?subject=photo&body=' . $body));
	$recropIt = $mya->cAdmin ? w\btn('/settings/photo/recrop=1', t('Recrop')) : '';

  if (@$ok) {
    say('got photo');
    $chooserStyle = 'btn-xs btn-secondary';
// No! wait for user to be happy with the photo   $mya->stepDone('photo');
    extract(w\setupFoot()); // get nextStep and progress fields
    $buttonName = $mya->stepsRemaining() > 1 ? t('Next') : t('Finish');
    $allSet = $mya->member ? t('you\'re all set') : t('click "%buttonName" above', compact('buttonName'));
    $desc = t('If you like this photo, %allSet. Otherwise:', compact('allSet'));
  } else {
//    if ($err) say($err, 'err');
    if ($mya->hasPhoto) extract(w\setupFoot()); // be sure new member has a chance to continue
    $desc = $mya->co
    ? t('<p>1. Choose a picture to represent your company in %PROJECT promotions.</p>')
    : t('<p>1. Choose a recent color picture of yourself for your photo-ID %PROJECT Card. Your photo will be encrypted and will not be visible to other members (unless you show it to them).<%b>Requirements</b>:
    <ul>
    <li>It should be a color photo of you and only you (you can crop other people out).</li>
    <li>It must show clearly your full face (no sunglasses, eyes open).</li>
    <li>Your head should fill most of the frame (no shoulders needed).</li></ul>', '_b', 'b class="loud"');    
    $desc .= t('<p>2. Play with the buttons to adjust the position, size, and rotation, then click the <%img>button to upload the image. Please feel free to %emailIt, if that is easier for you.', '_b _emailIt _img', 'b class="crop-button"', $emailIt, "img src=\"$rUrl/images/icons/crop.png\" height=\"20\" /");
  }
  
  $title = item(t('Photo ID Picture'));

  $rnd = u\code();
  
  if ($mya->hasPhoto) {
/*    $oldPhotoFilename = BASE_URL . $mya->photoFilename();
    //$oldPhoto = 'data:image/jpeg;base64,' . base64_encode(file_get_contents($oldPhotoFilename));
    $oldPhoto = $mya->photo ? 'data:image/jpeg;base64,' . base64_encode($mya->photo) : "$oldPhotoFilename?$rnd";
    list ($background, $choose) = ["background-image:url($oldPhoto); background-size:cover;", t('Choose a New Photo')];
    */
    $choose = t('Choose a New Photo');
    if (!$mya->co and $mya->ok) $desc .= '<p>' . t('triggers new card', ['field' => t('photo')]) . '</p>';
    if ($mya->superAdmin) $del = submit(t('Delete'));
  } else $choose = t('Choose a Photo File');
//  } else list ($background, $choose) = ['', t('Choose a Photo File')];
// <style>#photoUp, #photoUp.co { $background }</style>

  $class = $mya->co ? ' class="co"' : '';
  w\svar('userAgent', @$_SERVER['HTTP_USER_AGENT']); // for debugging spurious photo rotations

  $desc = item($desc);
  $newPhoto = item(<<<EOF
<div id="choosePhotoWrap"><div class="btn $chooserStyle btn-success" id="choosePhoto">$choose</div> <div id="emailPhoto" class="btn btn-warning btn-xs">$emailIt</div> $recropIt</div>
<div class="cropHeaderWrapper">
  <div id="photoUp"$class></div>
</div>

EOF
  );
  
//  $sid = db\lookup('sid', 'sessions', 'uid=:uid', ['uid' => $mya->agentA->id]);
//  $sid = session_id();
//  $failure = urlencode(t('That is not a usable image file. Try again.'));
//  $maxSize = R_MAX_UPLOAD_SIZE * 1024 * 1024;
//  $maxSizeDpy = R_MAX_UPLOAD_SIZE . 'MB';

  js('croppic');
  js('crop-setup', 'recrop uid maxSize', $recrop, $mya->id, R_MAX_UPLOAD_SIZE);
  css('x/croppic.css');

  $form = compact(ray('title nextStep progress desc newPhoto del'));
  return labeled($form);
}

function formPhoto_submit($form, &$sta) {
  global $base_url;

  global $mya;
  
  if (op($sta) == 'del') {
    u\EXPECT($mya->cAdmin and $mya->hasPhoto, 'del ghost photo');
/*    $pictureFilename = DRUPAL_ROOT . $mya->photoFilename(TRUE);
    $newFilename = str_replace('.jpg', '.X', $pictureFilename);
    if (file_exists($pictureFilename)) {
      rename($pictureFilename, $newFilename);
    } else imagejpeg(imagecreatefromstring($mya->photo), $newFilename, 100);
    */
    $mya->stepDone('photo', FALSE);
    $mya->update('photo', '');
    $mya->setBit(B_MEMBER, FALSE);
    $mya->setBit(B_OK, FALSE);
    say(t('photo removed, step undone, person set to non-member'));
    return r\go('/settings/photo');
  } else return w\goNextStep('photo');
}

/**
 * Account Selector form
 * appears above the whole Members Section
 */
function formAccounts($form, &$sta) {
  global $base_url, $rUrl;
  if (!$mya = r\acct()) return []; //['signin' => item('<a href="' . "$base_url/signin" . '">Sign in</a>')];

  $myid = @$mya->id; // may be a non-existent account if tests are run while looking at .ZZA, for example
  if (!$accounts = be\accountChoices()) return [];
//  if (!in_array($myid, @$accounts) and $mya->can()) array_splice($accounts, 1, 0, $myid); // admin or cadmin
  $choices = $ltrs = [];

  foreach ($accounts as $uid => $choice) {
    $a = r\acct($uid);
    if (!$a and isDEV) continue; // ignore this if testing -- "current" account has been undermined is all
    if ($mya->cAdmin or $mya->isAdmin2) {
      $qid = $a->mainQid;
      if ($mya->cAdmin and !$mya->admin) $qid = substr($qid, -2, 2); // show just last two letters for cAdmins
      if ($a->isCtty) { // show communities in a separate category
//        $class = $a->id < 0 ? 'cgc' : '';
        $choice = r\cttyName($uid);
        $ltrs['_'][$uid] = "<small>$qid</small> $choice";
      } else {
        $pos = substr($choice, 1, 2) == '. ' ? 3 
        : (substr($choice, 1, 1) == ' ' ? 2
        : (strtoupper(substr($choice, 0, 4)) == 'THE ' ? 4 : 0));
        $ltr = strtoupper(substr($choice, $pos, 1));
        $ltrs[$ltr][$uid] = "<small>$qid</small> $choice";
        $choice =  "$qid $choice";
      }
    }
    $choices[$uid] = $choice;
  }

  if ($mya->cAdmin or $mya->isAdmin2) {
    ksort($ltrs);
    $index = $details = '';
    foreach ($ltrs as $ltr => $accts) {
      $index .= "<a id=\"index-$ltr\">$ltr</a>";
      $detail = $detailDivs = '';
      $i = 0;
      foreach ($accts as $uid => $v) {
        $i++;
        $a = r\acct($uid);
        $class = '';
        foreach (ray('closed ok co') as $k) if ($a->$k) $class .= "$k ";
        $detail .= r\changeAcctLink($uid, $v, trim($class));

        if ($i == count($accts) or $i % 12 == 0) {
          $detailDivs .= "<div>$detail</div>\n";
          $detail = '';
        }
      }
      $details .= "<div id=\"index-$ltr-detail\" class=\"index-detail\">$detailDivs</div>\n";
    }
    $account = item("<div id=\"index\">$index</div>$details");
  } else {
    $links = '';
    foreach ($choices as $k => $v) {
      $one = $k == $mya->id ? $v : r\changeAcctLink($k, $v);
      $links .= "<li>$one</li>\n";
    }
    $account = item("<ul>$links</ul>");
  }
  
  $form = u\prefixKeys('acct_', compact(ray('account')));
  return $form;
}

function formAccounts_submit($form, &$sta) {
  extract(just('op acct_account', $sta['input']));
  $op = op($sta);
  if ($op == 'Menu') return r\go('menu'); 
}

/**
 * Change the current account.
 */
function changeWho($args = '') {
  global $mya;
  extract(just('acct page', $args));

  if (@$acct == 'signout') return signout();
  if (!@$mya and !isDEV) return w\say(t('No previous account. Try again.')); // get old current account
  $mya = r\acct($acct, @$mya->agentId); // tentative new account
  
  if (!@$mya or (!@$mya->admin and !@$mya->isAdmin2 and !$mya->can())) return hack('accts');
  
  w\setAcct($mya->id); // get new current account

//  if (isDEV) $page = str_replace(DEV_ROOT, '', @$page);
  $page = str_replace(',', '/', @$page);
  
  r\go($mya->cAdmin ? $page : 'summary'); // go to summary, unless admin
}

/**
 * Display the member company's profile (no editable fields here)
 */
function formProfile($form, &$sta, $company = '') {
	require_once DRUPAL_ROOT . '/vendor/parsedown/Parsedown.php'; // normally only once per form

  $uid = db\lookup('uid', 'users', 'name=:company', compact('company'));
  $a = r\acct($uid);
  if (!$uid or !$a->co) return say('no such company', 'ERR');

  $pic = item($a->photoHtml());
  $state = r\realState($a->state);
  $country = r\realCountry($a->country);
  $siteList = '';
  if ($website = $a->website) foreach (ray($website) as $one) {
    $atag = w\atag("http://$one");
    $siteList .= "<$atag>$one</a><br>";
  }
    
  $title = item($a->fullName);
  $phone = 'Phone: ' . u\fmtPhone($a->phone, '+');
  $sql = <<<EOF
    SELECT i.iid, i.industry FROM r_industries i 
    INNER JOIN r_user_industries ui ON ui.iid=i.iid 
    WHERE ui.uid=:uid ORDER BY i.industry
EOF;
  $cats = db\q($sql, compact('uid'))->fetchAllKeyed();
  $cats = item(empty($cats) ? '' : ('<h3>Categories:</h3>' . join('<br>', $cats)));
  $physical = "$a->address<br>$a->city, $state $a->zip";
  $mailing = str_replace('<br>', ', ', $physical) == $a->postalAddr ? '' : "Mailing address: $a->postalAddr<br>";

  $contact = item("$physical $country<br>$mailing<br>
    $phone<br>
    $siteList");
//  $desc = item($a->description);
	$pd = new \Parsedown();
	$pd->setSafeMode(TRUE);
  $desc = $pd->text($a->description);
  $desc = strtr($desc, ["\\\n" => "<br>", '\\' => "<br>"]);
	$desc = item($desc);	

  return labeled(compact(ray('pic title contact desc cats')));
}

/**
 * Say the site is down
 */
function formSystemDown($form, &$sta) {return array('zot' => item(t('system down')));}

/**
 * Get a transaction request (usually pay or charge) and process it
 * @param string $args: all or some parameters for the form (when called from directory or draft form)
 */
function formTx($form, &$sta, $args = '') {
//  if ($confirm = sureForm($sta)) return $confirm;
  extract(just('who amount goods purpose', $args));
  global $mya;

  if (!$mya->can(B_SELL)) return r\go('summary');

  $type = $args === '' ? basename(current_path()) : basename(dirname(current_path())); // pay, charge, etc.
  $role = in_array($type, ray('charge fine')) ? 'payee' : 'payer';
  $incentive = in_array($type, ray('fine grant loan invest'));
  $selling = explode("\n", $mya->selling);
  $purpose = @$purpose ?: ($type == 'charge' ? @$selling[0] : ($type == 'pay' ? '' : $type));
  
  focusOn(@$who ? 'amount' : 'who');

  // set up form fields
  $title = item(ucwords($type));
  $subtext = $type == 'pay' ? w\btn('/pay/payments', t('Upload Payments'), 'default') : '';
  if ($mya->co) $subtext .= ' ' . ($type == 'pay' 
    ? w\btn('/pay/payroll', t('Upload Payroll'), 'default')
    : w\btn('/charge/invoices', t('Upload Invoices'), 'default')
  );
  $subtext = w\item($subtext);
//    list ($thing, $url) = $type == 'pay' ? [t('Payroll'), '/pay/payroll'] : [t('Invoices'), '/charge/invoices'];
//    $subtext = item('<small>[' . t('<%a>Upload %thing</a>', '_a thing', w\atag($url), $thing) . ']</small>');
//  }

  $whoLabel = ($type == 'loan' ? t('Lend to') : ucwords($type)) . t(' whom:');
  $question = ($type == 'loan' ? t('Lend') : ucwords($type)) . t(' %amount to %name?'); 
  $who = textFld($whoLabel, [t('name, id, email, or phone')], required(@$who));

  $amount = textFld(t('Amount:'), [t('amount to ') . $type], required(@$amount));
  $goodsOpts = ray(R_WHYS);
  unset($goodsOpts[FOR_SHARE]); // this gets set only automatically
  if ($mya->cttyRewardy) {
    $goods = $incentive ? hidFld(FOR_NONGOODS) : radiosFld(t('For:'), '', dft((int) @$goods), $goodsOpts); // required() fails here
  } else $goods = hidFld($incentive ? FOR_NONGOODS : FOR_GOODS);
  $purpose = textFld($mya->cttyRewardy ? ' ' : t('For:'), [t('purpose or description of goods and services')], required(@$purpose));
// (keep this for a while)  $calc = item(u\calculator('amount'));
  $scanClass = 'not-scanned';
//  $isGift = hidfld(FALSE);
  $$type = submit(ucwords($type));

  w\whoFldSubmit('who', $question, ray('allowNonmember', $type == 'charge'));
  
  $form = labeled(compact(ray("title subtext who amount goods purpose calc $type")));
  $form['#attributes']['class'][] = $scanClass;

  return keep_values($form); // get defaults from which('info')
}

function formTx_validate($form, &$sta) {
  extract(just('who', $sta['input']));
  if (strpos($who, '@') and !u\validEmail($email = $who)) return w\say('bad email', compact('email'), 'who');
}

function formTx_submit($form, &$sta) {
  extract($info = just('who amount goods purpose', $sta['input']));
  if (strpos($who, '@')) return r\go('charge/nonmember/' . u\urlify(serialize($info)));
  w\transfer($op = op($sta), $info); // op who amount goods what
}

/**
 * Pay or charge a nonmember (continued from Charge page)
 */
function formTxNonmember($form, &$sta, $args = '') {
  if (!$args or !$info = unserialize(u\deurlify($args))) return r\go('', t('Url Error'), 'err');
  extract($info = just('who amount goods purpose', $info));
  if (count($info) != 4) return r\go('', t('Url Error'), 'err');
  
  $title = w\item(t('Invoice a Non-member'));
  $subtext = w\item(t('Sending an invoice to %email (%amount for %purpose)', 'email amount purpose', $who, u\fmtAmt($amount), $purpose));
  $name = w\textFld(t('Recipient Name:'), [t('Recipient\'s full name')], required());
  $submit = w\submit(t('Send Invoice'));
  $args = w\hidFld($args);
  return labeled(compact(ray('title subtext name submit args')));
}

function formTxNonmember_submit($form, &$sta) {
  extract(just('name args', $sta['input']));
  $info = unserialize(u\deurlify($args));
  be\invoiceNonmember($name, $info);
}

/**
 * Upload invoices spreadsheet to create invoices.
 * The validate and submit functions are also called by PaymentsUpload and Payroll.
 */
function formInvoiceUpload($form, &$sta) {
  global $base_url, $mya;

  $title = item(t('Upload Invoices'));
  $selling = explode("\n", $mya->selling);
  $instructions = csvUploadInstructions(t('invoice'), $selling[0]);
  $subtext = item("<ul id=\"instructions\">$instructions</ul>");
  $file = fileFld();
  $submit = submit('Upload and Invoice');

  return labeled(compact(ray('title subtext file submit')));
}

function formInvoiceUpload_validate($form, &$sta) {
  if (!@$_FILES['files']['name']['file']) return say('upload required', 'file');
  $file = new \stdClass();
  foreach ($_FILES['files'] as $k => $v) $file->$k = $v['file'];
  if (function_exists('mime_content_type') and $filetype = mime_content_type($file->tmp_name)) {
    if (!in_array($filetype, ['text/csv', 'text/plain'])) return say('bad file type', compact('filetype'), 'file');
  }
  if ($file->size > R_MAX_UPLOAD_SIZE * 1024000) return say(t('That file is too big'), 'file');
  $sta['input']['rows'] = w\uploadRows($file->tmp_name);
}

function formInvoiceUpload_submit($form, &$sta, $args = NULL) {
  global $mya;

  $fields = 'inv dftDesc did map onSuccess';
  $selling = explode("\n", $mya->selling);
  u\setDft($args, ray($fields, TRUE, $selling[0], t('invoiced'), [], NULL));
  extract(just($fields, $args));
  extract(just('rows', $sta['input']));
//  $rows = uploadRows($filename);
  
  $total = 0;

  if (@$rows) foreach ($rows as $i => $row) {
    if ($i == 0 and !strpos(@$row[0], '@')) {w\say(t('The header row (line 1) will be ignored.')); continue;}

    $erSubs = ray('did line row', $did, $i + 1, join(' | ', $row));
    if (count($row) < 3) return say(t('Incomplete row|in csv'), $erSubs, 'file');
    @list ($account, $email, $amt, $desc) = $row; // desc is optional
    if (!$account or u\starts(strtoupper($account), t('TOTAL'))) break; // should never happen unless user has a total line
    if ($err = u\badAmount($amt, '>=0')) return say("$err|in csv", $erSubs, 'file');
    if (!$amt) {w\say(t('The amount for this account is zero so it will not be %did:|in csv'), $erSubs); continue;}
//    if (!($account or $email) or !$a = r\acct($account ?: $email)) return say(t('Bad account|in csv'), $erSubs, 'file');
    if (!$account or !$a = r\acct($account)) return say(t('Bad account|in csv'), $erSubs, 'file');
    if (!$a->ok) return say(t('This account is not yet activated:|in csv'), $erSubs, 'file');
    $a->setBit(B_CONFIRMED); // count this as equivalent to an invitation to the person
    if (!$email = trim(strtolower($email)) or $a->email != $email) return say(t('Bad email|in csv'), $erSubs, 'file');
    $txs[] = [$a->id, $email, $amt, $desc ? strtr($desc, $map) : $dftDesc]; // someday we wlll allow paying and invoicing non-members by email and name
    $total += $amt;
  }      

  if (!@$txs) return say('nothing to do', 'file');
  
  if (!$inv) {
    if ($shortfall = $mya->shortfall(FOR_GOODS, $total)) return say('short to', ray('short', u\fmtAmt($shortfall)), 'file');
  }  
  
  foreach ($txs as $one) {
    list ($uid, $email, $amt, $desc) = $one;
    $a2 = r\acct($uid);
    list ($msg, $subs) = $inv 
    ? be\invoice($mya, $a2, $amt, FOR_GOODS, $desc)
    : be\transfer('payment', $mya, $a2, $amt, FOR_GOODS, $desc);
    if (!@$subs['success']) $err = TRUE;
    if ($inv) {
      $msg = str_replace('|balance unchanged', '', $msg); // otherwise this gets tiresome, repeated over and over
      if (!$err and !$a2->ok) $msg .= '|' . t('<b class="loud">NOTE: </b>%otherName will need to finish opening a %PROJECT account.');
    }
    say($msg, $subs);
  }
  
  if (!@$err) {
    if (is_callable($onSuccess)) $onSuccess($total);
    return r\go('/history', t('txs upload done', 'did total count', $did, u\fmtAmt($total), count($txs)));
  }
}

/**
 * Upload a spreadsheet of payments.
 */
function formPayments($form, &$sta) {
  global $base_url;
  global $mya;

  $title = item(t('Payments Upload'));
  $instructions = csvUploadInstructions(t('pay'), t('payment'));
  $subtext = item("<ul id=\"instructions\">$instructions</ul>");

  $file = fileFld();
  $submit = submit('Upload and Pay');

  return labeled(compact(ray('title subtext file submit')));
}

function formPayments_validate($form, &$sta) {
  return formInvoiceUpload_validate($form, $sta);
}

function formPayments_submit($form, &$sta) {
  $args = ray('inv dftDesc did map onSuccess', FALSE, t('payment'), t('paid'), [], NULL);
  return formInvoiceUpload_submit($form, $sta, $args);
}
  
/**
 * Upload payroll spreadsheet to create partial payments in rCredits.
 */
function formPayroll($form, &$sta) {
  global $base_url;
  global $mya;
  
  $title = item(t('Payroll Upload'));
  $instructions = csvUploadInstructions(t('pay'), t('labor: <startdate> to <enddate>'));

  $subtext = item(t(<<<EOF
  <ul id="instructions">
  <li><b>Ask your participating employees</b> how many %RCREDITS they can receive each pay period, without having to cash them out (how many can they easily spend in two weeks, for example). Or pay them entirely in %RCREDITS (your choice*).</li>
  <li><b>In your accounting software</b>, create an after-tax payroll deduction called "%PROJECT" (you need do this only once). Set the %PROJECT deduction for each employee to the amount of %RCREDITS they asked to be paid. Use that same amount for the employee's account line in the spreadsheet you will create, as described below. Run payroll, to pay the US Dollar part of their wages, calculate taxes, etc.</li>
%instructions
  </ul>
  <p><b>* NOTE:</b> You cannot require an employee to participate in %PROJECT. But if they ARE a %PROJECT member, they have agreed to accept %RCREDITS (without limit) as payment for their goods and services.</p>
EOF
  , '_a _instructions', w\atag('/settings/relations'), $instructions));

  $file = fileFld();
  if ($end = $mya->payrollEnd) { // get date(s) from previous payroll
    $start = strtotime('tomorrow', $end); // start the day after previous period ends
    $end = $start + ($end - $mya->payrollStart); // same period length as last time
  } else {
    $end = $fri = strtotime('next Friday', strtotime('-3 days'));
    $start = $fri - 13 * DAY_SECS + HOUR_SECS; // + HOUR_SECS is in case of daylight time
  }
  $startDate = textFld(t('Starting:'), [t('Pay period start')], required(u\fmtDate($start, TRUE)));
  $endDate = textFld(t('Ending:'), [t('Pay period end')], required(u\fmtDate($end, TRUE)));
  $submit = submit('Upload and Pay');

  return labeled(compact(ray('title subtext startDate endDate file submit')));
}

function formPayroll_validate($form, &$sta) {
  extract(just('startDate endDate', $sta['input']));
  list ($min, $max) = [strtotime('-2 months'), strtotime('+7 days')];
  foreach (['startDate', 'endDate'] as $k) if ($err = u\badDate($$k, $min, $max)) return sayFieldErr($err, $k);
  return formInvoiceUpload_validate($form, $sta);
}

//define('R_NOREWARD', '<noreward>'); // "no rewards" flag in description

function formPayroll_submit($form, &$sta) {
  global $startDate, $endDate;
  extract(just('startDate endDate', $sta['input']));

  $inv = FALSE;
  $did = t('paid');
  $map = ray('<startdate> <enddate>', $startDate, $endDate);
  $dftDesc = strtr(t('labor: <startdate> to <enddate>'), $map);
  $onSuccess = function ($total) {
    global $startDate, $endDate, $mya;
    $mya->update('payrollStart payrollEnd', u\s2t($startDate), u\s2t($endDate));
  };
  return formInvoiceUpload_submit($form, $sta, compact(ray('inv dftDesc did map onSuccess')));
}
/*
  extract(just('startDate endDate rows', $sta['input']));
  global $mya;

  $desc0 = t('labor: ') . $startDate . t(' to ') . $endDate;
  $map = ['<startdate>' => $startDate, '<enddate>' => $endDate, R_NOREWARD => ''];
  $total = 0;

  if (@$rows) foreach ($rows as $i => $row) {
    $erSubs = ['line' => $i + 1]; // for error messages
    if (count($row) < 2) say(t('Empty row at line %line.', $ersubs));
    @list ($employee, $amt, $desc) = $row; // desc is optional
    if (!$employee or u\starts(strtoupper($employee), t('TOTAL'))) break; // should never happen unless user has a total line
    if ($err = u\badAmount($amt, '>0')) return say('bad payroll csv|' . $err, $erSubs, 'payroll');
    if (!@$employee) return say('bad payroll csv|' . t('Missing employee name.'), $erSubs, 'payroll');
    if (!$uid = r\worksForUs($employee, NULL, TRUE)) return say('bad payroll employee', $erSubs + compact('employee'), 'payroll');
    $goods = strpos($desc, R_NOREWARD) !== FALSE ? FOR_NONGOODS : FOR_GOODS;
    $toPay[] = [$uid, $amt, $desc ? strtr($desc, $map) : $desc0, $goods];
    $total += $amt;
    $employee = $amt = '';
  }      

  if (!@$toPay) return say('empty payroll', 'payroll');
  if ($shortfall = $mya->shortfall(FOR_GOODS, $total)) return say('short to', ray('short', u\fmtAmt($shortfall)), 'payroll');
  
  foreach ($toPay as $one) {
    list ($uid, $amt, $desc, $goods) = $one;
    list ($msg, $subs) = be\transfer('payment', $mya, r\acct($uid), $amt, $goods, $desc);
    say($msg, $subs);
    if (!@$subs['success']) $err = TRUE;
  }
  
  if (!@$err) {
    $mya->update('payrollStart payrollEnd', u\s2t($startDate), u\s2t($endDate));
    return r\go('history', t('txs upload done', 'did total count', t('paid'), u\fmtAmt($total), count($toPay)));
  }
}
*/

function csvUploadInstructions($do, $dftDesc) {
  return t(<<<EOF
  <li><b>Create a 4-column spreadsheet</b> with or without headers, with this information in each row, in this order (any additional columns will be ignored):
    <ol>
    <li>The %PROJECT account ID to %do.</li>
    <li>The account's email address.</li>
    <li>The amount to %do that account.</li>
    <li>A short description of what the transaction is for (like "groceries" or "inv #7"). If you omit this, the description will be "%dftDesc".</li>
    </ol>
  </li>
  <li><b>Save</b> the spreadsheet as a CSV file.</li>
  <li><b>Upload</b> the CSV file here, to automatically %do that amount of %RCREDITS to each listed account.</li>
EOF
  , compact(ray('do dftDesc')));
}

function formMenu($form, &$sta) {return array('title' => item('Menu'));}

/**
 * Present an empty slate for status and error messages.
 * @param mixed $form: usually unused (but required by Drupal); if string, output it.
 * @param string $args: say=1 (if called from doSay) or field=<field>&msg=<msg> (or empty)
 */
function formEmpty($form, &$sta = '', $args = '') {
  if ($form and !is_array($form)) w\say(plain($form));
  extract(just('say field msg', $args));
  
  $title = item(t('Miscellaneous')); // this is suppressed with CSS
  if (@$msg) w\say(plain($msg), @$field);
  if (@$say) $subtext = item(t('<p>To protect your account, <%span>no sign-in was required</span> for this action. To sign in safely, always go to %CG_DOMAIN.</p><p>You may now close this browser page.</p>', '_span', 'span class="loud"'));
///   FAILS :(  if ($doSay == 'test') $testMessages = item(print_r(\drupal_get_messages(), 1));
  return labeled(compact(ray('title testMessages subtext')));
}

/**
 * Show an error or success message on the Pay-with-CG page.
 * @param string $msg: message to show
 * @param mixed $info: '' or 'err' (in which case show just the message) or assoc of parameters (allows retry)
 */
function buySay($msg, $info) {
  list ($code, $info) = is_array($info) ? [r\makeDoCode($info), 'err'] : ['done', $info];
  return r\go("pay-with-cg/$code", $msg, $info);
}

/**
 * Pay with Common Good Credits, arriving from some other site or from rDo().
 * @param string $doCode: the encrypted code from rDo, if any, or 'done'
 */
function formBuy($form, &$sta, $doCode = '') {
  if ($doCode == 'done') return []; // shows result message and nothing else
  
  $required = 'company code';
  $fields = $required . ' item amount name account zip verb return cancel err';
//  $_POST = ray($fields, 'Cool Item #1 with a really REALLY long description', '12.34', 'NEWZZC', 'cCode', 'Pay', 'http://google.com', '01330', 'wspademan@gmail.com');
  extract($args = just($fields, $doCode ? r\doCode($doCode) : (@$sta['input'] ?: ($_POST ?: $_GET))));
  foreach (ray($required) as $k) if (!@$$k) return r\go('empty', t('missing field', 'field', $k), 'err'); // handle hackers gracefully
  if (!u\isQid(@$company) or !$co = r\acct($company) or !$co->co) return r\go('empty', 'bad account id', 'err');
  if ($code != $co->emailCode) { // not testing
    if (!$cocode = substr(r\decry('P', $code), 1) or $cocode != $co->emailCode) return r\go('empty', 'bad co code', 'err');
  } else $tst = t('<span class="loud">TESTING</span>');
  
  if ($amount0 = @$amount) {
    if ($err = u\badAmount($amount, '>0')) return r\go('empty', $err, 'err');
    $args['amount'] = $amount; // in case format got fixed
    $amount = u\fmtAmt($amount);
  } else $amount = '$' . w\rendA('amount', w\textFld('', '', w\required()));
//  if (@$api and !@$request) return r\go('empty', t('You must specify the request parameter, with the api parameter.'), 'err');
  u\setDft($request, $code);

//  if ($code != @$co->data['cardCode']) return r\go('', 'bad account ID', 'zot');
  $account = trim(strpos($account, '@') ? strtolower($account) : strtoupper($account));
  if ($a = r\acct($account) and (!u\similar($a->fullName, $name) or !u\starts($zip, $a->zip))) $a = NULL;
  $subtext = w\item($a 
  ? t('<h4>Hello %name!</h4><small>(Account %acct)</small>', 'name acct', $a->bestName, $a->mainQid) . @$tst
  : (t('<h4>Hello UNKNOWN member</h4>') . (@$tst ?: t('<span class="loud">Make sure this is really %PROJECT!</span>')))
  );
  list ($name, $pass) = w\signinFlds($a ? $a->mainQid : '');

//  if (($a = r\acct()) ? !u\similarEmail($a->email, $email) : (!$a = r\acct($email))) return r\go('', t('bad buy info', ray('thing', t('email'))), 'err'); // signed in
//  if (!in_array(strtolower($cust_name), array(strtolower($a->fullName), strtolower($a->legalName)))) return r\go('', t('bad buy info', ray('thing', t('name'))), 'zot');

// NO (return omits domain)  if (!\valid_url($return, TRUE)) return r\go('', 'bad url', 'zot');

  $verbs = ray(t('Donate, Donate, Pay'));
  $verb = in_array(ucwords(@$verb), $verbs) ? ucwords($verb) : t('Pay');
  if (@$item) $item = t('for ') . $item;
  $payment = item(t('%amount to %who<br>%what', '_amount who what', $amount, @$co->fullName ?: t('co'), @$item), "$verb:");
//  if (@$zip and substr($zip, 0, 5) != substr($a->zip, 0, 3)) $answer = textFld(t('Answer:'), $a->question, required());


  $hid = hidFld(plain(serialize($args)));
//  $option = $a ? t('OR <%a>email me an invoice</a>', '_a', 'a') : t('OR <%a>signup</a>', '_a', w\atag('/signup'));
  $option = $a ? '' : t('OR <%a>signup</a>', '_a', w\atag('/signup'));
  $submit = submit($verb, '', 'md', w\suffix($option));
  focusOn($amount0 ? 'name' : 'amount');
  
  return labeled(compact(ray('title subtext payment name pass hid submit')));
}

function formBuy_validate($form, &$sta) {
  extract(just('name hid amount', $sta['input']));
  if (isset($amount) and $err = u\badAmount($sta['input']['amount'], '>0')) return say($err, 'amount'); // fix amount
  if (!formSignin_validate($form, $sta)) return buySay('', unserialize(unplain($hid)) + ['account' => $name]);
}

function formBuy_submit($form, &$sta) {
  extract(just('hid name amount', $sta['input']));
  $account = $name;
  extract(just('name amount item company cancel return api request', $args = unserialize(unplain($hid))));
  
  list ($a, $co) = [r\acct($account), r\acct($company)];
  
  // check for op not 'submit' here, to send an invoice
  list ($index, $subs) = be\transfer('payment', $a, $co, $amount, FOR_GOODS, @$item ?: t('donation'));
  $msg = tr($index, $subs);
  if ($ok = @$subs['success']) $msg = t('<h3>Success!</h3>') . $msg;
//  . t('<br><br><%a>Click here</a> to return to the %companyName website.', '_a companyName', atag($return), $co->fullName);
  if (@$api) u\post($api, ray('request ok msg', $request, (int) $ok, $msg));
  foreach (ray('return cancel') as $k) if (@$$k) $$k = tr($$k, $args + compact(ray('msg ok')));
  if ($ok and @$return) return r\go($return);
  if (!$ok and @$cancel) return r\go($cancel);
  return buySay($msg, $ok ? '' : 'err');
}

/**
 * Return a one-use auth code
 */
function authcode() {
  extract($args = just('company cocode', $_GET));
  if (!@$cocode or !u\isQid(@$company) or !($co = r\acct($company)) or !$co->co or $co->emailCode != $cocode) exit(t('bad company account ID or cocode'));
  $now = time();
  exit(u\cry('P', u\randomString(1) . $cocode));
}

/**
 * Pay or deny an invoice, possibly by clicking a link without signing in (from rDo).
 * If no user is signed in, $args must include the do code (to prevent mischief)
 * @param mixed $args: array of paramaters (from rDo) or invoice number (if signed in):
 *   int nvid: invoice number
 *   bool toMe: is the invoice for me to pay (or deny)? (FALSE if it is FROM me)
 *   string ret: URL to return to
 *   bool webpay: <this is confirmation after clicking a "Pay with Common Good" button>
 */
function formHandleInvoice($form, &$sta, $args = '') {
  global $mya;
  extract(just('nvid ret code toMe webpay', $args));
  $ret = @$ret ? @u\deurlify($ret) : 'empty/1';
  
  if ($err = r\badUnpaidInv(@$nvid, $inv)) return r\go($ret, $err, 'ERR');

  extract(just('nvid amount payer payee purpose created data', $inv));
  if (@$code) {
    if (!$info = r\doCode($code)) return hack(t('fake doCode in handleInvoice'));
    if (@$mya and $payer != $mya->id) w\signout('no redirect'); // make sure we're signed out of any possibly different acct
  } elseif (!$mya) {
    return hack(t('attempt to handle invoice not signed in'));
  } else if (!in_array($mya->id, [$payer, $payee]) or ($mya->id == $payer xor $toMe)) return hack(t('bad person in invoice payment'));

  $subs = ray('amount what', u\fmtAmt($amount), $purpose);
  
  if (@$toMe) {
    $a = r\acct($payer);
    $title = item(t('Confirm Payment'));
    $subs += ray('who', r\acct($payee)->fullName);

    if ($a->hasBank) {
      $_warning = t('<p><b>IMPORTANT:</b> To avoid insufficient funds charges, be sure there are enough funds in your bank account to cover any automatic transfer that may result from approving payment of this invoice (and future invoices, if you check the "Auto" box).</p>');
      if (!@$webpay) $always = boxFld('always', t('Auto:'), t('Pay all invoices from %who automatically.', $subs), 0);
    } elseif ($a->balance <= 0) {
      $_warning = t('You cannot approved this invoice until you have money in your account. Sign in at %CG_DOMAIN and click "Bank" on the menu.');
      $disabled = w\disabled();
    } else $_warning = '';

    $subtext = item(t('<p>Pay %amount to %who for %what.</p>%warning', $subs + compact('_warning')));
    $link = '&nbsp; &nbsp;' . w\lnk('', t('dispute'), ray('id', 'dispute-it'));
    $pay = submit(t('Pay Now'), '', '', w\suffix($link) + (@$disabled ?: []));
    
    $whyNot = textFld(t('Reason for dispute:'));
    $deny = submit(t('Dispute'));
    $denySet = fieldSet('denySet', compact('whyNot', 'deny'), BARE);
    $toMe = hidFld(TRUE);
  } else { // confirming delete by originator
    $title = item(t('Delete?'));
    $subs += ray('who', r\acct($payer)->fullName);
    $subtext = item(t('Delete invoice charging %who %amount for %what?', $subs));
    $delete = submit(t('Delete'));
    $cancel = submit(t('Cancel'));
    $delSet = fieldSet('delSet', compact('delete', 'cancel'), BARE); // separate it from subtext
  }
  
  $hid = w\hidFlds(compact('ret') + $inv);
  $form['#validate'] = array('rCredits\\Web\\formHandleInvoice_validate');
  $form['#submit'] = array('rCredits\\Web\\formHandleInvoice_submit');
  w\jsx('dispute');
  
  return labeled(compact(ray('title subtext always pay dispute denySet delSet toMe hid')) + $form);
}

function formHandleInvoice_validate($form, &$sta) {
  extract(just('whyNot toMe', $sta['input']));
  $deny = (op($sta) == 'deny');
  if (@$toMe and $deny and !$whyNot) return say('say why not', 'whyNot');
}

function formHandleInvoice_submit($form, &$sta) {
  $hidFlds = 'ret nvid amount payer payee purpose created data';
  extract(just('hid whyNot toMe always ' . $hidFlds, $sta['input'])); // hidFlds here is for testing
  extract(just($hidFlds, w\hidFlds($hid)));

  list ($fromA, $toA) = [r\acct($payer), r\acct($payee)];
  $payeeName = $toA->fullName;
  $subs = ray('amount payerName payeeName created purpose reason', u\fmtAmt($amount), $fromA->fullName, $payeeName, u\fmtDate($created), $purpose, @$whyNot);

  $op = op($sta);
  $ok = TRUE; // messages default to status, rather than error

  if ($op == 'pay' and !@$whyNot) {
    $short = round($amount - $fromA->avail(), 2);
    if ($fromA->ok and $short <= 0) {
      $ok = be\payInvoice($nvid, $msg);
    } else {
      db\update('r_invoices', ray('nvid status', $nvid, TX_APPROVED), 'nvid');
      if ($fromA->ok) {
        $msg = $fromA->hasBank ? 'expect a transfer' : 'when funded';
        $msg = t('short invoice', ray('short payeeName', u\fmtAmt($short), $payeeName)) . "|$msg";
      } else $msg = t('finish signup|when funded');
    }
    
    if (@$always) {
      if ($reid = r\relation('reid', $payee, $payer)) {
        db\update('r_relations', ray('reid isCustomer', $reid, AUTOPAY_FLAG), 'reid');
      } else $toA->newRelation(ray('other isCustomer', $payer, AUTOPAY_FLAG));
      $msg .= '|' . t('auto pay on', compact('payeeName'));
    }
  } elseif ($op == 'delete') {
    db\del('r_invoices', $nvid);
    r\notify($payer, 'invoice withdrawn', $subs);
    $msg = 'invoice delete done';
  } elseif ($op == 'deny' or @$whyNot) {
    $data = serialize(compact('whyNot') + (@$data ? unserialize($data) : []));
//    db\q('UPDATE r_invoices SET status=:TX_DENIED, data=:data WHERE nvid=:nvid', compact('nvid', 'data'));
    db\update('r_invoices', ray('status data nvid', TX_DENIED, $data, $nvid), 'nvid');
    r\notify($payee, 'invoice denied', $subs);
    $msg = 'denial done';
  } else $msg = ''; // default: canceled

//  if ($toMe and !r\acct()) return r\go('do/code=' . ($msg ?: 'nothing done', $ok ? 'status' : 'error');
  return r\go($ret, $msg ?: 'nothing done', $ok ? '' : 'ERR');
}

/**
 * Exchange USD for rCredits or vice-versa (the Bank tab)
 */
function formGet($form, &$sta, $args = '') {
  global $mya;
  global $base_url;
  
  if (!$mya->hasBank) return r\go('/settings/connect');
  
  \drupal_page_is_cacheable(false); // suppress caching, so buttons work right
  $myid = $mya->id;
  $jid = $mya->jid ?: 0;
  extract(just('cancel', $args));
  if ($txid = @$cancel) {
    db\del('r_usd', $txid);
    say('transfer canceled', compact('txid'));
    r\tellAdmin("canceled exchange #$txid");
  }
  $title = item(t('Exchange US Dollars for %RCREDITS'));
  $subtext = item(t('<p>Exchange US Dollars from your connected bank account in exchange for %RCREDITS. Or vice versa. It may take several business days for your bank to send the funds. Funds going TO your bank account generally arrive within one business day.</p><p>To refill your %PROJECT Account automatically (or not), as needed, adjust your "refills" setting on the <%a>Banking</a> settings page.</p>', '_a', w\atag('/settings/connect')) . t('note|ach warning'));

//  $minimum = textFld(t('Minimum:'), t('prompt min'), dft(u\fmtAmt(!$mya->prefsSet ? $mya->minimum : R_MINR_DEFAULT, 's')));
//  $toSpend = u\fmtAmt($mya->avail(FOR_GOODS));
//  $toSpend = u\fmtAmt($mya->r - $mya->committed);
  $balance = u\fmtAmt($mya->balDpy);
  $credit = u\fmtAmt(-$mya->floor);
  $waiting0 = $mya->waitingFromBank();

  if (!db\exists('r_usd', 'payee IN (:myid,:jid) AND amount<0 AND created>:dayAgo', ray('myid jid dayAgo', $myid, $jid, strtotime('-1 day')))) { // limit to one withdrawal request per 24 hours
    $avail = $mya->avail(FOR_USD); // drawing from connected accounts not allowed
    foreach (ray(R_EXCHANGE_LIMITS) as $days => $limit) {
      $sofar = $days == 1 ? 0 : db\lookup('-SUM(amount)', 'r_usd', 'payee=:myid AND amount<0 AND created>:date', ray('myid date', $myid, strtotime("-$days days")));
      $avail = min($avail, $limit - $sofar);
    }
  } else $avail = 0;

  $cashoutable = u\fmtAmt(max(0, min($mya->balDpy, $avail)));
  if ($waiting = u\fmtAmt(abs($waiting0))) {
    $where = 'payee IN (:myid, :jid) AND completed=0 AND deposit=0 ORDER BY txid DESC';
    if ($rec = db\lookup('amount, txid', 'r_usd', $where, compact('myid', 'jid'))) {
      extract($rec);
      $text = t('Cancel') . (($amount == $waiting0) ? '' : (' ' . u\fmtAmt(abs($amount)) . t(' request')));
      $link = " <a class=\"buttino\" href=\"$base_url/get/cancel=$txid\">$text</a>";
    }
  }
  $way = $waiting0 < 0 ? t('to') : ('from');
  $waiting = item($waiting == '$0' ? t('You have no pending exchange requests.') : (t('You have total pending exchange requests of %waiting %way your bank account.', compact('waiting', 'way')) . @$link), t('Pending:')); // amount already requested (if any)
  $avail = hidFld($avail);
  $credit = -$mya->floor;
  $balances = item(t('balances', compact(ray('balance credit cashoutable'))), t('Balance:'));
  $amount = textFld(t('Amount $'), t('Transfer how much?') . ($mya->cAdmin ? t(' (no limit for admin)') : ''));
  $get = submit(BARE . t('From Bank'));
//  $fromBank = fld('checkbox', t('Automate:'), t('(recommended) Refill my %PROJECT Account from my bank account automatically, as needed.'), dft(!$mya->prefsSet ? $mya->can(B_FROM_BANK) : TRUE));
  
//  $maximum = textFld(t('Maximum:'), t('prompt max'), dft(u\fmtAmt(!$mya->prefsSet ? $mya->maximum : R_MAXR_DEFAULT, 's')));
//  $excess = textFld(t('Excess'), '', dft(u\fmtAmt($mya->overMax(), 's')));
//  $toBank = fld('checkbox', t('Automate:'), t('Transfer any excess to my bank account automatically every few days.'), dft(!$mya->prefsSet ? $mya->can(B_TO_BANK) : TRUE));
  $put = submit(BARE . t('To Bank'));
  $actions = fieldSet('actions', compact('get', 'put'));

  return labeled(compact(ray('title subtext waiting balances amount actions avail')));
}
  
function formGet_validate($form, &$sta) {
  global $mya;
  if ($err = amtErr('amount', $sta)) return say($err, 'amount'); // negative caught by < R_ACHMIN below
  extract(just('amount avail', $sta['input']));
  if (!$mya->cAdmin and $amount < R_ACHMIN) return say('bank too little', 'amount');
// (this is unnecessary)  if ($amount > R_MAX_DAILY_EXCHANGE) return say('max daily usd', 'amount');
  if (op($sta) == 'get') return;
  
  if ($amount > ($mya->cAdmin ? round($mya->balance, 2) : $avail)) {
    $max = u\fmtAmt($avail);
    $extra = $mya->cttyRewardy ? '|short cash help' : '';
    return say('short put' . $extra, compact('max'), 'amount');
  }
  if (round($mya->balance - $amount, 2) < $mya->minimum and $mya->refill) return say('change min first', 'amount');
}
  
function formGet_submit($form, &$sta) {
  global $mya;
//  $us = new r\usd($mya = r\acct());
  extract(just('amount', $sta['input']));

  list ($action, $amount) = op($sta) == 'put' ? [t('deposit to'), -$amount] : [t('draw from'), $amount];
  
  $checkNum = $mya->bank($amount, $completed);
  if ($amount > 0) {
    $extra = '|bank tx number' . ($completed ? '|available now' : '');
  } else $extra = '';
  $amount = u\fmtAmt(abs(@$amount));
  w\say('banked' . $extra, $subs = compact(ray('action amount checkNum')));
//  r\tellAdmin('banked' . $extra, $subs);
}

/**
 * Certify that a business is indeed a Common Good participant.
 */
function formCgBiz($form, &$sta, $id) {
  if (!@$id or !$a = r\acct(strtoupper($id)) or !$a->ok) return r\go('', t('That is not a %PROJECT Business.'));
  r\go('member/' . $a->name, t('<big><b>%fullName</b> is a %PROJECT Business since %activated.</big> For more information about Common Good, <%a>click here</a>.', 'fullName activated _a', $a->fullName, u\fmtDate($a->activated), w\atag(r\promoLink(''))));
}

/**
 * Create a joint account with a new or existing member.
 */
function formPrejoin($form, &$sta) {
  $title = w\item(t('Create a Joint Account'));
  $subtext = w\item(t('If the person you want to join with does not yet have a %PROJECT account, you will need to go through most of the same steps as setting up a separate account for them. We will guide you through those steps.'));
  $old = boolFld(t('Already member?'), t('Is the person you want to join your account with already a %PROJECT member?'), TRUE);
  $account = textFld(t('Account:'), [t('Other Account ID'), t('Type the account ID of the account you want to join with.')]);
  $submit = w\submit(t('Go'));

  jsx('prejoint');
  
  return labeled(compact(ray('title subtext old account submit')));
}

function formPrejoin_validate($form, &$sta) {
  global $mya;
  if ($mya->jid or $mya->co) return w\hack(t('prejoin to already joined or co'));
  
  extract(just('old account', $sta['input']));
  if ($old) {
    if (!$account) return w\say(t('You must give the other person\'s account ID.'), 'account');
    if (!$oldA = r\acct(trim(strtoupper($account))) or !$oldA->ok) return w\say('not an account', 'account');
    if ($oldA->co) return w\say(t('You cannot join a company account.'), 'account');
    $sta['input']['account'] = $oldA->id;
  }
}

function formPrejoin_submit($form, &$sta) {
  global $mya;
  extract(just('old account', $sta['input']));
  if (!$old) return r\go('signup/joint=1');

  if (!$reid = r\relation('reid', $mya->id, $account)) $reid = $mya->newRelation(ray('other permission', $account, r\perm(B_JOINT)));
  $msg = r\setJoin($reid, TRUE);
  return r\go('', $msg);
}

//function toggler($sel) {return w\attrib(['onclick' => "$('$sel').toggle(this.checked)"]);}

/**
 * Prepare to open a company account.
 * This form creates an invite and redirects to signup, using that code.
 * @see also: formAgent
 */
function formSignupCo($form, &$sta) {
  $a = r\agent();
  if (!$a->cAdmin and !$a->can(B_MEMBER)) return r\go('', 'members only', 'ERR');
  
  w\focusOn('fullname');
  //t('an additional personal account that I will manage'), 
  $title = item('Open a Company Account');
  $relations = array(t('a company and I own at least 10% of it'), t('a company or organization whose accounts I manage,<br>but I am not a 10%-or-more owner'), t('neither of the above') . ($a->cAdmin ? '' : t(' (send an <%a>invitation</a> instead!)', '_a', w\atag('/community/invite'))));
  $relationPrompt = item(t('What is the new account for?'));
  $relation = radiosFld(t(''), '', dft(2), $relations);
//  $flows = array(t('neither way (recommended in most cases)'), t('Your personal account can cover the new account\'s debts and overdrafts.'), t('The new account can cover your personal account\'s debts and overdrafts.'), t('both ways'));
//  $flowPrompt = item(t('Which way can the credit flow, when you need it to?'));
//  $flow = radiosFld(t(''), '', required(0), $flows);
  $flow = hidFld(0);
  $submit = submit(t('Open Account'));
  return labeled(compact(ray('title relationPrompt relation flowPrompt flow submit')));
}

function formSignupCo_validate($form, &$sta) {
  extract(just('relation flow', $sta['input']));
  if ($relation == 2) say('insufficient relation', 'relation');
}

function formSignupCo_submit($form, &$sta) {
  global $signupArgs; // for testing
  $a = r\agent();
//  if ($a->id == 1) $a = r\acct(R_ADMIN_QID); // use admin's personal account

  extract(just('relation flow', $sta['input']));

  $employeeOk = $relation < 2; // let signupCo info override this
  $personal = ($relation > 1);
  if (!$personal) {
    if ($a->cAdmin) $a = r\acct(); // let admins open company accounts on behalf of others
    extract(just('company companyPhone isOwner employeeOk', $a->signupCo)); // predict co name
    if (!findCompany(@$company, @$companyPhone)) list ($fullName, $phone) = [@$company, @$companyPhone];
  }
  $isOwner = $relation == 0; // don't let signupCo info influence this

  $helper = $a->mainQid;
  $code = r\invite($a->email, $a->id);
  $flow += 0;

  $signupArgs = compact(ray('code personal isOwner employeeOk flow helper fullName phone'));
  $args = http_build_query($signupArgs);
///  debug($args); return;
  if ($personal) \session_destroy();
  r\go('signup/' . $args);
}

/**
 * Modify the user registration form.
 * @param string $args: if not empty, 
 *   a urlencoded assoc (from an email invitation or the "Create a Company Account" button) OR
 *   an assoc gleaned from POSTed parameters (for combined signup with Coop Power's heating fuel program, for example)
 *
 *   code: the invitation code (or a friend's name with zip in parens)
 *   personal: opening a personal account (default TRUE)
 *   fullName: the likely name of the account to create
 *   phone: the account's likely phone number
 *   isOwner: is the inviter an owner (these last four params are processed by suCreatorRelation())
 *   employeeOk: is the inviter an employee
 *   flow: which way credit can flow (be drawn)
 *   helper: uid of account creating this one -- non null (same as $inviter) means created with formSignupCo
 */
function formSignup($form, &$sta, $args = '') {
  if (!$args) $args = @$_POST ?: basename($_SERVER['REQUEST_URI']); // because menu_execute_active_handler fails

  $contactDefaults = 'phone address city zip address2 city2 zip2 state2 postalAddr partner partnerCode customer source';
  extract(just('joint reid inviter code personal fullName state email helper ' . $contactDefaults, $args));
  extract(just('hidCountry hidState', $sta['input']));

  if (@$reid) { // continuing signup of a partner's customer
    if (u\test()) $reid = f('t.uid', $reid);
    if ($args2 = w\continuePartnerSignup($reid, @$customer)) extract($args = $args2);
  } elseif (@$customer and @$partner and @$partnerCode) {
    $myid = w\partnerSignup($args); // info passed from partner signup
  } elseif (@$joint and $a = r\acct() and $a->canManage) {
    if (!$a->co) $myid = w\jointSignup(); else return r\go('', t('A company cannot have a joint account.'), 'err');
  }
  if (u\test() and is_array(@$myid)) return; // array means returned r\go
    
  $myid = w\hidFld($myid0 = @$myid);
  
  if (@$personal and r\signedIn()) return formEmpty('must be signed out');
  $sta['no_cache'] = TRUE; // otherwise the javascript-populated dropdowns get lost
  u\setDft($personal, TRUE);

  $title = item($personal 
  ? (@$joint ? t('Create a Partner Account Joined to Yours') : t('Open a Personal %PROJECT Account'))
  : t('Open a Company Account'));
  
  if (!@$helper) { // no need to clarify if user clicked the "Open a Company Account" button
    $helper = @$partner ?: 0;
    $clarify = $personal ? t('To open a company account, use the "Open a Company Account" button after your personal account is approved.') : t('To open another personal account, send an Invitation (click the Invite tab).');
//    $onclick = $onmouseover = 
    $forother = $personal ? t('open a company account instead') : t('open a personal account instead');
    $forother = item("[<a class=\"nospin\">$forother</a>]");
  }
    
  if (!@$code) $code = 'self ()'; // can't actually tell whether this is allowable, because we don't yet know which community

  if ($i = strpos(@$code, '(')) { // self-invitation with friend's name and zipcode
    $inviterName = substr($code, 0, $i);
    if (!@$partner) $notes = hidFld("knows: $code");
    $code = r\acct(1)->iCardCode(IBY_SELF); // inviter is admin for now; invitation() will set $iCode=IBY_SELF
  }
    
  $inviteOk = w\invitation(@$code, '', $inviter, $iCode, $err);
  if (@$inviter and $iCode != IBY_SELF) {
    $ia = r\acct($inviter);
    $inviterEmail = plain($ia->email);
    $inviterName = plain($ia->fullName);
  }

  $count = $personal ? PERSONAL_STEP_COUNT : COMPANY_STEP_COUNT;
  $proxyInfo = w\lnk('help/proxies', t('more about proxies'), w\away());
  $proxyInfo = "<small>[$proxyInfo]</small>";
  $proxyInfo = w\btn('/help/proxies', t('more about proxies'), 'default', 'xs', w\away());
  
  $subtext = item(@$joint ? t('From here on, "you" means the person for whom you are creating a new account, which will be joined to an existing account (creating a joint account).') : t(<<<EOF
<p>Opening a %PROJECT Account takes 10-15 minutes and is very much like opening an online bank account. For example, you will be asked for your social security number or tax ID.</p>

<p>After this page we will guide you through <%b>several short steps</b>. Here are some highlights:</p>
<ul>
  <li>You will be asked to <b>sign</b> the short but ESSENTIAL %PROJECT Agreement.</li>
  <li>You will need to upload a <b>photo</b> for your %PROJECT Card. Your photo will be encrypted and will not be visible to other members (unless you show it to them).</li>
  <li>You will be invited (but not required) to make a <b>donation</b> <i>of any size</i> to support the project. You decide how much (%PROJECT is a nonprofit).</li>
  <li>Your name and city will be visible to other members who may wish to select you as their <b>proxy</b> in the community's democratic process. %proxyInfo</li>
  <li>You will need your <b>bank</b> account information if you choose to connect it. Connecting a bank account makes it easier to transfer funds into and out of your %PROJECT account.</li>
</ul>
<p>If you need help, please <%a>ask</a> (our contact information is at the bottom of every page).</p>
EOF
  , '_b _a count _proxyInfo', 'b class="loud"', w\emailtag(CGF_EMAIL, t('signup help')), $count, $proxyInfo));

//Opening a %PROJECT Account is very much like opening an online bank account. After this long signup page there are <%b>some short steps</b> we will guide you through. If you need help, please don't hesitate to ask (<%a>click here to send us an email</a>).
  
  if ($personal) {
    $acctType = hidFld(R_PERSONAL);
//    $pin = passFld(t('PIN:'), [t('Choose a PIN (any 4 digits)'), t('Your security code for online purchases.')]); // first time logging in, get PIN
    $calling = textFld(t('Life Calling:'), [t('Your calling in life (optional)'), t('One of the main purposes of %PROJECT is to provide you the opportunity to do what you feel called to do in life. What would bring you joy to do, to earn %RCREDITS (maybe something you\'re not doing yet)? What might you have to offer?')]);
    $companyOptions = array(
      'isOwner' => t('owner'),
      'employeeOk' => t('employee'),
      'contractor' => t('other worker (contractor, supplier, etc.)'),
    );
    $copts = boxOpt('companyOptions', $companyOptions, $sta);

    $companyInfo = array(
      'company_text' => item(t('Are you an owner and/or employee of a local company, or of any %PROJECT member company? Otherwise leave this part blank.')),
//      'company' => textFld(t('Company: '), [t('Your company')], autocomplete('company')),
      'company' => textFld(t('Company: '), [t('Your company')]),
      'companyPhon' => textFld(t('Company Ph<span>&nbsp;</span>one:'), [t('Company phone number')]), // Google Chrome bug require obfuscation of "phone"
      'companyOptions' => boxesFld('', '', @$copts, $companyOptions), 
    );
    $companyInfo = fieldSet('companyInfo', $companyInfo, BARE);
  } else { // company
    $acctType = w\acctTypeField();
  }

//  $buysAts = db\q('SELECT id, company FROM r_nonmembers')->fetchAllKeyed();
//  $ats = boxOpt('ats', $buysAts, $sta);
//  $buysAt = boxesFld(t('<br>Over 60 Greenfield businesses have already signed up. Which of these <b>Not-Yet-Member Businesses</b> do you frequent?'), '', @$ats, $buysAts);

  $submit = submit(t('Next'));
  $args = hidFld(@$args);
  $confirmed = hidFld(@$iCode == IBY_FORM); // iff inviter used form (or opening a company account), invitation is already confirmed
  $iCode = hidFld(@$iCode + 0);
  $helper = hidFld(@$helper ? r\acct($helper)->id : @$inviter);
  
  $contactDefaults = compact(ray($contactDefaults));
  $contactFlds = w\contactFields($contactDefaults + ray('country state state2', @$country ?: @$hidCountry, @$state ?: @$hidState, @$state2 ?: @$hidState2), TRUE, @$myid0);
  $nameAndEmail = w\nameAndEmail($personal ? t('Full name') : t('Company'), @$fullName, @$email, isset($contactFlds['partner']), @$myid0);

  $form = compact(ray('title forother subtext acctType'))
    + $nameAndEmail + $contactFlds + w\ssnFields($personal)
    + compact(ray('calling companyInfo buysAt submit myid args confirmed helper iCode notes'));
//  keep_values($form);
//  $sponsorConfirmation = w\whoFldSubmit('sponsor', t('Your sponsoring organization is %name, yes?'));
  jsx('signup', compact('clarify'));
  return labeled($form);
}

function formSignup_validate($form, &$sta) {
  if (!isset($sta['buttons'])) $sta['buttons'] = []; // for testing (keep Drupal from griping)
  extract(just('myid confirmed acctType email phone country tenure pin company companyPhon companyOptions fullName legalName zip address city state postalAddr', $sta['input']));
//  if (!$inviteOk) return r\go('signup'); // in case user resubmits
  //and @$code != bin2hex(R_WORD)

  \variable_set('signupData', ray('time phone state companyOptions', time(), @$phone, @$state, @$companyOptions));
  if (!emailOkay($email, $acctType != R_PERSONAL, @$myid ? r\acct($myid) : '')) return;
  if (!phoneOk($phone, $country)) return;
  if ($err = u\badZip($zip)) return say($err, 'zip');
  if (!@$state) return say('bad state', 'state');
  if (!formBasic_validate($form, $sta, $acctType != R_PERSONAL)) return;
  if ($err = u\badAmount($tenure, '>=0')) return say(t('How-long: ') . t($err), 'tenure');
//  if (@$pin === '') return say('pin required', 'pin');
//  if (@$pin and strlen($pin) != 4) return say('wrong pin len', 'pin');
  
  if (@$companyOptions) extract(just('isOwner employeeOk contractor', $companyOptions));
  $gotrelation = (@$employeeOk or @$isOwner or @$contractor);
  if (@$company or @$companyPhon) { // NOT or $gotrelation (let user get by without)
    foreach (ray('company companyPhon') as $one) {
      if (u\nonish(@$$one)) $$one = '';
      // (no) return say('missing field', array('field' => $one), $one);
    }
    if (@$company and $err = u\badName($company)) return say($err, array('field' => 'Company'), 'company');
    if (@$companyPhon and !$companyPhone = u\fmtPhone($companyPhon, '+n')) return say('bad company phone', compact('companyPhone'), 'companyPhone');
    if (!$gotrelation) return say('what relation', 'company');
    $signupCo = compact(ray('company companyPhone employeeOk isOwner contractor'));
  }
  
  if (!@$legalName) $legalName = $fullName;
  foreach (ray('fullName legalName address city postalAddr') as $field) {
    $$field = trim(str_replace('  ', ' ', u\normalizeCase(@$$field))); // @ for testing
    if ($err = u\badName($$field)) return say($err, compact('field'), $field);
  }
  if (u\poAddress($address)) return say('po in location', 'address');

  $flags = $acctType == R_PERSONAL ? 0 : u\bit(B_CO);
  if (@$confirmed) $flags |= u\bit(B_CONFIRMED); // companies are always pre-confirmed, because the company account is opened by a member
//  $administer_users = FALSE; // for testing (keep Drupal from griping)
  $status = 1;
  u\preray(compact(ray('fullName legalName phone address city zip postalAddr email flags signupCo status')), $sta['input']);
}

function formSignup_submit($form, &$sta) {
  $dbFields = 'fullName legalName email flags phone federalId dob pin country zip address city state postalAddr helper iCode notes wants calling signupCo tenure source';
  extract(just('myid confirmed acctType args company ats owns partner customer source2 ' . $dbFields, $sta['input']));

  if (u\test() and !@$args) $args = basename($_SERVER['REQUEST_URI']);

  u\EXPECT((bool) $args, 'no args');
  extract(just('code', $args));
  if (isDEV) $helper = $helper + 0; // don't let lack of helper stop us

  $wants = wants(@$ats);
  if (@$notes) list ($source, $notes) = [trim("$notes $source"), ''];
  if (@$source2) $source = trim(strtoupper($source2) . "-$source");

  $info = compact(ray($dbFields)) + acctType($acctType);
  
//  $DBTX = \db_transaction();

  if (@$myid) {
    $a = r\acct($myid);
    if ($a->jid) $info['name'] = r\uniqueName($fullName, $info); // make sure name reflects partner name
    $a->update($info);
    $name = $a->name;
  } else {
    if (!$a = new r\Acct($info)) {unset($DBTX); return say('cannot create account', 'zot');}
    list ($myid, $name) = [$a->id, $a->name];
  }
  
  if (!@$mya or !$mya->cAdmin) w\setAcct(NULL); // sign agent out if creating joint Account (so it looks joint)
  $mya = w\setAcct($myid); // this works for both an individual account (proSe) and a company account (with agent)
  $qid = $mya->mainQid;
  
  if (@$iCode < 0) w\invitation($code, $myid); // mark the invitation used
  $email = u\cry('P', $email);
  db\q('UPDATE r_invites SET invitee=:myid WHERE email=:email', compact('myid', 'email')); // and all such
  if (!@$owns) $mya->setRisk('rents');
  
  if (@$signupCo) {
    suCompanyRelation($myid, $signupCo);
    $mya->update(compact('signupCo'));
  }
  if ($h = $mya->helperA and @$args and !$h->cAdmin) suCreatorRelation($helper, $args, $myid);
//  unset($DBTX); // commit    
  
  // report to staff and user
  tellStaffNewMember($info + compact(ray('acctType qid name')));

  $pw1 = $mya->oneTimePass($name, TRUE);
  
  if ($acctType == R_PERSONAL) {
//    say('your account is ready');
//    $region = strtolower(R_SERVER_ID);
  // @todo: try this 2 or 3 times (in case someone else was trying to register the same name
    r\notify($myid, 'verify', ray('name qid code', $name, $qid, $pw1), TRUE); 

    if (!@$confirmed) {
      u\EXPECT((bool) $h, 'unconfirmed with no helper');
      if ($helper != 1) { // sysadmin helper means the potential inviter is named in the notes field
        $_a1 = $h->makeDo('confirmInvite', $myid); // link to confirm invitedness
        r\message($helper, 'confirm invite', compact('_a1', 'fullName')); // ask inviter to confirm
      }
       // NO. Do this upon completion of steps      say('must be confirmed', ['inviterName' => $h->fullName]);
    }
    
/*    svar('myid', $myid);
    setAcct($myid, TRUE); // be signed in (must be outside $DBTX transaction)
  */  
    $sta2['uid'] = $myid; // tell Drupal we're signed in
    $nextStepUrl = $mya->nextStepUrl('signup', $msg);
    say($msg);
    formSignin_submit($form, $sta2, $nextStepUrl); // lead user to next step  
  } else { // non-personal company (no independent login)
    say('company is ready', compact('qid'));
    //if (@$helper) $qid = r\qid($helper); // "if" for dev faked code HUH?
    if (!@$h) hack('company no helper');
    if ($mya->email == $h->email) {
      $mya->stepDone('verify');
    } else r\notify($myid, 'verifyCo', ['code' => $pw1], TRUE); 
    return w\goNextStep('signup');
  } 
}

/**
 * Display, for editing, contact info for the current account.
 * This function uses jQuery code defined in misc.js, for the country and state dropdowns
 * @NOTE: The country and state drop down require a change in form.inc (see patch/form.inc.patch)
 */
function formContact($form, &$sta) {
  global $mya;

  $nameDesc = t('usename desc');
  if ($mya->ok) $nameDesc .= '<br>' . ($mya->co ? t('Your username and %PROJECT webpage address') : t('triggers new card', 'field', t('name')) . t('Your username')) . t(' will also change.');
  $title = item(t('Contact Information'));
  $fullName = textFld($mya->co ? t('Company Name:') : t('Your Name:'), $nameDesc, required(@$mya->fullName));
//  $onchange = w\onchange("jQuery('.form-item-pass').show();");
  $email = textFld(t('Email:'), '', required(@$mya->email));
  if (!$mya->cAdmin) $pass = passFld(t('Password:'), t('Required for changing email address'));

  $submit = submit();
  $sta['no_cache'] = TRUE; // otherwise the javascript-populated dropdowns get lost

  $form = compact(ray('title fullName email pass')) 
        + contactFields([], FALSE, $mya->id)
        + compact('submit');

        
  jsx('contact');
//  return labeled($form, 'return setPostalAddr(false);');
  return labeled($form);
}

function formContact_validate($form, &$sta) {
  global $mya;
  $myid = $mya->id;
  extract(u\normalizeCase(just($normals = 'fullName city address postalAddr', $sta['input'])));
  extract(just('email pass phone country state zip', $sta['input']));

  // what's this doing in validate?!
//  js('countries.js', 'file', 'header'); // country and state dropdowns
//  js("print_country(\"$country\", \"$state\");", 'inline', 'footer'); // initialize dropdowns

  if ($fullName != $mya->fullName) {
    if ($err = u\badName($fullName)) return say($err, ['field' => 'fullName'], 'fullName');
    $name = u\shortName($fullName);
    $otherName = db\lookup('fullName', 'users', 'name=:name AND uid<>:myid', compact('name', 'myid'));
    if ($otherName) return say('shortname taken', compact('otherName'), 'fullName');
  }

  if ($err = u\badZip($zip)) return say($err, 'zip');
  if (!emailOkay($email, $mya->co, $mya)) return; // say('bad email', ray('email', $email), 'email');
  if (!$mya->cAdmin and $email != $mya->email and !$mya->agentA->passwordOkay($pass, 'pass', $err)) return w\say($err, 'pass');
//$pin != $mya->agentA->pin) return say('bad pin', 'pin');
  if (!phoneOk($phone, $country)) return;
  if (u\poAddress($address)) return say('po in location', 'address');
  
  u\preray(compact(ray($normals . ' email phone name')), $sta['input']); // fix formatting and add name
}

function formContact_submit($form, &$sta) {
  global $partnerInfo; // information used within eachPartner function argument (so must be global)
  extract($info = just('fullName name email phone faxetc country zip state city address postalAddr owns', $sta['input']));
  unset($info['owns']);
  
  global $mya;
  if ($mya->id == 1) unset($info['name']); // don't change 'admin'
  
  $info = u\normalizeCase(just('fullName city address postalAddr', $info)) + $info;
  $partnerInfo = just('email phone address city state zip postalAddr', $info); // what to tell partner about

  $mya->eachPartner(function($coA, $custA, $custCode) { // tell partner what changed
    global $partnerInfo;
    foreach ($partnerInfo as $k => $v) if ($custA->$k == $v) unset($partnerInfo[$k]);
    if ($partnerInfo and $api = $coA->api()) u\post($api, ray('partnerCode qid op name', $coA->emailCode, $mya->mainQid, 'change', $custA->fullName) + $partnerInfo);
  });
  
  $mya->setRisk('rents', !@$owns); // @ for tests
  $mya->update($info);
  say('info saved');
  //  return w\goNextStep('contact', NULL, $info);
}

/**
 * Display a list of people nearby, waiting for an invitation.
 */
function formWaiting($form, &$sta) {
  global $mya;
  
  $title = item(t('People You Might Know, Waiting to Be Invited'));
//  $subtext = item(t('<p>If the status of someone you invited is "<span style="color:orange;">Not Complete</span>", they have not finished setting up an account and may need your help.</p><p>If the status is "<span style="color:red;">expired</span>", you may want to call them and send another invitation.</p>'));
  $table = "(SELECT CONCAT_WS(' ', first, last) AS name, MID(zip,1,5) AS zip FROM r_request WHERE NOT done AND ctty=:ctty ORDER BY created DESC,listid DESC LIMIT 50) r";
  $q = db\q("SELECT name, zip FROM $table ORDER BY zip,name", ['ctty' => $mya->community]);
  while ($row = $q->fetchAssoc()) {
    extract($row);
    $lines[$zip] = (@$lines[$zip] ? $lines[$zip] . ', ' : '') . $name;
  }
  if ($mya->community == r\serverUid()) $lines['01301'] = (@$lines['01301'] ? $lines['01301'] . ', ' : '') . 'Caitlin Sullivan';
  if (@$lines) {
    foreach ($lines as $zip => $zipList) {
      if ($city = db\lookup('city', 'users', 'MID(zip, 1, 5)=:zip', compact('zip'))) $zip = $city;
      $list[] = "<tr><th>$zip</th><td>$zipList</td></tr>\n";
    }
  } else $list = [t('No one in your area is currently waiting to be invited.')];
  $list = item('<table>' . join('', $list) . '</table>');
  return compact('title', 'list');
}

/**
 * Display a list of the member's invitees.
 */
function formInvitedWhom($form, &$sta) {
  global $mya;
  $uid = $mya->cAdmin ? $mya->id : $mya->agentId;
  
  $title = item(t('Your Invitees'));
  $subtext = item(t('<p>If the status of someone you invited is "<span class="invite-incomplete">Not Complete</span>", they have not finished setting up an account and may need your help.</p><p>If the status is "<span class="invite-expired">expired</span>", you may want to call them and send another invitation.</p>'));
  $old = strtotime((R_INVITE_DAYS + 2) . ' days ago');
  $sql = <<<EOF
    SELECT DISTINCT IFNULL(u1.fullName, i.email) AS who, invited, invited<:old AS expired,
      (u1.flags&(1<<:B_MEMBER)) AS member
    FROM r_invites i LEFT JOIN users u1 ON u1.uid=i.invitee
    WHERE i.inviter=:uid ORDER BY invited DESC
EOF;
  $q = db\q($sql, compact('uid', 'old')); // IFNULL fails for u1.flags (not sure why -- it comes out 0)

  $list = "<table id='invitelist'>\n<tr><th>Invited</th><th>Whom</th><th>Status</th></tr>\n";
  while ($row = $q->fetchAssoc()) {
    extract($row);
    $invited = u\fmtDate($invited);
    if (!$started = strpos($who, ' ') and u\starts($who, CRYPT_FLAG . 'P')) $who = u\decry('P', $who); // decrypt email
    $status = ($member or $ok) ? t('is a Member!') : ($started ? t('account Not Complete') : ($expired ? t('expired') : '(no response yet)'));
    $color = $member ? 'member' : ($started ? 'incomplete' : ($expired ? 'expired' : 'other'));
    $nameClass = $co ? 'name co' : 'name';
    $list .= "<tr><td>$invited</td><td>$who</td><td class=\"invite-$color\">$status</td></tr>\n";
  }
  $list .= "</table>\n";
  
  $list = item($list);
  return compact(ray('title subtext list'));
}

/**
 * Ask new member to confirm their SSN and/or birthdate by typing it again. (sometimes with no-signin link)
 */
function formSsn($form, &$sta, $args = '') {
  $mya = w\eLinkAcct($sta, $args, 'acct');
  $ssnData = $mya->ssnData;
  $badBday = (@$ssnData[SSN_ERR_INDEX] == t('bad birthdate'));
  
  $thing = $badBday ? t('Birth Date') : ($mya->co ? t('EIN') : t('Social Security Number'));
  $title = item(t('Confirm Your ') . $thing);
  $subtext = item(t('Our 3rd party service was unable to verify your %thing automatically. Please type it again (carefully) in case there was a typo.', 'thing', strtolower($thing)));
  $submit = submit(t('Submit'));
  $field = w\hidFld($badBday ? 'dob' : 'federalId');
  $form = compact(ray('title subtext field')) + ssnFields(!$mya->co) + compact('submit');
  if ($badBday) unset($form['federalId']); else unset($form['dob']);
  return labeled($form);
}

function formSsn_validate($form, &$sta) {
  $mya = w\eLinkAcct($sta);
  extract(just('field', $sta['input']));
  return formBasic_validate($form, $sta, FALSE, $field);
}

function formSsn_submit($form, &$sta, $args = '') {
  $mya = w\eLinkAcct($sta);
  extract(just('field', $sta['input']));

  extract(just($field, $sta['input']));
  if ($same = ($mya->$field == $$field)) $mya->setRisk($field == 'dob' ? 'dobOff' : 'ssnOff');
  $mya->update(compact($field));
//  r\tellAdmin('new ' . $field, ray('uid same', $mya->id, $same ? t('Yes') : t('No')));
  return r\acct() ? w\goNextStep('ssn') : doSay(t('info saved|setup complete'), 'ok'); // r\acct not $mya!
}

define('R_BASIC_FIELDS', 'fullName federalId dob');

/**
 * Validate the data that affects social security number verification.
 * called from signup validation and ssn validation, as well as from formBasic()
 * @param string/bool $co: is this a company account ('mya' means use the current account's type)
 *   'mya' also means we are retrying basic information (the AccountInfo step) during signup
 */
function formBasic_validate($form, &$sta, $co = 'mya', $fields = R_BASIC_FIELDS) {
  extract(just($fields, $sta['input']));
  if ((string) $co == 'mya') {
    $mya = w\eLinkAcct($sta);
    $co = $mya->co;
  }
  if (isset($fullName) and $err = u\badName($fullName)) return say($err, ['field' => 'fullName'], 'fullName');

  $what = $co ? t('federal ID') : t('social security number');
  if (!$co and isset($dob) and $err = u\badDob($dob)) return say($err, 'dob');
  if (isset($federalId) and $err = u\badSsn($federalId, @$dob)) return say($err, compact('what'), 'federalId');

  u\preray(compact(ray($fields)), $sta['input']);
  return TRUE;
}

/**
 * Show Common Good's accountant (or any employee) our Deposits page, without the buttons
 */
function formShowDeposits($form, &$sta) {
  global $mya;
  if (!$mya or $mya->id != r\cgfId()) return r\go('empty', t('You are not authorized to view that page.'));
  include_once __DIR__ . '/../admin/admin-forms.inc';
  return w\formDeposits($form, $sta);
}

/**
 * Connect a bank account.
 */
function formConnect($form, &$sta, $args = '') {
  global $rUrl;
  global $mya;
//  $mya->stepDone('connect', compact('connect')); // just visiting this page is enough

  $usa = ($mya->country == US_COUNTRY_ID);
  $usa = TRUE; // always true for now

  $title = item(t('Banking Settings'));

  $refills = boolFld(t('Refills:'), t('Refill your %PROJECT Account automatically when it goes below a chosen "Target Balance"? Say no if you tend to bounce checks or live close to the wire.'), $mya->refill);
  if ($mya->co) $cashout = radiosFld(t('Cashout:'), t('Automatic transfers to your bank account leave an amount in your %PROJECT account equal to your average weekly gross (in %PROJECT payments) over the past six months.'), required(), ray('0 1 2', t('when I say so'), t('weekly'), t('monthly')));
  $minDesc = t('How much to keep in your %PROJECT Account, for purchases. When your balance goes below this amount, the system automatically refills it for you from your bank account. Refilling may take 3-5 business days.');
  $minDescNegative = $mya->balance < 0 ? t(' <b>If you choose a negative amount</b>, it will be increased by %bump a week until it is greater than zero.', 'bump', u\fmtAmt(MIN_WEEKLY_BUMP)) : '';
  $minWarning = t('note|ach warning');
  $minDefault = u\fmtAmt($mya->minimum ?: 0, 's$');
  $target = textFld(t('Target Bal:'), [t('Your preferred "normal" balance'), "<p>$minDesc$minDescNegative</p><p>$minWarning</p>"], dft($minDefault));
  $achMin = textFld(t('Min Transfer:'), [t('Minimum bank transfer amount'), t('This much (or more, if necessary) will be transferred from your bank account in exchange for %RCREDITS when your balance goes below the Target Balance you chose, above. The suggested amount works well for most people.')], dft(u\fmtAmt($mya->achMin ?: R_ACHMIN_DEFAULT, 's$')));

//  $savingsAdd = textFld(t('Extra Savings:'), [t('Extra savings amount'), t('Your incentive rewards go automatically into a Savings Reserve, for later or as needed. Your Savings Reserve works like a traditional reserve savings account that kicks in whenever you would otherwise overdraw your primary account -- except there are no fees. This also helps the community by keeping more funds in the system. You get a monthly inflation adjustment on any funds you hold in the %PROJECT system (at @inflate% APR). If you want to hold even more in your Savings Reserve (a great idea!) enter the additional amount here.', ['@inflate' => R_INFLATION_RATE * 100])], required(u\fmtAmt($mya->savingsAdd)));
  $saveWeekly = textFld(t('Save Weekly:'), [t('Additional amount to add weekly to Target Balance'), t('Putting money away as savings can be a challenge. This may help: choose a small additional amount to be added automatically to your %what every week.', 'what', $mya->balance < 0 ? t('Target Balance') : t('Target Balance'))], dft(u\fmtAmt($mya->saveWeekly)));
  
  $targetFields = fieldSet('targetFields2', compact(ray('target achMin saveWeekly')), BARE);
  //$bankAccountType = radiosFld(t('Type:'), '', required($mya->can(B_SAVINGS)), $typeOptions);
    
  if ($hasBank = $mya->hasBank) {
//    if ($usa) list ($route, $bankAccount) = u\parseBankAccount(@$bankAccount);
    $remove = submi(t('Remove connection'), '', 'xs', ['parents' => ['remove']]);
    $bankAccount = item("xxxxxx$mya->last4bank &nbsp; &nbsp;", t('Account:'), '', w\suffix(\render($remove)));
//    $submit = submit();
    $fields = 'title bankAccount refills targetFields';
  } else { // no connected account yet
//    $doConnect = (int) !@$mya->stepsDone['connect'];
    $securityLink = r\promoLink('security.html');
    $reassurance = $mya->minimum ? '' : t('<p><b>NOTE:</b> Funds will be taken from your bank account ONLY when you explicitly request a transfer or when you choose automatic refills.</p>');
    $subtext = item(t('<p>Choose how you want to get money in and out of your %PROJECT Account. Most people find it convenient to connect a checking account. Connecting lets you trade US Dollars for %RCREDITS easily. Otherwise you can trade cash for %RCREDITS at a participating business.</p><p>Complete this form to connect your checking account and authorize funds to be taken from your checking account in exchange for any %RCREDITS you request. Funds may be transferred either by Remotely-Created Check (RCC) or by Automated Clearing House (ACH) direct debit. See our <%a>Privacy and Security Policy</a> for details on how your information is protected.</p>', '_a', w\atag($securityLink)) . $reassurance . t('<p>Do you want to connect your checking account at this time?</p>'));
    $connect = boolFld(t('Connect:'), '', 0);
    if ($usa) $routingNumber = textFld(t('Routing:'), t('Type carefully your bank\'s routing number.'));
    //$bankAccount = textFld(t('Account:'), t('Type carefully your checking account number.'));
    $bankAccount = passFld(t('Account:'), t('Type <b class="loud">carefully</b> your <b>checking</b> account number. The bank charges us $20 if you get this wrong. <span>Savings accounts will not work, at this time.</span>'));
    $bankAccount2 = passFld(t('Again:'), t('Type your account number again.<br>(we need to be REALLY SURE we don\'t connect to the wrong account)'));
  
    $connectFields = fieldSet('connectFields2', compact(ray('checkHint routingNumber bankAccount bankAccount2 cashout refills targetFields')), BARE);
//    $submit = submit(t('Connect'));
    $fields = 'title subtext connect connectFields';
  }

  jsx('bank-prefs', $vs = ray('connectLabel saveLabel mindft', t('Connect'), t('Save'), R_MIN_DEFAULT));
  return labeled(compact(ray($fields)) + w\setupFoot($hasBank ? $vs['saveLabel'] : $vs['connectLabel']));
}

function formConnect_validate($form, &$sta) {
  global $mya;

  extract(just('connect routingNumber bankAccount bankAccount2 bankAccountType refills target achMin saveWeekly', $sta['input']));

  foreach (ray('target:,achMin:,saveWeekly:>=0') as $k => $v) { // and savingsAdd someday 
    if (u\test() and !isset($sta['input'][$k])) $sta['input'][$k] = 0; // empty makes tests fail
    if ($err = amtErr($k, $sta, $v)) return sayFieldErr($err, $k);
    $$k = $sta['input'][$k];
  } // must be before return because params are always present and must have "$" removed by amtErr()

  if (op($sta) == 'remove') return;

  if (!$mya->hasBank) {
    if (is_null(@$connect)) return say('yes or no', 'connect');

    if (!@$connect) return; // nothing more to do

    foreach (ray($accts = 'routingNumber bankAccount bankAccount2') as $one) $$one = preg_replace('/[\.\- ]/', '', @$$one);
    u\preray(compact(ray($accts)), $sta['input']);
    if (!preg_match('/^(|[0-9]{9})$/', $routingNumber)) return say('bad routing number', 'routingNumber');
    if (!db\exists('r_banks', 'route=:routingNumber', compact('routingNumber'))) return say('bad routing number', 'routingNumber');
    if (!preg_match('/^[0-9]{3,17}$/', $bankAccount)) say('bad account number', 'bankAccount'); // {3,20} ? Dwolla says 3-17
    if ($bankAccount != $bankAccount2) say('mismatch', ['thing' => t('account number')], 'bankAccount2');
  }

  if (@$refills) {
    $floor = min($mya->balance, max(0, $mya->floor)); // can't go deeper in debt
    if ($target < $floor) return say('min sub floor', ['floor' => u\fmtAmt($floor)], 'target');
    if ($achMin < R_ACHMIN) return say('bad achmin', 'achMin');
  }
  
//  if ($savingsAdd < 0) return say('savings too low', 'savingsAdd');
//  $savingsMax = max($mya->savings, $mya->balance);
//  if ($savingsAdd > $savingsMax) return say('savings too high', ['max' => u\fmtAmt($savingsMax)], 'savingsAdd');
// NO! if ($minimum < 0 and $saveWeekly < MIN_WEEKLY_BUMP) return say('saveWeekly too low', ['min' => u\fmtAmt(MIN_WEEKLY_BUMP)], 'saveWeekly');
//  if ($saveWeekly < 0 and $mya->savingsAdd == 0) return say('negative saveWeekly', 'saveWeekly');
}

function formConnect_submit($form, &$sta) {
  global $mya;

  extract(just('connect routingNumber bankAccount cashout refills target achMin saveWeekly', $sta['input']));
  if (op($sta) == 'remove') $connect = FALSE;
  $minimum = $mya->minimum;

  if (@$connect or !isset($connect)) { // wants bank or has bank, not removing
    if (@$connect) { // wants bank
      if ($mya->country == US_COUNTRY_ID) $bankAccount = "USkk$routingNumber$bankAccount";
      $last4bank = substr($bankAccount, -4, 4);
    } else list ($connect, $bankAccount) = [TRUE, 'no change']; // has bank
    if ($refills) $minimum = $target; // change minimum only explicitly
  } else { // removing or choosing not to connect
    $bankAccount = $last4bank = '';
    $achMin = $mya->achMin ?: R_ACHMIN_DEFAULT;
  }

  list ($hasBank, $refill) = [$connect, $connect and $refills];
  list ($cashoutW, $cashoutM) = [$connect and $cashout == 1, $connect and $cashout == 2];
  $fields = ray('hasBank last4bank refill cashoutW cashoutM minimum achMin saveWeekly');
  if ($bankAccount != 'no change') $fields[] = 'bankAccount'; // avoid overwriting v-encrypted value
  $mya->update(compact($fields));
//    if ($saveWeekly < 0) say(t('@amount will be moved every week from your Savings Reserve to your Primary Account, until your Savings Reserve reaches its minimum.', ['@amount' => u\fmtAmt($saveWeekly)]));
  return w\goNextStep('connect');
//  say('info saved' . ($mya->ok ? '' : '|return to membership'));
}

/**
 * Get the member's security info.
 * @param string $arg: "gotPhoto" if just sucessfully uploaded a photo
 */
function formSecurity($form, &$sta, $arg = '') {
  global $base_url;
  global $mya;

  if ($arg == 'gotPhoto') say('got photo');

//  button(t('password'), "$base_url/settings/security/change-password", '', 'warning'), t('Change:'), ['', $mya->ok ? t('triggers new card', 'field', 'photo') : ' ']);
  $btns = btn("$base_url/settings/security/change-password", t('password'), 'warning')
  . ' ' . btn("$base_url/settings/photo", t('photo'), 'warning');
  
  $title = item(t('Security Information'));
  $change = item($btns, t('Change:'), ['', $mya->ok ? t('triggers new card', 'field', 'photo') : ' ']);
  $questionDesc = t('Type a question no one but you could guess the answer to.');
  $question = $mya->co ? NULL : textFld(t('Question:'), [t('Choose a security question'), $questionDesc], required($mya->question));
  $answer = $mya->co ? NULL : textFld(t('Answer:'), [t('The answer to that question')], required(@$mya->answer));

  if ($mya->cAdmin and !$mya->proSe) {
    $question = item(@$mya->question, t('Question:'), $questionDesc);
    $answer = item(@$mya->answer, t('Answer:'));
  }

  $submit = submit();
  $form = compact(ray('title change question answer submit'));

  return labeled($form);
}

function formSecurity_validate($form, &$sta) {
  global $mya;
//  extract(just('', $sta['input']));
}

function formSecurity_submit($form, &$sta) {
  global $mya;
  $info = just('question answer', $sta['input']);

  foreach ($info as $k => $v) if ($v == R_ON_FILE or $v == @$form[$k]['#default_value']) unset($info[$k]); // don't change if on file or unchanged

  if (!empty($info)) {
    if (!$mya->update($info)) return say('info not saved', 'ERR');
  }

  say('info saved');
}

//define('R_REL_EMPLOYER_COL', 2); // number of amount/employer column
define('R_REL_OWNER_COL', 3); // number of family/owner column

/**
 * Give someone access to the current account or mark them as an employee or owner.
 */
function formRelations($form, &$sta, $args = '') {
  global $base_url;
  global $mya;
  $myid = $mya->id;
  extract(just('customers', $args)); // linked from an email

  //  if ($confirm = sureForm($sta)) return $confirm; // confirm only getUSD
  $acctIdentifiers = be\accountName($myid);
  $header = ray('The other account,Draw,My employee?,Family?,Permission,');
  $classes = u\prefixValues('rel-', ray('person draw employee owner permission link'));
  if ($co = $mya->co) {
    $header[R_REL_OWNER_COL] = 'Owns 10%+';
//    if (!$mya->ok) $mya->stepDone('relations');
  }

  if ($mya->hasCustomers) $showCustomers = @$customers
  ? w\item(w\btn("/settings/relations", t('Hide Customers')))
  : w\item(w\btn('/relations/customers=1', t('Show Customers')));
  
  $where = @$customers ? '1' : '(NOT isCustomer OR s.permission OR s.employee OR s.isOwner OR s.draw)';
  $sql = <<<EOF
    SELECT DISTINCT s.reid, s.main, s.other, IF(:myid=s.main, v.fullName, u.fullName) AS fullName,
      s.permission, s.employee, s.isOwner, s.draw
    FROM ((r_relations s LEFT JOIN users u ON u.uid=s.main)
      LEFT JOIN users v ON v.uid=s.other)
    WHERE s.main=:myid AND $where
    ORDER BY fullName, IF(:myid=s.main, s.other, s.main), (:myid=s.other)
EOF;
  $result = db\q($sql, compact('myid'));
  $rows = $raws0 = $raws = [];
  while ($row = $result->fetchAssoc()) {
    extract($row);
    $raws0[$reid] = $row; // original ("0") raw values from table
    $a = r\acct($other);
    $otherCo = $a->co;
    $otherPerson = !$otherCo;

    $idLink = R_NONE; // default to no link
    if ($mya->co and !$otherCo and $permission >= r\perm(B_SCAN) and $permission != r\perm(B_JOINT)) {
      $text = str_replace(' ', '&nbsp;', $permission >= r\perm(B_BUY) ? t('request %PROJECT Card') : t('request Cashier Card'));
      $idLink = "<a href=\"$base_url/request-employee-rcard/$other\">$text</a>";
    }

    $ii = count($rows) . "-$reid"; // "row-reid"
    $drawn = toggle('draw', $draw, $ii);
//    $employer = toggle('employeeOk', @$employeeOk2, $ii, @$employeeOk2 xor @$employee2);
    $isEmployee = !$otherCo ? toggle('employee', $employee, $ii) : R_NONE;
    $Owner = toggle('isOwner', $isOwner, $ii);
    $permissions = $GLOBALS['share permissions'];
// NO    if (!$mya->can(B_JOINED)) $permissions[$permission = B_JOINT] .= '?'; // pending agreement
    if ($co or $otherCo or !$mya->ok or !$a->ok) unset($permissions[r\perm(B_JOINT)]); // no joint accounts with a company or nonmember
    $perm = $otherPerson ? dropdown('permission', $permission, $permissions, $ii) : R_NONE;
    $amountValue = ''; // was amountField('amount', number_format($amount,0), $ii);

    $thisRow = array($fullName, $drawn, $isEmployee, $Owner, $perm, $idLink);
    $thisRaw = compact(ray('draw employee isOwner permission'));
//      if ($co) array_splice($thisRow, 1, 1, $amount); // companies can't be employees
    
    $rows[] = $thisRow; // what to show on screen
    $raws[] = $thisRaw; // original conceptual ("raw") values for what's show on screen
  }
  $sta['rawValues'] = compact('raws0', 'raws');
  
  $aExact = "a href=\"$base_url/help/payment-exchanges\"";
  $_aInvite = w\atag('/community/invite');
  $aAgent = "a href=\"$base_url/agent\"";
  $help = t('Connect individual %PROJECT participants to your account &mdash; either as owners, employees, or others, with limited or full access to the account. If they don\'t have an account yet, <%aInvite>invite them</a>! Each permission includes all the permissions above it.', compact(ray('aExact _aInvite aAgent')));
  //If they wish NOT to open a real account, create an <@aAgent>rPOS Sign-in Account</a> for them.

  $subtext = '<span id="account-label">' . t('Current Account') . ":</span> <span id='account-identifiers'>$acctIdentifiers</span><br><br>$help";

  $attributes = array('id' => 'relations');
  $cols = [];
  foreach ($classes as $class) $cols[] = compact('class');
  $colgroups = array($cols);
  $caption = $sticky = '';
  $empty = t('no relations');
  $list = theme_table(compact(ray('header rows attributes caption colgroups sticky empty')));

  $title = item(t('Relations'));
  $subtext = item($subtext);
  $list = fld('item', '', '', array('markup' => $list));
//    'newPerson' => textFld(t('Add Someone:'), t('name, id, email, or phone')), // autocomplete causes problems
  $newPerson = textFld(t('Add Someone:'), [t('Name, id, email, or phone')]);
  $go = submit(t('Save Changes'));
  $form = compact(ray('title subtext showCustomers list newPerson go'));

  if (!$mya->member and !$mya->stepDone['relations']) $form += w\setupFoot();
  w\whoFldSubmit('newperson', t('Create a new relation with %name?'));
//  w\jsx('toggle');

  return labeled($form);
}

function formRelations_validate($form, &$sta) {
//  if (confirming_v($sta)) return;
  global $mya;
  if ($newPerson = @$sta['input']['newPerson']) {
    $a = whois($newPerson, 'newPerson', $sta['input'], 'no self-relation');
    $id = $a ? $a->id : '';
    if ($id and r\relation(1, $mya->id, $id)) return say('already related', 'newPerson');
    $sta['input']['newPerson'] = $id; // save for submission handling
  }
  $managers = 0; // for company accounts there needs to be at least one manager
  foreach ($sta['input'] as $key => $value) {
    if (!strpos($key, '-')) continue;
    list ($keya, $rawnum, $reid) = explode('-', $key);
/*    if ($keya == 'amount') {
      $amount = $value;
      if ($err = u\badAmount($amount)) return say($err, compact('amount'), 'amount');
      if (($sta['input'][$key] = round($amount, 0)) != $amount) say('amount rounded', compact('amount'));
    } else
    */
    if ($keya == 'permission') {
      if ($value >= r\perm(B_MANAGE)) {
        $managers++;
      } else {
        $other = r\relation('other', $reid);
        if ($other == $mya->id) return say('need a manager', 'permission');
      }
    }
  }
//  if ($mya->co and !$managers and !$mya->cAdmin) return say('need a manager', 'permission');
}

function formRelations_submit($form, &$sta) {
//  if (confirming_s($sta)) return;
  global $mya;

  $vs = $sta['input'];
  if ($other = @$vs['newPerson']) { // adding a new relation
    $mya->newRelation(compact('other'));
    $who = r\acct($other)->fullName;
    say('report new relation', compact('who'));
  }
  $changes = [];
  extract(just('raws0 raws', $sta['rawValues']));
  $joinPerm = r\perm(B_JOINT);

  $DBTX = \db_transaction();

  // handle all fields even when they don't appear (because they're false)
  foreach (array_keys($raws0) as $i => $reid) {
    foreach (ray('permission draw employee isOwner') as $fld) {
      $k = "$fld-$i-$reid"; // rawnum
      $v = 0 + ($fld == 'permission' ? @$vs[$k] : (bool) @$vs[$k]);
      $vX = 0 + $raws[$i][$fld];

      if ($v != $vX) { // changed
        if ($fld == 'permission' and ($v == $joinPerm or $vX == $joinPerm)) {
          if ($v == $joinPerm) {
            if (@$gotJoin) {say('too many joins', 'err'); continue;} else $gotJoin = TRUE;
          }
          $msg = r\setJoin($reid, @$gotJoin); // handle joining or unjoining accounts
          w\say($msg);
        }
        $changes[$reid][$fld] = $v;
        $changes[$reid]['original'] = @$raws0[$reid]; // save for update reporting and permission-checking
      }
    }
  }

  if (!empty($changes)) say(be\updateRelations($changes));
  unset($DBTX);
  
  return w\goNextStep('relations');
}

/**
 * Show a list of devices used by this account. UNUSED AT PRESENT.
 * @todo: focus on code input
 */
function formBoxes($form, &$sta) {
  $myid = r\acct()->id;
  if ($confirm = sureForm($sta)) return $confirm; // confirm only deletion
  if (form_step($sta, $info) == 'prove') {
    $new = u\fmtPhone($sta['storage']['values']['new']);
    $form = array(
      'title' => item(t('Verify')),
      'subtext' => item(t('verify cell', 'number', $new)),
      'code' => textFld(t('Code:')),
      'new' => hidFld($new),
      'verify' => submit(t('Verify')),
    );
    return labeled($form);
  }

  $headers = array('#', 'Type', 'Device name', 'Last used');
  $types = ray(TX_CHANNELS);

  $sql = "SELECT channel, boxnum, code, boxName, access FROM r_boxes WHERE uid=:myid ORDER BY boxnum";
  $result = db\q($sql, compact('myid'));
  $list = [];
  while ($row = $result->fetchAssoc()) {
    extract($row);
    $type = $types[$channel += 0]; // make sure channel is int, not string
    $boxName = 
        @$boxName ? plain($boxName)
      : ($channel == TX_POS ? (t('POS Device #') . $boxnum)
      : ($channel == TX_WEB ? (t('Computer/Browser #') . $boxnum)
      : ($channel == TX_SMS ? u\fmtPhone($code)
      : 'ERROR')));
//    $list["x$boxid"] = array($boxid, $boxName, $restricted ? 'Yes' : 'No', u\fmtDate($access));
    $list["x$boxnum"] = array($boxnum, $type, $boxName, u\fmtDate($access, TRUE));
  }

  unset($sta['input']['new']); // don't show number just added
  $form = array(
    'title' => item(t('Devices (computers, phones, tablets, etc.)')),
    'subtitle' => item(t('These are the devices used with this account.')),
    'boxes' => fld('tableselect', '', '', array('header' => $headers, 'multiple' => TRUE, 'empty' => t('no devices')), $list),
    'new' => textFld(t('Add a cell phone*: ')),
    'save' => submit(t('Save changes')),
//    'delete' => submit(t('Remove Selected')),
//    'postscript' => item(t('* You may have a cell phone listed on the <a href="settings/contact">Contact Information</a> page, or even as a POS device on this page, but to use it for text message transactions you must add its phone number here.')),
    'postscript' => item(t('* A device may appear on this list more than once if you use it in different ways (for texting, as a Point of Sale device, and/or as a web browser).')),
  );
  return labeled($form);
}

function formBoxes_validate($form, &$sta) {
  $myid = r\acct()->id;
  if (confirming_v($sta)) return;
  extract(just('op code boxes new', $sta['values'])); // values not input
  $op = op($sta);

  if ($op == 'verify') {
    if (strtoupper($code) == svar('nonce')) return;
    previous_state($sta, 'bad nonce'); // can't just give error message, because then verification form persists
  } elseif ($op == 'delete') {
    if (no_selection($boxes)) {
      if ($new) $op = 'add'; else return say('nothing selected'); // user probably pressed Enter after specifying a new cell
    } else confirm(t('confirm delete cell'), $sta);
  }

  if ($op == 'save') {
    if (blank_field(compact('new'))) return;
    $sta['values']['op'] = $op; // make it stick if user pressed Enter
    say(be\addCell($new, 'VALIDATE'), 'new');
  }
}

function formBoxes_submit($form, &$sta) {
  if (confirming_s($sta)) return;
  
  extract(just('op code boxes new', $sta['values'])); // values not input
  $op = op($sta);

  if ($op == 'save') {
    if ($info = previous_state($sta)) return say($info, 'new'); // just returning from failed validation of step 2 ('prove')
    svar('nonce', $nonce = u\nonce()); // don't use POST (user could peek)
    r\SMS\send($new, t('verification code', compact('nonce')));
/**/ if (isDEV) debug("nonce is $nonce"); // (keep this) tell developer what code to type
    $info = compact('new');
    return form_step($sta, $info, 'prove');
  }

  if ($op == 'verify') {
    step_one($sta); // no next step (back to original form)
    say(be\addCell($new));
    $sta['redirect'] = '/settings/boxes';
  }
    
  if ($op == 'delete') {
// needs work    foreach ($boxes as $key => $one) if ($one[1]) say(be\deleteCell(substr($one[1], 1))); // ignore the leading 'x'
  }
}

/**
 * Reset password by choosing a new one from an official email link.
 */
function formResetPassword($form, &$sta, $args = '') {
  extract(just('id code', $args)); // linked from an email

  if (flooding($uid = r\loginString(@$id), $sta, $err)) return r\go('', $err, 'ERR'); // getting hammered
  $mya = r\acct($uid);

  if (!$mya->passwordOkay(@$code, 'pass', $err)) return r\go('empty', $err, 'ERR');
  noFlood($sta);
  
  $title = item(t('Choose a New Password'));
  $subtitle = item(t('Your password must have at least 8 characters, including one uppercase, one lowercase, one digit, and one punctuation mark.'));
  $uid = hidFld($uid);
  $submit = w\submit(t('Save'));
  return labeled(compact('title', 'subtitle') + w\pickPassword() + compact(ray('submit uid')));
}

function formResetPassword_validate($form, &$sta) {return formChangePassword_validate($form, $sta);}

function formResetPassword_submit($form, &$sta) {
  extract(just('pass1 uid', $sta['input']));
  $mya = r\acct(@$uid); // defaults to current account (called from formVerify_submit)
  $mya->update('pass oneTimePass', $pass1, '');
  $msg = 'pass saved';
  if (!$mya->stepsDone['verify']) {
    $msg .= '|step completed';
    $mya->stepDone('verify');
  }
  if (@$uid) { // no uid and no signin if coming from formVerify_submit
    $sta += compact('uid'); // _submit requires call by reference
    formSignin_submit('', $sta); // lead user to next step
  }
  say($msg); // must postcede formSignin_submit
}

/**
 * Change from existing password to a new one.
 * @todo: refactor this with formResetPassword
 */
function formChangePassword($form, &$sta) {
  global $mya;
  $title = item(t('Choose a New Password'));
  $subtitle = item(t('Mixed-case, digits, punctuation, and plain old length make your password strong.'));
  if (!$mya->cAdmin) $pass = passFld(t('Current (old) Password:'), '', required());
  $submit = submit(t('Save'));
  return labeled(compact('title', 'subtitle') + w\pickPassword() + compact('pass', 'submit'));
}

/**
 * Check new password strength, match with second typing, and validity of existing password, if any.
 * ("if any" because this function is called by formResetPassword_validate() and formVerify_validate)
 */
function formChangePassword_validate($form, &$sta) {
  global $mya;
  extract(just('pass1 pass2 strong pass', $sta['input']));

  if (!$mya or !$mya->admin) {
    if (!$strong and u\weakPass(@$pass1)) return say('weak pass', 'pass1');
    if (isset($pass) and !$mya->passwordOkay($pass, 'pass', $err)) return w\say($err, 'pass');
  }
  if ($pass1 != $pass2) return say('mismatch', ['thing' => t('password')], 'pass1');
}

function formChangePassword_submit($form, &$sta) {
  extract($info = just('pass1', $sta['input']));
  global $mya;
  $mya->update('pass', $pass1);
  say(t('Your new password has been saved.'));
  return r\go('/settings/security');
}

/**
 * Login from elsewhere.
 *//*
function formSinx($form, &$sta) {
  extract(just('id pw pw2', t\POST())); // posted from promo site or admin computer

  if (flooding($uid = r\loginString(@$id), $sta)) return r\go('', 'flooded', 'ERR'); // getting hammered
///  if (!\user_authenticate($name = r\acct($uid)->name, @$pw)) return r\go('', 'bad login', 'ERR');
  $a = r\acct($uid);
  // if admin, check pw2 against $a->pw2 (a datafield hash)
  $sta['uid'] = ((isDEV and $uid == 1) or $a->passwordOkay(@$pw, 'pass', $err)) ? $uid : w\say($err, 'pass');
  if (!$sta['uid']) return r\go('', 'bad login', 'ERR');
  noFlood($sta);
  $input = ['name' => $a->name];
  formSignin_submit('', compact('uid', 'input'));
}*/

/**
 * Completely redo the login form (see user_login() in user.module).
 */
function formSignin($form, &$sta) {
  global $base_url;

  extract(just('name pw2 vKeyE', @$sta['input']));
  if (!isset($name)) $name = @$_GET['name']; // allow links to signin (for example from app)
  //$name = 'L5MA LLDC 3MBG';
  if (strlen(str_replace(' ', '', @$name)) >= ICARD_CODELEN_MIN and !strpos($name, '.') and !db\exists('users', 'name=:name', compact('name'))) {
    \drupal_get_messages(); // drop previous errors
    if (r\iCardAcct($name)) return r\go("signup/code=$name"); // invitation card manual signup!
    return r\go('accept', 'bad invite num', 'err');
  }
  unset($form['actions']);
  unset($form['pass']);
  focusOn((@$name == 'admin' or strlen(@$name) > 4) ? 'pass' : 'name');

  $title = item(t('Welcome to %PROJECT!'));
  $signup = isDEV ? "<a href=\"$base_url/signup\">Signup</a>" : '';
  $subtext = w\item(t('<p>Not yet a member? <%a>Check it out</a>!</p>', '_a', w\atag(r\promoLink(''))) . $signup . t('<p><b>TIP</b>: Try not to sign in to your financial accounts on a public computer. Or if you do, be careful! Check the address bar at the top of the screen to make sure you have the right website (<b><em>%BASE_URL/</em>...</b>). And be sure to sign OUT when you\'re done!</p>'));

  $_a = w\atag('/settings/password/' . @$name, ['tabindex' => 3]); // uses $name, so must precede $name = textField
  $passDesc = t('<%a>Sign-in problems?</a>', compact('_a'));
  list ($name, $pass) = w\signinFlds(@$name, t('Your account ID or email address'), $passDesc);
  $pw2 = hidFld(@$pw2 ?: ''); // extra password for admins
  $vKeyE = hidFld(@$vKeyE ?: ''); // extra password for admins
  
  $submit = submit(t('Sign in'));
  $form = compact(ray('title name pass pw2 vKeyE submit subtext'));

  $form['external_input'] = hidFld(serialize(@$sta['input'])); // pass this to rweb_user_login

  $form['#attributes']['class'][] = 'rweb labeled';
//  if (TRUE) js('e:\\rCredits-admin.js', 'external', 'footer'); // get extra admin password
//  js('radiocheck.js', 'file', 'footer'); // this normally gets called in showForm()
  return labeled($form);
}

/**
 * Replacement for user_login_authenticate_validate()
 * See the original function for explanation of flood control.
 * Accept name (short name) or account ID, with password.
 * Sets $sta['uid'] to signify successful authentication.
 * @param string $type: 'acct', 'pw', or 'both' -- what parameters to check
 */
function formSignin_validate($form, &$sta, $type = 'both') {
  extract(just('name pass pw2 vKeyE', $sta['input']));
  if (isDEV and @$name == 'admin' and !a(1)) {
    require_once __DIR__ . '/../admin/admin.inc';
    a\setupBasicAccounts(); // happens sometimes during testing
  }
  if (!$uid = r\loginString(@$name)) return w\say('bad login', 'name');
  if (w\flooding($uid, $sta, $err)) return w\say($err, 'pass');
  $a = r\acct($uid);
  $sta['uid'] = ((isDEV and $uid == 1) or $a->passwordOkay($pass, 'pass', $err)) ? $uid : w\say($err, 'pass'); // ignore admin pass on dev machine
  w\updateFlood($sta, $success = (bool) $sta['uid']); // should be before pw2 and vKeyE checks
	if (!$success) return w\say('login failed', 'name');

  if ($uid == 1) { // later this should be if ($a->regAdmin) -- regional Admin permission
    $pw2 = @$pw2 ? u\b64decode($pw2) : (isDEV ? DEV_PW2 : '');
    if ($pw2 and !$a->pw2) a(1)->update('pw2', r\passHash($pw2)); // first ever admin signin sets pw2
    if (!$a->passwordOkay($pw2, 'pw2', $err)) return w\say(t('Admin requires second pass.'), 'pass');
    r\setCryptCook('pw2', $pw2); // store as cookie, so pw2 is never on server
		if (isDEV) u\setDft($vKeyE, \variable_get('vKeyE', '')); // make it easier to sign in
		if (@$vKeyE) { // set cookie for very-secure private key, encrypted (encrypt it further for cookie)
			if (!$vKeyE = u\b64decode($vKeyE)) return w\hack(t('bad vKeyE'));
		  r\setCryptCook('vKeyE', $vKeyE);
			if (isDEV) \variable_set('vKeyE', $vKeyE); // remember new vKeyE, make it easier to sign in (this is not redundant)
		}
  }

  return TRUE; // TRUE is used by formBuy()
}

/**
 * Finish signing in.
 * @param assoc $sta: intermal input or external input (from a member merchant website), including
 *   $uid: record ID of account signing in
 * @param string $goto: what page to start on for non-admin
 */
function formSignin_submit($form, &$sta, $goto = 'summary') {
  extract(just('uid input external_input vKeyE', $sta));
  if (!@$uid) return hack('sign-in is not authorized');
  $mya = r\acct($uid);
  global $user; $user = $mya->account('pass timezone'); // timezone keeps Drupal happy in bootstrap.inc
  $user->uid = $uid; // uid is not returned by ->account() (not sure why)
  \drupal_session_regenerate();
  
//  foreach ($_SESSION as $key => $value) if (u\abbreviates('rcredits_', $key)) unset($_SESSION[$key]);
//  svar('external_input', @unserialize($sta['external_input'])); // save params from external online merchant

//  svar('myid', $uid);
//  svar('scanned_in', FALSE);
  setAcct($uid); // , TRUE);

//  r\setCook('loginto', '', r\rTime()-1); // no more default login
  u\loga('signin', ['name' => $mya->name]);
//  if ($mya->superAdmin) f('a.adminSignin');
  if (isSTAGE and !$mya->cAdmin) f('a.makeTestAdmins'); // make sure rCOs can test stuff
  return r\go($mya->admin2 ? 'sadmin/followup' : $goto);
}

function formPass($form, $sta, $id = '') {
  $id = urldecode(u\urlArgs());
  $title = item(t('Request New Password'));
  $name = textFld(t('Account:'), t('Username (the letters of your full name, all lowercase), Email, or Account ID'), required(u\neq($id, 'password', '')));
  $submit = submit(t('Request'));

  $form = compact(ray('title name submit'));
  focusOn('name');
  return labeled($form);
}

function formPass_validate($form, &$sta) {
  extract(just('name', $sta['input']));
  if (!@$name) return say('missing field', ['field' => 'account'], 'name');
  if (!@$uid = r\loginString($name)) return say('bad account id', 'name');
  $a = r\acct($uid);
  if ($a->co) return say('no co pass', ['company' => $a->fullName], 'name');
  $sta['input']['uid'] = $uid;
}

/**
 * Handle request to reset password or resend verification email
 * @param string $goto: where to redirect (defaults to empty page if resetting password)
 * @see formResend_submit()
 */
function formPass_submit($form, &$sta, $goto = '') {
  extract(just('uid', $sta['input']));
  $a = r\acct(@$uid); // defaults to current account when called from formResend_submit (without uid)
  $myid = @$uid ?: $a->id;
  $name = $a->name;
  $code = $a->oneTimePass($name);
//  list ($region, $code) = [strtolower(R_SERVER_ID), $pw];
  r\notify($myid, $goto ? 'verify' : 'password-reset', compact(ray('name qid code')), TRUE);
/**/  if (isDEV or (NOT_PRODUCTION and $a->cAdmin)) w\say(t('Attention admin: code=%code Link: <a href="%BASE_URL/reset/id=%name&code=%code">reset</a>', compact(ray('name code'))));
//  r\tellAdmin('password reset', compact(ray('name myid code')));
  return r\go($goto ?: '/empty', $goto ? t('Email sent') : 'password reset');
}

/**
 * Show a list of participating businesses in a given region.
 * @param string $args: optional parameters from URL:
 *    where   community qid or start of zip pattern
 *    cos     part of company name or industry category
 */
function formFindCo($form, &$sta, $args = '') {
  global $mya;
  extract(just('where cos', $args));

  $list = w\directoryList(@$cos, @$where ?: @$mya->community);
  $list = "<div class=\"well\">$list</div>";
  
  $form = array(
    'title' => item(t('Find companies in your region')), // should be 'Find member businesses in your region'
//    'subtext' => item(t('for a country name or postal code...')),
//    'which' => textFld(t('Search for:'), [t('Whatever'), t('Type part of company name or industry category')], dft(@$cos) + autocomplete('industry')),
    'which' => textFld(t('Search for:'), [t('Whatever'), t('Type part of company name or industry category')], dft(@$cos)),
    'region' => textFld(t('Where:'), [t('Start of postal code'), t('Type the first few characters of your postal code<br>For example, use 013 for Franklin County, Massachusetts; 05 for Vermont, etc.')], dft(@$where)), // or country name
    'submit' => submit(t('Find')),
    'list' => w\item($list),
  );

  return labeled($form);
}

function formFindCo_validate($form, &$sta) {
}

function formFindCo_submit($form, &$sta) {
  extract($sta['input']);
  r\go("community/find-company/where=$region&cos=$which");
//  svar('which_companies', trim($which));
//  svar('region', trim($region));
}

/**
 * Send the new member a link and a code, to verify their email address.
 */
function formVerify($form, &$sta, $arg = '') {
  global $base_url, $mya;

  $title = item(t('Verify Your Email Address'));
  $subtext = item(t('sent email', 'email', $mya->email));
  $resend = ' &nbsp; ' . t('<%a>Resend or change email</a>', '_a', w\atag('/settings/resend'));
  $verify = textFld(t('Code:'), [t('Verification Code')], required() + suffix($resend));
  svar('msg', 'yes');
  $form = compact(ray('title subtext verify'));
  if (!$mya->co) $form += w\pickPassword(FALSE);

  $mya->verifySsnInBackground();
  
  return labeled($form + w\setupFoot());
}

function formVerify_validate($form, &$sta) {
  global $mya;
  extract(just('verify', $sta['input']));
  if (!$mya->passwordOkay(strtoupper($verify))) return say(t('That is not the right code.'), 'verify');
  if (!$mya->co) formChangePassword_validate($form, $sta);
}

function formVerify_submit($form, &$sta) {
  global $mya;
  if (!$mya->co) formResetPassword_submit($form, $sta);
  return w\goNextStep('verify');
}

function formResend($form, &$sta) {
  global $mya;
  $title = item(t('Resend Verification Email'));
  $email = textFld(t('Email:'), [t('Email'), t('Type carefully.')], required($mya->email));
  $submit = submit(t('Resend'));
  return labeled(compact(ray('title email submit')));
}

function formResend_validate($form, &$sta) {
  global $mya;
  extract(just('email', $sta['input']));
  if (!emailOkay($email, $mya->co, $mya)) return;
}

function formResend_submit($form, &$sta) {
  global $mya;
  extract(just('email', $sta['input']));
  $mya->update('email', $email);
  return formPass_submit($form, $sta, '/settings/verify');
}

function formCompany($form, &$sta, $arg = '') {
  global $base_url;
  global $mya;
  $myid = $mya->id;
//  if ($arg == 'gotPhoto') say('got photo');

  $myCats = db\q('SELECT iid FROM r_user_industries WHERE uid=:myid', compact('myid'))->fetchCol();
  $links = t('<%a>See your public %PROJECT web page</a> (in a new window)', 
    '_a', w\atag("/member/$mya->name", ['id' => 'show-webpage'] + w\away()));
  $code = w\item($mya->emailCode, t('Secret Code:'), t('Use this code for a <%a>Pay with Common Good</a> button on your website.', '_a', w\atag('https://docs.google.com/document/d/1QpOW0WU7RiUV900PMekyH7ve3-_9yjCnQn627cWovOQ')));

  $canDescs = ray(APP_CAN_BIT_DESCS);
  $permissions = '';
  if (!$mya->member and !$mya->stepDone['company'] and !$mya->coCan(APP_CANS + APP_CAN_BITS)) foreach (ray(CO_DFTS) as $i) $mya->setCoBit(APP_CANS + $i); // set defaults if doing initial account setup AND manager has no permission to charge custs yet
  
  foreach ($canDescs as $i => $desc) {
    $outbox = <<<EOF
<div class="form-item form-type-checkbox">
  <input type="checkbox" name="can[$i]" CHECKED class="form-checkbox" />
  <div class="description"><div class="box"></div></div>
</div>
EOF;
    $j = $i + APP_CAN_BITS; // convert signed out to signed in index
    $inbox = str_replace("can[$i]", "can[$j]", $outbox);
    if (!$mya->coCan(APP_CANS + $i)) $outbox = str_replace('CHECKED ', '', $outbox); // uncheck if not set
    if (!$mya->coCan(APP_CANS + $i + APP_CAN_BITS)) $inbox = str_replace('CHECKED ', '', $inbox);
    $permissions .= "<tr><th>$desc</th><td>$inbox</td><td>$outbox</td></tr>\n";
  }

  $permissions = <<<EOF
<div id="permissions"><table>
<tr id="perm-head"><td></td><th>Signed IN</th><th>Signed OUT</th></tr>
$permissions
</table></div>
EOF;

  $title = item(t('Company Information'));
  $links = item($links, ' ');
  $name = item($mya->fullName, t('Company name:'));
  $photo = item(t('<%a>Change your company photo</a>', '_a', w\atag('/settings/photo?' . rand())), t('Photo:'));
  $private = boxFld('private', t('Private:'), t('Hide this company from the public (omit from public listings)'), $mya->coCan(CO_PRIVATE) ?: 0);
  $categories = selectFld(t('Categories:'), t('Hold down the Ctrl key to select more than one'), ['multiple' => TRUE] + dft($myCats), coCats());
  $selling = areaFld(t('Selling:'), [t('Products'),t('Enter one or more <b>VERY SHORT</b> transaction descriptions (for example "food") for when you make a sale &mdash; one line for each. Put the most common one first. This will appear in the description of the transaction for both you and the customer (for example "$20 for <i>food</i> on 1/23/2014")')], required($mya->selling));
  $can2 = item($permissions, t('App permissions:'), t('Download the CGPay app from Google Play Store. Limit app permissions here, or go to <%aRel>Relations</a> settings to limit them for each agent.', '_aRel', w\atag('/settings/relations')));
//    $shareRpos = boolFld(t('Share rPOS:'), t('Allow other companies to use our POS device(s).'), $mya->coCan(CO_SHARE_RPOS) ?: 0);
//    $requireCashier = boolFld(t('Must scan in:'), t('Require a cashier to sign in before using rPOS (this also allows you to share the device with another company).'), $mya->coCan(CO_REQUIRE_CASHIER) ?: 0);
  $website = textFld(t('Website:'), [t('Website address'), t('Especially if you want to accept payments on your website, be sure to list it here.')], dft($mya->website));
  $descPreface = item(t('<br>What does the company do? This description will appear on your %PROJECT web page.')); //, '', ['class'=>'help-block']);
//  $description = fld('text_format', t('Description:'), [t('Arbitrarily complex description')], ['format' => 'filtered_html'] + dft(strtr($mya->description, ["\r" => '', "\n" => '', '<br>' => PHP_EOL, "\0" => ''])));
  $description = areaFld(t('Description:'), t('Arbitrarily complex description, using <%a>markdown</a>. Use "&#92;" for line breaks.', '_a', w\atag('http://commonmark.org/help/')), w\dft($mya->description));
  $shortDesc = textFld(t('Short Desc:'), [t('Short description'), t('Short description of your company\'s products and services. Maximum 35 characters.')], attrib(['maxlength'=>35]) + required($mya->shortDesc));
  $employees = textFld(t('Employees:'), [t('Employee count'), t('How many employees do you have?')], required($mya->employees));
  $gross = textFld(t('Annual Gross:'), [t('Approximate annual gross income')], required($mya->gross));
  $tips = boolFld(t('Tips:'), t('After each %PROJECT Card sale, ask the customer to choose a tip percentage (or no tip)'), $mya->coCan(CO_TIP) ?: 0);
  if ($mya->cAdmin) {
    if (FALSE) $fast = boolFld(t('No ID Chk:'), t('Never ask customer for photo ID (set by admin)'), $mya->coCan(CO_FAST) ?: 0); // no exemptions
    $atm = boolFld(t('ATM service:'), t('Allow company to trade %RCREDITS for cash even if their balance is less than their rewards (in-person only).'), $mya->coCan(CO_ATM) ?: 0);
  }
//  $submit = submit();
  return labeled(compact(ray('title links photo name private categories selling shortDesc employees gross website code descPreface description can2 tips fast atm')) + w\setupFoot(''));
}

function formCompany_validate($form, &$sta) {
  extract(just($fields = 'selling employees gross', $sta['input']));
  $selling = explode("\n", $selling);
  foreach ($selling as $one) {
    $one = trim($one); // don't allow empty or reserved values
    if (!u\nonish($one) and !in_array($one, array('', S_REFUND, S_USD_OUT)) and !r\usdin($one)) $new[] = strtolower($one);
  }
  if (!@$new) return say('missing field', ray('field', 'selling'), 'selling');
  $selling = join("\n", $new);
  if ($err = u\badAmount($employees, '>=0')) return sayFieldErr($err, 'employees');
  if ($err = u\badAmount($gross, '', 2, '')) return sayFieldErr($err, 'gross');
  u\preray(compact(ray($fields)), $sta['input']);
}

function formCompany_submit($form, &$sta) {
  global $mya;

  extract($info = just('private description shortDesc website selling categories can requireCashier employees gross tips fast atm', $sta['input']));
  
  $website = str_ireplace('http://', '', @$website);

  $mya->setCoCans(@$can);
  //$mya->setBits(APP_CAN_BITS, $can, 'co');
//  $mya->setBitx(CO_REQUIRE_CASHIER, @$requireCashier, 'coFlags');
  $mya->setCoBit(CO_PRIVATE, @$private);
  $mya->setCoBit(CO_TIP, $tips);
  if ($mya->cAdmin) $mya->setCoBit(CO_FAST, @$fast);
  if ($mya->cAdmin) $mya->setCoBit(CO_ATM, $atm);
  $mya->update(compact(ray('description shortDesc website selling employees gross')));
  
  if (@$categories) $mya->setCategories($categories);

//  $mya->stepDone('company', $info);
//  return $mya->ok ? say('options saved') : r\go('status', 'options saved|step completed');
  return w\goNextStep('company', NULL, $info);
}

/**
 * Show a page when someone scans an account ID QR, for example with QRDroid.
 * Cases:
 *   Curious about someone's card (not signed in, scanned person) also give a link to the promo site
 *   Agent looking at a business (signed in, scanned company) - show Site button (to company's rCredits page)
 *   Person looking at a business (signed in, scanned company) - show Site button on the Pay page (NYI)
 
 UNUSED:
 *   Scanning in (not signed in, scanned agent)
 *   Signing in (not signed in, scanned person) - show login page with account ID filled in
 *   Agent charging a customer (signed in, scanned any) - show photo and Charge button
 *   Agent paying someone (signed in, scanned any) - show Pay button
 *   Person paying someone (signed in, scanned any) - go to Pay page

 * @param string $who: the part of a scanned rCard's QR code after the domain and '/I/':
 *   the account's qid tail, then "." (pro se) or "-" (agent), then an rCard security code:
 *   must match the cardCode (for pro se) or cardCode2 (for agent) stored in the account's secure field.
 */
function formI($form, &$sta, $who = '') {
  $parts = preg_split('/(' . R_MARKS . ')/', $who, 0, PREG_SPLIT_DELIM_CAPTURE);
  $count = count($parts);
  
  if ($count == 3) { // new format: DEF.whatever or DEF-whatever (agent)
    list ($tail, $mark, $code) = $parts;
    $region = R_SERVER_ID;
    if ($mark == R_AGENT_URL_MARK and $qo = r\qo($region . $tail) and $info = r\relation('main,other', $qo->id)) {
      extract($info);
      $a = r\acct($main, $other);
      if ($a and $a->co) return r\go("member/$a->name");
    }
  } 
  
  return r\go(r\promoLink(''));
}

function formPrefs($form, &$sta) {
  global $base_url;
  global $mya;
  $title = item(t('Account Preferences'));
//  $virtualMaxMessage = $mya->co ? t(' If you choose to enable payment exchanges, this setting is moot (irrelevant and unused).') : '';
//  $subtext = item(t('The suggested settings are best for most people. You can change your choices at any time.'));

  $roundup = w\roundupFld($mya);
  $crumbs = $mya->crumbs * 100;
  $crumbs = w\textFld(t('Crumbs (%):'), [t('Donate a small percentage of what you receive.'), t('Another way to fund the common Good! Contribute a small percentage of every payment you receive. For example, "1%" means donate one penny for each dollar you receive. Smaller amounts such as 0.5% are also very welcome.')], dft($crumbs ? "$crumbs%" : ''));

  $mediumRadios = array(
    t('I will accept electronic statements**.'), 
    t('I choose to receive printed statements by mail. <div>I agree to pay $%R_STATEMENT_COST per month to cover the postage and handling costs for this service.</div>')
  );
  $statements = radiosFld(t('Statements:'), '', dft((int) $mya->can(B_PAPER)), $mediumRadios);

  $showAdvancet = item(t('<a>Show advanced options</a>'), ' '); // different name from showAdvanced (for CSS)

  // Advanced settings
//  if ($mya->ok and $mya->share) $share = w\shareFld($mya); // don't show this during signup (it's on the donation page)

  $noticeRadios = array(t('daily'), t('weekly'), t('monthly'));
  $dft = $mya->can(B_WEEKLY) ? 1 : ($mya->can(B_MONTHLY) ? 2 : 0);
  $notices = radiosFld(t('Email Notices:'), t('How often, at most, do you want an email digest of your %PROJECT notices? (No email if no notices.)'), dft($dft), $noticeRadios);
//  $smsNotices2 = boxFld('smsNotices', t('SMS notices:'), t('Send me a text message when I receive a payment, charge, or invoice (requires a <a href="' . $base_url . '/settings/boxes">connected cell phone</a>).'), $mya->can(B_BYSMS)); // (currently disabled)

  $secretBal2 = boxFld('secretBal', t('Secret Balance:'), t("Don't let merchants see my balance, even if I ask."), $mya->can(B_SECRET));
  // Double confirmation: by SMS, by email, either. require extra confirmation of crucial account changes
  $nosearch2 = boxFld('nosearch', t('No Search:'), t("Require other members to identify my account by name or account ID only &mdash; not by phone or email."), $mya->can(B_NOSEARCH));
  $debtOk2 = boxFld('debtOk', t('Debt Okay:'), t('Let me use my rCard as a <i>credit</i> card, allowing my account balance to go negative, limited by my current credit limit (currently @limit &mdash; based on my account activity). I understand there will be a fee (currently $@R_DEBT_FEE plus @R_DEBT_PERCENT% per month) if I fail to bring my balance back up to zero within @R_DEBT_DAYS days.', ['limit' => u\fmtAmt(-$mya->floor)]), $mya->can(B_DEBT));
  $posttext = item(t(<<<EOF
<h4>** Disclaimers required by the IRS:</h4>
<p>Your choice of how to receive statements applies to all statements you receive from now on. You can change your preference at any time by returning to this Preferences page (on the Settings menu) or by notifying the regional administrator by mail: %regName, %regAddr. Any change will be confirmed in writing (electronically if you accept electronic statements, otherwise by US Mail).</p>
<p>To view your electronic statements, you need a typical computer or mobile device connected to the internet, including an email program and a web browser. To print the statements, you need a printer.</p>
<p>Your annual tax statements will be accessible online from January through December.</p>
EOF
  , ray('regName regAddr', r\regionfield('legalName'), r\regionfield('postalAddr'))));

  $advancedFields = 'achMin share smsNotices2 notices secretBal2 nosearch2 debtOk2';
  
//  $submit = submit(t('Update Preferences'));
  

  jsx('advanced-prefs', compact('advancedFields'));
  $form = compact(ray('title subtext roundup crumbs statements showAdvancet ' . $advancedFields)) + w\setupFoot() + compact('posttext');
  return labeled($form);
}

function formPrefs_validate($form, &$sta) {
  extract(just('crumbs', $sta['input']));
//  global $mya;
  if (!$crumbs = str_replace('%', '', $crumbs)) $crumbs = 0;
  if ($err = u\badAmount($crumbs, '>=0', 1, 100)) return say($err, 'crumbs');
//  if ($mya->ok and $err = w\badShare($sta['input']['share'], TRUE)) return say($err, 'share');
  u\preray(compact('crumbs'), $sta['input']); // update trimmed percentage
}

function formPrefs_submit($form, $sta) {
  include_once __DIR__ . '/../admin/admin.inc';
  global $mya;

  $fields = 'share crumbs';
  extract(just($fields . ' roundup smsNotices notices statements nosearch debtOk secretBal', $sta['input']));
//  $mya->setBit(B_NOTIFY_EMAIL, $notifyBy & 1, FALSE);
//  $flags = $mya->flags;
  foreach (ray($fields) as $k) $old["_old $k"] = $mya->$k;
  $old += ['_old flags' => u\bits($mya->flags)];
  $bits = ray('roundup weekly monthly paper secret debt nosearch', $roundup, @$notices == 1, @$notices == 2, @$statements, @$secretBal, @$debtOk, @$nosearch);
  $crumbs /= 100; // convert percentage to decimal
  $info = compact(ray($fields)) + $bits;

  if (@$statements) r\tellAdmin(t('%who wants paper statements', 'who', $mya->mainQid), ['topic' => t('paper')]);
  
  $mya->update($info);
//  $mya->stepDone('prefs', $details = $old + $info + ['flags' => u\bits($mya->flags)]);
  return w\goNextStep('prefs');
//  return $mya->ok ? say('options saved') : r\go('status', 'options saved|step completed');
}

/**
 * Show raw data for charting.
 * This data is typical requested by cg4.us/charts.php for display in an iframe on the community/graphs page (etc)
 * @param string $args: URL query string with
 *   chart   name of chart to provide data for
 *   ctty    community to provide data for
 *   dt0     first date to include
 *   dt9     last date to include
 * @return: does not return. Prints the data (json-encoded) and exits.
 */
function chartData($args = '') {
  extract(just('chart ctty dt0 dt9', $args));
  showCharts(@$chart, @$ctty, $data);
/**/  if (!@$data) die(t('No such chart data.'));
/**/  echo $data;
  exit();
}

function formGraphs($form, &$sta, $args) {
  $a = w\eLinkAcct($sta, $args, 'any'); // may be called with qid=<communityUid>
  extract(just('qid', $args));

  $title = item(t('Community Statistics'));
  $dft = ($a and @$qid !== '0') ? $a->community : 0; $dft += 0; // + 0 for admin
  $subtext = item(t('This page helps us keep an eye on our economy so we can manage it effectively together. Choose a chart. <%b>Hover</b> over a graph for the numbers.', '_b', 'class="loud"'));
  
  $charts = item(w\chartFrame('growth', TRUE, @$a->community ?: 0)); // src must be first
  if (u\test()) $charts = w\item(w\showCharts('all', $dft, $chartData));
  
  return compact(ray('title subtext charts'));
}

function formGraphs_validate($form, &$sta) {
  formTxs_validate($form, $sta);
}

function formGraphs_submit($form, &$sta) {
  formTxs_submit($form, $sta, 'community');
}

/**
 * Show accounts and recent transactions and ACHs that carry risk of fraud.
 */
function formFlags($form, &$sta, $args = '') {
  global $mya;
  $MAXLINES = 20; // max number of lines to show in each section
  include __DIR__ . '/risk-descs.inc';

// fails  u\setDft($args['period'], 1);
  extract(just('period starting ending download downloaded', $args)); 
  if (!@$period) $args['period'] = $period = 7;
  extract(just('dateRange url starting ending', dateRange($args, 'community/flags', [], '', FALSE)));
  $url = hidFld($url);
  
  $title = item(t('Suspicious Activity Report')); //  . strftime('%A, %m/%d/%y')
  $subtext = item(t(t('<p>Any potentially suspicious accounts, transactions, and bank transfers (ACHs) are listed here, so all members can keep an eye on things. System administrators will investigate any transaction with a suspiciousness score of %K_RED or more (shown in red). If you don\'t see any red, that means nothing even remotely suspicious happened. But for the sake of transparency, we show the %MAXLINES top scores in each category anyway.</p><p>Green risks are "good" (they mitigate other risk factors). Hover over any risk for a brief description or click it for details. To see a company\'s name, hover over its account ID.</p>'), compact('MAXLINES')));

  $achHeader = $txHeader = $acctHeader = '';
  $accts = $txs = $achs = '';
  $headers = ray(t('Score Account Type Created Risks'));
  foreach ($headers as $v) {$vLow = strtolower($v); $acctHeader .= "<th class=\"k-$vLow\">$v</th>";}
  $acctHeader = "<tr>$acctHeader</tr>";
  list ($cttyCrit, $cttysCrit) = (!$mya or $mya->admin)? [1, 1] 
    : ["community=$mya->community", "$mya->community IN (u1.community, u2.community)"];
  $sql = <<<EOF
    SELECT risk AS score,uid,IF(:IS_CO,'Co','Indiv') as type,created,risks FROM users 
    WHERE uid>0 AND :IS_OK AND $cttyCrit
    ORDER BY risk DESC LIMIT :K_LINES
EOF;
  $q = db\q($sql);
  for ($i = 0; $line = riskLine($q, K_ACCT_RISKS, $red) and ($i < K_LINES); $i++) $accts .= $line;
  
  $headers = ray(t('Score Tx# Date Amount From To Description Risks'));
  foreach ($headers as $v) {$vLow = strtolower($v); $txHeader .= "<th class=\"k-$vLow\">$v</th>";}
  $txHeader = "<tr>$txHeader</tr>";
  $subs = compact('starting', 'ending');
  $sql = <<<EOF
    SELECT t.risk AS score,xid,t.created,amount,payer,payee,payeeFor AS description,t.risks 
    FROM r_txs t LEFT JOIN users u1 ON u1.uid=payer LEFT JOIN users u2 ON u2.uid=payee 
    WHERE (payer>0 OR ABS(amount)>:K_CTTY_THRESHOLD) 
    AND $cttysCrit AND t.created BETWEEN :starting AND :ending 
    ORDER BY t.risk DESC LIMIT :K_LINES
EOF;
  $q = db\q($sql, $subs);
  for ($i = 0; $line = riskLine($q, K_TX_RISKS, $red) and ($i < K_LINES or $red); $i++) $txs .= $line;

  $headers = ray(t('Score Tx# Date Amount Account Description Risks'));
  foreach ($headers as $v) {$vLow = strtolower($v); $achHeader .= "<th class=\"k-$vLow\">$v</th>";}
  $achHeader = "<tr>$achHeader</tr>";
  $sql = <<<EOF
    SELECT t.risk AS score,txid,t.created,ABS(t.amount) AS amount,payee,IF(t.amount>0,'in','out') AS way,t.risks 
    FROM r_usd t LEFT JOIN users u ON u.uid=payee
    WHERE t.created BETWEEN :starting AND :ending AND $cttyCrit
    ORDER BY t.risk DESC LIMIT :K_LINES
EOF;
  $q = db\q($sql, $subs);
  for ($i = 0; $line = riskLine($q, K_TX_RISKS, $red) and ($i < K_LINES or $red); $i++) $achs .= $line;
  
  $table = item(<<<EOF
  <center>
  <h3>ACCOUNTS</h3>
  <table id="accts">
  $acctHeader
  $accts
  </table>
  <h3>TRANSACTIONS</h3>
  <table id="txs">
  $txHeader
  $txs
  </table>
  <h3>ACHs</h3>
  <table id="achs">
  $achHeader
  $achs
  </table>
  </center>
EOF
  );

  if (@$downloaded) jsx('download', compact('url'));
  return labeled(compact('title') + $dateRange + compact('subtext', 'table'));
}

function formFlags_validate($form, &$sta) {w\dateRangeValidate($sta);}
function formFlags_submit($form, &$sta) {dateRangeRedirect('community/flags', $sta);}

function formCttyFunds($form, &$sta) {
  global $mya;
  $title = item(t('Funds By Community'));
  $rewardsDesc = @$mya->cttyRewardy ? t('Incentive Rewards') : t('an automated increase in a member\'s credit line');
  $subtext = item(t('<p>How %RCREDITS came in or out of each community. That is, how many were used, received, and issued by each community &mdash; either in exchange for US Dollars (green), as %rewardsDesc (red), or allocated democratically (blue). A community\'s US Dollar Pool balance is the sum of the green column amounts.</p><p>Hover over headings for more information.</p>', compact('rewardsDesc')));
  $heads = ray(t('Community USD Trade-IN Trade-OUT Signup+ Purchase+ Invite+ Inflate+ Spent Grant Loan Invest Fees TOTAL'));
  $headHelps = ray(t('Community name (abbreviated),In exchange for US Dollars,Value of goods and services imported from other communities (negative because credit leaves the community),Value of goods and services exported to other communities,Signup bonuses (incentive rewards for opening a %PROJECT Account),Purchase rewards (incentive rewards for buying or selling using %PROJECT),Incentive rewards for inviting (and helping) a new member to open a %PROJECT Account,Monthly inflation adjustments,%PROJECT community spending (net),%PROJECT community grants,Zero-interest loans from the %PROJECT community,Investments by the %PROJECT community,Fees collected by the %PROJECT community,Total %RCREDITS issued to date'));
  $classes = ray(' usd usd usd reward reward reward reward ctty ctty ctty ctty ctty none');
  $headers = '<tr>';
  foreach ($heads as $k => $v) {
    $head = w\popHelp($v, $headHelps[$k]);
    $class = $classes[$k];
    $headers .= "<th class=\"$class\">$head</th>";
  }
  $headers .= '</th></tr>';
//  $headers = '<tr><th>' . join('</th><th>', $headers) . '</th></tr>';
  
  $q = db\q("SELECT DISTINCT ctty FROM r_stats s LEFT JOIN users u ON u.uid=ctty ORDER BY ctty=0, u.name NOT LIKE '%.', u.fullName");
  while ($row = $q->fetchAssoc()) { // not fetchField because one value is 0
    extract($row);
    $stats = []; // GET FROM each ctty's stats field NOT w\fundStats(r\stats($ctty), FALSE, '1');
    $stats['TOTAL'] = $stats['r']; unset($stats['r']); // change column name and move to end
    $list[] = '<tr><td>' . join('</td><td>', $stats) . '</td></tr>';
  }
  $list = join("\n", @$list ?: ['<b>' . t('No statistics are available.') . '</b><br>&nbsp;']); // @ is for tests
  
  $list = item(<<<EOF
<table id="cttyFunds">
$headers
$list
</table>
EOF
  );
  return compact(ray('title subtext list'));
}

/**
 * Present a choice of data queries
 */
function formData($form, &$sta, $args = '', $isco = FALSE) {
  $isco = ($isco == 'co');
  require_once __DIR__ . ($isco ? '/queries-co.inc' : '/queries.inc');
  extract(just('qName', $args));
  
  if ($qName0 = urldecode(@$qName) and $sql = @$queries[$qName0] and $qName = w\queryPermitted($qName0, $sql, $subtext)) {
    $title = w\item($qName);
    $subtext = w\item($subtext ?: '&nbsp;');
    $report = w\item(w\showRecords(db\q($sql)->fetchAll()));
    $form = compact(ray('title subtext report'));
  } else {
    $title = w\item($isco ? t('Company Reports') : t('Community and Money Data'));
    $subtext = w\item(t('Click the query of your choice. If you need information not provided here, <%a1>request it</a>!', ['_a1' => u\emailTag(CGF_EMAIL, t('data request'))]), '&nbsp;');
    $isco = w\hidFld($isco ?: 0);
    $form = compact(ray('title subtext isco'));
    
    foreach ($queries as $k0 => $v) {
      if ($k = w\queryPermitted($k0)) $form[$k0] = w\submit($k, 'default', 'xs');
    }
  }
  return $form;
}

function formData_submit($form, &$sta) {
  extract(just('isco', $sta['input']));
  require_once __DIR__ . ($isco ? '/queries-co.inc' : '/queries.inc');
  $op = w\opText($sta);
  $d = substr(op($sta), 0, 1);
  if (strpos('0123456789', $d) !== FALSE) $op = $d . $op; // leading digit, if any
  $url = $isco ? '/company-reports' : '/community/data';
  r\go("$url/qName=" . urlencode($op));
}

/**
 * Return a formatted line for the next record, describing its risks.
 * @param SQLresult $q: the query result
 * @param string $descs: a space-delimited string array of risk descriptions and weights
 * @param bool $red: (RETURNED) the
 * @return an HTML table row to show the record
 */
function riskLine($q, $descs, &$red = '') {
  global $riskUids; if (!@$riskUids) $riskUids = [];
  global $base_url; 
  $abridgable = ray(t('labor,automatic transfer,donation,deferred'));
  if (!$row = $q->fetchAssoc()) return FALSE;
  
  if (@$row['amount'] + 0 < 0) list ($row['payer'], $row['payee'], $row['amount']) = array(@$row['payee'], @$row['payer'], -$row['amount']); // don't show user negative amounts
  extract(just('uid xid created description score amount risks', $row));

  $extra = (($mya = r\acct()) and $mya->can(B_ADMIN2));
  global $riskQ, $riskCount; 
  if ($q == @$riskQ) {
    $riskCount++;
    if ($riskCount > K_LINES) return FALSE;
  } else {$riskQ = $q; $riskCount = 1;}
  
  u\setDft($score, '');
  $score = round($score) + 0; // +0 to avoid "-0"
  $red = ($score >= K_RED);
  if ($red and $descs != K_ACCT_RISKS) $score = "<span class=\"risky\">$score</span>"; // don't redden accounts
  if ($score <= K_GREEN) $score = "<span class=\"safe\">$score</span>";
  $row['score'] = $score;
  
  foreach (just('uid payer payee', $row) as $k => $v) {
    $qo = r\qo($v);
    $qid = $qo->qid;
    $a = r\acct($v);
    if ($extra) {
      list ($region, $local) = $qo->parse();
      $v = w\popHelp($v < 0 ? t('ctty') : $local, $a->fullName, "$base_url/summary/$qid");
    } else if ($v < 0) {
      $v = t('ctty');
    } else {
      $i = array_search($qid, $riskUids);
      if ($i === FALSE) {$i = count($riskUids); $riskUids[] = $qid;}
      $local = u\n2a($i * 5, 2);
      $v = $a->co ? w\popHelp($local, $a->fullName) : $local;
    }
    $row[$k] = $v;
  }
  
  if (isset($amount)) $row['amount'] = number_format($amount, 2);
  if ($extra and isset($xid)) $row['xid'] = "<a href=\"$base_url/sadmin/tx-info/$xid\">$xid</a>";
  if (isset($created)) $row['created'] = strftime(@$uid ? '%d-%b-%Y' : '%d-%b', $created);
  if (isset($description)) foreach ($abridgable as $k) if (u\starts($description, $k)) $row['description'] = $k;
  $row['risks'] = r\riskList($risks, $descs);
  
  $line = '';
  foreach ($row as $k => $v) $line .= "<td class=\"k-$k\">$v</td>";
  return "<tr>$line</tr>\n";
}

/**
 * Accept an invitation by supplying the invitee email address.
 * @parm string $args: '', 'zip', or 'self'
 */
function formAccept($form, &$sta, $args = '') {
  if (@$args == 'zip') {
    $title = item(t('Who do you know?'));
    $friend = textFld(t('Friend\'s name:'), '', required());
    $zip = textFld(t('Their zipcode:'), '', required());
  } elseif (@$args == 'self') {
    $title = item(t('Where do you live?'));
    $friend = w\hidFld('self');
    $zip = textFld(t('Your zipcode:'), '', required());
  } else {
    $title = item(t('Accept Your Invitation'));
    $invitation = textFld(t('Invitation #:'), t('Carefully type your invitation number.'), required());
  }
  
  $submit = submit(t('Continue'));
  return labeled(compact(ray('title subtext invitation friend zip submit')));

  //$subtext = item(
//  $subtext = item(strtr(t('A short @BLURB was sent with the invitation (click the link to see it).'), ['@BLURB' => blurbLink()]));
//  $email = textFld(t('Your email:'), t('Type the email address to which the invitation was sent.'));
}

function formAccept_validate($form, &$sta) {
  extract(just('invitation friend zip', $sta['input']));
  \drupal_get_messages(); // drop previous errors
  
  if (isset($invitation)) {
    if (!r\iCardAcct($invitation)) return say('bad invite num', 'invitation');
  } elseif ($err = u\badZip($zip)) {
    return say($err, 'zip');
  } elseif (@$friend == 'self') {
    $community = r\communityUid(@$zip);
    if (r\acct($community)->invites) return say('invitation required', ['_a1' => w\atag(PROMO_URL . '/signup')], 'zip');
  }

//  if (!u\validEmail($email)) return say('bad email', compact('email'), 'email');
}

function formAccept_submit($form, &$sta) {
  extract(just('invitation friend zip', $sta['input']));
//  $email = u\cry('P', $email);
//  if (!$code = db\lookup('code', 'r_invites', 'email=:email ORDER BY (invitee=0) DESC, invited DESC', compact('email'))) return say('bad invite', 'email');
  say(t('Hurray! You qualify to open a %PROJECT Account.'));
  $code = @$invitation ?: "$friend ($zip)";
  return r\go("signup/code=$code");
}

/**
 * Show forms 1099-B for the previous calendar (or fiscal) year.
 * @param int $ending: date/time year ends (defaults to end of previous calendar year)
 */
function formTaxInfo($form, &$sta, $ending = '') {
  global $base_url;
  global $mya;
  
  if (!$ending) $ending = strtotime('last day of December last year'); // can't use setDft because cmdline param is never null
  $title = item(t('Your "Barter" Income <small>(Forms 1099-B)</small>'));
  $endDesc = u\fmtDate($ending, TRUE);

  $list = "<table id='f1099b'>\n";
  $list .= "<tr><th>Date</th><th class=\"num\">Income</th><th>From</th><th>Description</th></tr>\n";
  $total = 0;
  $negatives = 0; // total negative transactions (refunds that do not specifically reverse another tx)
  $cats = [];
  $map = [t('rebate on') => t('rewards'), t('bonus on') => t('rewards')];
  
  while ($row = be\get1099b($mya->id, $ending)) {
    extract(just('created amount payer for', $row));
    if ($amount <= 0) { // do not issue 1099-B for negative amounts (per IRC 1.6041-...(c)?)
      $negatives += $amount;
      continue;
    }
    x\addCat($cats, strtr($for, $map), $amount, $dups);
    $date = strftime('%d-%b', $created);
    $total += $amount;
    $amount = str_replace('-', '- ', number_format($amount, 2));
    $a = r\acct($payer);
    $addr = str_replace(', Massachusetts', ', MA', $a->postalAddr);
    $phone = str_replace('+1 ', '', u\fmtPhone($a->phone));
    $text = plain("$a->fullName, $addr ($phone)");
    $who = $a->fullName;
    $list .= <<<EOF
<tr>
<td>$date</td>
<td class="num">$amount</td>
<td>$who</td>
<td>$for</td>
</tr>
EOF;
  }

  x\finishCats($cats);
  $total = str_replace('-', '- ', number_format($total, 2));
  $list .= "<tr><td><b>TOTAL</b></td><td class=\"num\"><b>$total</b></td><td></td><td></td></tr>\n</table>\n";
  $list = item($list, t('Detail:'));

  $summary = '';
  foreach ($cats as $cat => $ray) { // for each category
    list ($count, $amount) = $ray;
    $amount = number_format($amount, 2);
    $summary .= <<<EOF
    <tr><td class="category">$cat</td><td class="count">$count</td><td class="amount">$amount</td></tr>\n
EOF;
  }
  $summary = <<<EOF
<table id="summary">
<tr><th>Category</th><th>Count</th><th class="num">Total</th></tr>
$summary
<tr><td><b>TOTAL</b></td><td class="count"></td><td class="num"><b>$total</b></td></tr>
</table>
EOF;
  
  $summary = item($summary, t('Summary:'));
  $regName = r\regionfield('legalName');
  $regPhone = u\fmtPhone(r\regionfield('phone'), '');
  $negatives = $negatives ? t('<p>You also had negative (refund) transactions totaling %neg. These are not reported to the IRS, so you might include this negative transaction total on line 2 of 1040 Form C.</p>', 'neg', u\fmtAmt($negatives)) : '';
 
  $subtext = item(t(<<<EOF
  <p>If you pay excise, sales or income taxes, include any income you receive through the %PROJECT system.</p>
  <p>The %PROJECT system is required by law to report (to the IRS and to state government) all %PROJECT payments made to you in the past calendar year (on Forms 1099-B). This page shows a list of those transactions. Each individual income transaction is reported.</p>
  <p class="loud">YOU are not required to file Forms 1099-B. So the information on this page is for just for your information.</p>
  <p>The purpose of 1099-B is to report transactions, not total income. So don't worry if some of the payments listed here aren't income (such as reimbursements). Also, you may receive a Form W2 or 1099-MISC from your employer or customers for some of these payments. Take care not to over-report your income by counting things twice.</p>
  <p>For more information, see <%aTips>%PROJECT Payments and Accounting Tips</a>.</p>
EOF
  , '_aTaxHelp _aTips', w\atag('/help/taxes'), w\atag('http://cg4.us/doc/payments.pdf?t=' . time())) . $negatives);
  
  $submit = w\submit(); // display suppressed in CSS
  $go = w\submi(t('Change')); // requires suppressed submit button (find a better way)
  
  $ending = w\textFld(t('For year ending:'), [t('Fiscal Year End')], w\required($endDesc) + w\suffix('&nbsp;' . \render($go)));
  $posttext = item(t('<p>This report is provided by %regName (EIN #%R_REGION_EIN). Address: %regAddr (%regPhone, %regEmail).</p><p>If you would rather receive reports by US Mail, you can change that setting in your <%aPrefs>Preferences</a>.', 'regName regAddr regPhone regEmail thisYear _aPrefs', $regName, r\regionfield('postalAddr'), $regPhone, r\regionfield('email'), date('Y'), w\atag('/settings/preferences')));
  return labeled(compact(ray('title ending subtext table summary list posttext submit')));
}

function formTaxInfo_validate($form, &$sta) {
  if ($err = u\badDate($sta['input']['ending'])) return w\say($err, 'ending');
}

function formTaxInfo_submit($form, &$sta) {
  r\go('history/tax-info/' . $sta['input']['ending']);
}

/**
 * Join an investment club or manage membership therein.
 */
function formInvest($form, &$sta, $args) {
  global $mya;
  
  if ($res = db\lookup('*', 'r_clubbed', 'uid=:id', ray('id', $mya->id))) { // member!
    extract(just('reclaim stake', $res));
    $old = hidFld(serialize(just('clid clubid stake reclaim', $res)));
    $title = t('Investment Club');
    $buttons = btn('/invest/list', t('List'))
    . btn('/invest/propose', t('Propose'));
//    . btn('/invest/rate', t('Rate'));
    $buttons = item($buttons);
    $stake = item(u\fmtAmt($stake, ''), t('Your investment:'));
    $reclaim = $reclaim ? item(u\fmtAmt($reclaim, ''), t('Reclaim:'), t('Your request to reclaim part of your investment (included in the investment amount shown above)')) : NULL;
    $new = w\textFld(t('New amount:'), [t('New investment amount'), t('If you reduce your investment amount, it will take effect (if possible), when the next investment round happens.')], required());
    $submit = submit(t('Change stake'));
  } else { // not a member yet
    $title = t('Join Your Local Investment Club');
    $subtext = t(<<< X
  <p>Yes, I want to join the %cttyName Investment Club (the Club). I agree to the Club's <%a>Partnership Agreement</a>. In particular:</p>
  <ol><li>I recognize my investment is at risk. I may not be able to reclaim it right away and may <i>lose</i> some or all of it.</li>
  <li>I agree to participate actively in overseeing the Club's investments &mdash; at a minimum by voting on the proposed investments each calendar quarter (voting directly, not by proxy).</li>
  </ol>
X
    , 'cttyName _a', $mya->cttyA->fullName, atag('http://partnershipLink'));
    $subtext = w\item($subtext);
    $signedBy = w\signedBy();
    $submit = w\submit(t('Join'));
  }
  
  $title = w\item($title);
  return w\labeled(compact(ray('title subtext buttons signedBy old stake reclaim new submit')));
}

function formInvest_validate($form, &$sta) {
  global $mya;

  extract(just('signedBy old new', $sta['input']));
  if (isset($signedBy)) {
    w\badSignature($sta);
    return;
  }
  
  extract(just('clid stake', unserialize($old)));
  if (@$clid) {
    if ($err = u\badAmount($new, '>=0')) return say($err, 'new');
    if (!$add = $new - $stake) return say(t('That\'s the same amount you already have invested.'), 'new');
    if ($add > 0 and $short = $mya->shortfall(FOR_USD, $add)) return say(t('You are %short short for that investment.', ray('short', u\fmtAmt($short))), 'new');
  }
}

function formInvest_submit($form, &$sta) {
  global $mya;
  extract(just('signedBy old new', $sta['input']));
  
  if (@$signedBy) {
    db\insert('r_clubbed', ray('uid clubid joined', $mya->id, r\clubid(), time()));
    w\say(t('You are now a member of the club!'));
  } elseif (@$new) {
    extract(just('clid clubid stake reclaim', unserialize($old)));
    $add = $new - $stake;
    $DBTX = \db_transaction();
    if ($add > 0) {
      list ($index, $subs) = be\transfer('payment', $mya, r\acct($clubid), $new - $old, FOR_USD, t('investment'));
      if (!$subs['success']) return say($index, $subs, 'err');
      $reclaim = 0;
      say(t('Your investment amount has been updated.'));
    } elseif ($add < 0) {
      $reclaim = -$add;
      $new = $stake;
      say(t('Your request to reclaim some of your investment will be attempted upon the next investment cycle.'));
    }
    db\update('r_clubbed', ray('clid stake reclaim', $clid, $new, $reclaim), 'clid');
    unset($DBTX);
  }
}

/**
 * Propose a new Investment.
 */
function formInvestPropose($form, &$sta) {
  global $mya;
  
  $title = item(t('Propose a new Investment'));
  $company = textFld(t('Company:'), [t('Company to invest in'), t('Choose a %PROJECT member company (or type its account ID) or <%a>click here</a> to add them.', '_a', 'a id="add-co"')]);
  $fullName = textFld(t('Company:'), [t('The company\'s full name')]);
  $city = textFld(t('City:'), [t('City where company is located')]);
  $serviceArea = textFld(t('Service area:'), [t('Company service Area')]);
  $dob = textFld(t('Founded:'), [t('Founding date'), t('When did this company begin, approximately (mm/dd/yyyy)')]);
  $categories = selectFld(t('Categories:'), t('Hold down the Ctrl key to select more than one'), ['multiple' => TRUE], coCats());
  $investment = areaFld(t('Description:'), [t('Description'), t('Arbitrarily complex description, using <%a>markdown</a>. Use "&#92;" for line breaks.', '_a', w\atag('http://commonmark.org/help/'))]);
  $return = textFld(t('Return:'), [t('Predicted return'), t('What APR does the company predict for investors?')], required());
  $terms = areaFld(t('Terms:'), [t('Terms of the investment'), t('Minimum investment, minimum length of time, and any other details about the deal.')], required());
  $submit = submit(t('Submit'));

  w\whoFldSubmit('company', t('Propose an investment in %name?'), ray('coOnly', TRUE));
  jsx('invest-proposal');
  
  return labeled(compact(ray('title company fullName city serviceArea dob categories investment return terms submit')));
}

function formInvestPropose_validate($form, &$sta) {
  
}

function formInvestPropose_submit($form, &$sta) {
  extract(just('company fullName city serviceArea dob categories investment return terms', $sta['input']));
  if (@$fullName) {
    $a = new r\Acct(compact(ray('fullName city serviceArea dob')));
    $a->setCategories($categories);
  } else $a = r\acct($company);

  $a->insert('r_investments', compact(ray('investment return terms')));
  r\go('/invest', t('Your proposed investment has been saved.'));
}


/**
 * Request an employee ID card (for buying on behalf of the company).
 */
function formRequestRCard($form, &$sta, $other = '') {
  global $mya;
  if (!$acct = r\acct($mya->id, @$other)) return hack('request rCard');
//  if (!$mya->co or !$mya->can(B_REFUND)) return say('no account permission');
  if (!$mya->can(B_SCAN)) return say('no account permission', 'err');
  $fullName = $acct->fullName;
  
  if ($mya->can(B_BUY)) {
    $title = item(t('Request Employee %PROJECT Card'));
    $subtext = t('A Company %PROJECT Card will be US Mailed to %fullName, to be used for making in-person purchases on behalf of the company.', compact('fullName'));
  } else { // requesting cashier card -- not for purchases
    $title = item(t('Request Cashier %PROJECT Card'));
    $subtext = t('A %PROJECT Cashier %PROJECT Card will be US Mailed to %fullName, to be used for charging customers on behalf of the company.', compact('fullName'));
  }
  
  $subtext = item($subtext . t(' Your company account will be charged $@R_CARD_COST.'));
  $other = hidFld($other);
  $request = submit(t('Request Card'));
  $cancel = submit(t('Cancel'));

  return labeled(compact(ray('title subtext other request cancel')));
}

function formRequestRCard_submit($form, &$sta) {
  global $base_url;
  extract(just('other', $sta['input']));
  if (op($sta) == 'request') {
    global $mya;
    $main = $mya->id;
    $company = $mya->fullName;
    $otherName = r\acct($other)->fullName;
    $address = $mya->postalAddr; // was r\location($mya, TRUE);
    $_a = atag("/print-rcard/$main/$other");
    r\tellAdmin($mya->can(B_BUY) ? t('company rcard') : t('cashier card'), compact(ray('main other _a manager otherName address')));
    say('card ordered', compact('otherName', 'company'));
  } else say('no card ordered');
  return r\go('settings/relations');
}

function formFooter() {
  global $base_url, $rUrl;
//  $layout = (svar('layout') == 'Mobile') ? 'Desktop' : 'Mobile';
  $year = date('Y');

  //<a href="?layout=$layout">$layout layout</a> |
  global $mya;
  $extraLinks = ($mya and $mya->can(B_MANAGE)) 
  ? t('|<%aDonate>Donate</a> | <%aInvite>Invite Someone</a> | ',
    '_aDonate _aInvite', w\atag('/community/donate'), w\atag('/community/invite'))
  : ($mya ? '' : t('|<%aSignin>Sign in</a> |', '_aSignin', w\atag('/signin')));

  $helpType = $mya ? '' : 'other';
  
  $markup = "<hr><div id=\"footer-menu\">$extraLinks" . t(<<<EOF
|   <%aSite>About %PROJECT</a> |
    <%aAgree>The Agreement</a> |
    <%aSecurity>Privacy & Security</a> |
    <%aHelp>Help</a>
<br>&nbsp;
</div>
copyright &copy; %year <%aSite>%PROJECT<sup>&trade;</sup></a><span id="footer-details">, a nonprofit organization<br/>
%CGF_POSTALADDR<br/>
%CGF_PHONE &nbsp; <%aEmail>%CGF_EMAIL</a><br>
<br>
IP: %ip</span>
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>&nbsp;
EOF
  , '_aSite _aAgree _aSecurity _aHelp year _aEmail ip', w\atag(r\promoLink('about.html')), w\atag('/community/agreement'), w\atag(r\promoLink('security.html')), w\atag("/help/$helpType"), $year, u\emailTag(CGF_EMAIL), $_SERVER['REMOTE_ADDR']);
//    <%aCttys>Communities</a> |

  $footerText = item($markup); // unique name for this page
//  $sid = db\lookup('sid', 'sessions', 'uid=:uid', ['uid' => $mya ? $mya->agentA->id : 0]);
  
  js('parse-query');
  js('misc', 'baseUrl sid life isSafari', BASE_URL, session_id(), ($mya and !isDEV) ? SESSION_LIFE : 0, isSAFARI);
  return compact('footerText');
}

/**
 * Return a display of participating companies (for promo site)
 */
function whosin($ctty = '') {
//  if (!$uid = db\lookup('uid', 'users', 'name=:ctty', ['ctty' => "$ctty."])) return '';
  $ctty = '!' . $ctty; // promo site omits the leading '!' from the community's QID
  if (!$uid = r\qo($ctty)->id or !$list = r\companies($uid, FALSE)) return '';
  $map = [
    '<tr><td width="200">' => '<div class="row"><div class="cmpy-name">',
    '</td><td style="margin-left:10px;">' => '</div><div class="cmpy-does">',
    '</td></tr>' => '</div></div>',
  ];
  $list = strtr($list, $map); // temporary fudge
/**/  echo $list;
  exit();
}